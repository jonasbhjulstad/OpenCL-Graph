; ModuleID = 'SIR_Bernoulli_Network.clcpp'
source_filename = "SIR_Bernoulli_Network.clcpp"
target datalayout = "e-p:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024"
target triple = "spir-unknown-unknown"

%struct.isaac_state = type { [256 x i32], [256 x i32], i32, i32, i32, i32 }
%struct.kiss99_state = type { i32, i32, i32, i32 }
%struct.lfib_state = type { [17 x i64], i8, i8 }
%struct.mrg31k3p_state = type { i32, i32, i32, i32, i32, i32 }
%struct.mrg63k3a_state = type { i64, i64, i64, i64, i64, i64 }
%struct.msws_state = type { %union.anon, i64 }
%union.anon = type { i64 }
%struct.mt19937_state = type { [624 x i32], i32 }
%union.mwc64x_state = type { i64 }
%struct.anon = type { i32, i32 }
%union.philox2x32_10_state = type { i64 }
%struct.anon.0 = type { i32, i32 }
%struct.ran2_state = type { i32, i32, i32, [32 x i32] }
%struct.TINYMT32WP_T = type { i32, i32, i32, i32, i32, i32, i32 }
%union.tyche_state = type { i64, [8 x i8] }
%struct.anon.1 = type { i32, i32, i32, i32 }
%struct.well512_state = type { [16 x i32], i32 }
%struct.PRNG_LCG6432 = type { i64 }

$_ZNU3AS412PRNG_LCG6432C1ERU3AS2m = comdat any

$_Z11assignVec_gILj100EEvPU3AS4jPU3AS2j = comdat any

$_Z9assignVecILj300EEvPU3AS4jj = comdat any

$_Z14BernoulliTrialI12PRNG_LCG6432EbRT_f = comdat any

$_Z11assignVec_gILj300EEvPU3AS1jPU3AS4j = comdat any

$_Z11assignVec_gILj10000EEvPU3AS1jPU3AS4j = comdat any

$_ZNU3AS412PRNG_LCG6432C2ERU3AS2m = comdat any

$_Z13UniformSampleI12PRNG_LCG6432EfRT_ = comdat any

$_ZNU3AS412PRNG_LCG643213generate_uintEv = comdat any

@__const._Z13_mt19937_uintPU3AS413mt19937_state.mag01 = private unnamed_addr addrspace(2) constant [2 x i32] [i32 0, i32 -1727483681], align 4
@__const._Z18_mt19937_loop_uintPU3AS413mt19937_state.mag01 = private unnamed_addr addrspace(2) constant [2 x i32] [i32 0, i32 -1727483681], align 4
@tinymt32_mask = addrspace(2) constant i32 2147483647, align 4
@tinymt32_float_mask = addrspace(2) constant i32 1065353216, align 4
@tinymt32_mask.const = private unnamed_addr addrspace(2) constant i32 2147483647, align 4

; Function Attrs: convergent mustprogress norecurse nounwind
define dso_local spir_func void @_Z13isaac_advancePU3AS411isaac_state(%struct.isaac_state addrspace(4)* %state) #0 {
entry:
  %state.addr = alloca %struct.isaac_state addrspace(4)*, align 4
  %a = alloca i32, align 4
  %b = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %m = alloca i32 addrspace(4)*, align 4
  %m2 = alloca i32 addrspace(4)*, align 4
  %r = alloca i32 addrspace(4)*, align 4
  %mend = alloca i32 addrspace(4)*, align 4
  store %struct.isaac_state addrspace(4)* %state, %struct.isaac_state addrspace(4)** %state.addr, align 4
  %0 = load %struct.isaac_state addrspace(4)*, %struct.isaac_state addrspace(4)** %state.addr, align 4
  %mm = getelementptr inbounds %struct.isaac_state, %struct.isaac_state addrspace(4)* %0, i32 0, i32 1
  %arraydecay = getelementptr inbounds [256 x i32], [256 x i32] addrspace(4)* %mm, i32 0, i32 0
  store i32 addrspace(4)* %arraydecay, i32 addrspace(4)** %m, align 4
  %1 = load %struct.isaac_state addrspace(4)*, %struct.isaac_state addrspace(4)** %state.addr, align 4
  %rr = getelementptr inbounds %struct.isaac_state, %struct.isaac_state addrspace(4)* %1, i32 0, i32 0
  %arraydecay1 = getelementptr inbounds [256 x i32], [256 x i32] addrspace(4)* %rr, i32 0, i32 0
  store i32 addrspace(4)* %arraydecay1, i32 addrspace(4)** %r, align 4
  %2 = load %struct.isaac_state addrspace(4)*, %struct.isaac_state addrspace(4)** %state.addr, align 4
  %aa = getelementptr inbounds %struct.isaac_state, %struct.isaac_state addrspace(4)* %2, i32 0, i32 2
  %3 = load i32, i32 addrspace(4)* %aa, align 4
  store i32 %3, i32* %a, align 4
  %4 = load %struct.isaac_state addrspace(4)*, %struct.isaac_state addrspace(4)** %state.addr, align 4
  %bb = getelementptr inbounds %struct.isaac_state, %struct.isaac_state addrspace(4)* %4, i32 0, i32 3
  %5 = load i32, i32 addrspace(4)* %bb, align 4
  %6 = load %struct.isaac_state addrspace(4)*, %struct.isaac_state addrspace(4)** %state.addr, align 4
  %cc = getelementptr inbounds %struct.isaac_state, %struct.isaac_state addrspace(4)* %6, i32 0, i32 4
  %7 = load i32, i32 addrspace(4)* %cc, align 4
  %inc = add i32 %7, 1
  store i32 %inc, i32 addrspace(4)* %cc, align 4
  %add = add i32 %5, %inc
  store i32 %add, i32* %b, align 4
  %8 = load %struct.isaac_state addrspace(4)*, %struct.isaac_state addrspace(4)** %state.addr, align 4
  %mm2 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state addrspace(4)* %8, i32 0, i32 1
  %arraydecay3 = getelementptr inbounds [256 x i32], [256 x i32] addrspace(4)* %mm2, i32 0, i32 0
  store i32 addrspace(4)* %arraydecay3, i32 addrspace(4)** %m, align 4
  %9 = load i32 addrspace(4)*, i32 addrspace(4)** %m, align 4
  %add.ptr = getelementptr inbounds i32, i32 addrspace(4)* %9, i32 128
  store i32 addrspace(4)* %add.ptr, i32 addrspace(4)** %m2, align 4
  store i32 addrspace(4)* %add.ptr, i32 addrspace(4)** %mend, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.body, %entry
  %10 = load i32 addrspace(4)*, i32 addrspace(4)** %m, align 4
  %11 = load i32 addrspace(4)*, i32 addrspace(4)** %mend, align 4
  %cmp = icmp ult i32 addrspace(4)* %10, %11
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load i32 addrspace(4)*, i32 addrspace(4)** %m, align 4
  %13 = load i32, i32 addrspace(4)* %12, align 4
  store i32 %13, i32* %x, align 4
  %14 = load i32, i32* %a, align 4
  %15 = load i32, i32* %a, align 4
  %shl = shl i32 %15, 13
  %xor = xor i32 %14, %shl
  %16 = load i32 addrspace(4)*, i32 addrspace(4)** %m2, align 4
  %incdec.ptr = getelementptr inbounds i32, i32 addrspace(4)* %16, i32 1
  store i32 addrspace(4)* %incdec.ptr, i32 addrspace(4)** %m2, align 4
  %17 = load i32, i32 addrspace(4)* %16, align 4
  %add4 = add i32 %xor, %17
  store i32 %add4, i32* %a, align 4
  %18 = load %struct.isaac_state addrspace(4)*, %struct.isaac_state addrspace(4)** %state.addr, align 4
  %mm5 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state addrspace(4)* %18, i32 0, i32 1
  %arraydecay6 = getelementptr inbounds [256 x i32], [256 x i32] addrspace(4)* %mm5, i32 0, i32 0
  %19 = bitcast i32 addrspace(4)* %arraydecay6 to i8 addrspace(4)*
  %20 = load i32, i32* %x, align 4
  %and = and i32 %20, 1020
  %add.ptr7 = getelementptr inbounds i8, i8 addrspace(4)* %19, i32 %and
  %21 = bitcast i8 addrspace(4)* %add.ptr7 to i32 addrspace(4)*
  %22 = load i32, i32 addrspace(4)* %21, align 4
  %23 = load i32, i32* %a, align 4
  %add8 = add i32 %22, %23
  %24 = load i32, i32* %b, align 4
  %add9 = add i32 %add8, %24
  store i32 %add9, i32* %y, align 4
  %25 = load i32 addrspace(4)*, i32 addrspace(4)** %m, align 4
  %incdec.ptr10 = getelementptr inbounds i32, i32 addrspace(4)* %25, i32 1
  store i32 addrspace(4)* %incdec.ptr10, i32 addrspace(4)** %m, align 4
  store i32 %add9, i32 addrspace(4)* %25, align 4
  %26 = load %struct.isaac_state addrspace(4)*, %struct.isaac_state addrspace(4)** %state.addr, align 4
  %mm11 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state addrspace(4)* %26, i32 0, i32 1
  %arraydecay12 = getelementptr inbounds [256 x i32], [256 x i32] addrspace(4)* %mm11, i32 0, i32 0
  %27 = bitcast i32 addrspace(4)* %arraydecay12 to i8 addrspace(4)*
  %28 = load i32, i32* %y, align 4
  %shr = lshr i32 %28, 8
  %and13 = and i32 %shr, 1020
  %add.ptr14 = getelementptr inbounds i8, i8 addrspace(4)* %27, i32 %and13
  %29 = bitcast i8 addrspace(4)* %add.ptr14 to i32 addrspace(4)*
  %30 = load i32, i32 addrspace(4)* %29, align 4
  %31 = load i32, i32* %x, align 4
  %add15 = add i32 %30, %31
  store i32 %add15, i32* %b, align 4
  %32 = load i32 addrspace(4)*, i32 addrspace(4)** %r, align 4
  %incdec.ptr16 = getelementptr inbounds i32, i32 addrspace(4)* %32, i32 1
  store i32 addrspace(4)* %incdec.ptr16, i32 addrspace(4)** %r, align 4
  store i32 %add15, i32 addrspace(4)* %32, align 4
  %33 = load i32 addrspace(4)*, i32 addrspace(4)** %m, align 4
  %34 = load i32, i32 addrspace(4)* %33, align 4
  store i32 %34, i32* %x, align 4
  %35 = load i32, i32* %a, align 4
  %36 = load i32, i32* %a, align 4
  %shr17 = lshr i32 %36, 6
  %xor18 = xor i32 %35, %shr17
  %37 = load i32 addrspace(4)*, i32 addrspace(4)** %m2, align 4
  %incdec.ptr19 = getelementptr inbounds i32, i32 addrspace(4)* %37, i32 1
  store i32 addrspace(4)* %incdec.ptr19, i32 addrspace(4)** %m2, align 4
  %38 = load i32, i32 addrspace(4)* %37, align 4
  %add20 = add i32 %xor18, %38
  store i32 %add20, i32* %a, align 4
  %39 = load %struct.isaac_state addrspace(4)*, %struct.isaac_state addrspace(4)** %state.addr, align 4
  %mm21 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state addrspace(4)* %39, i32 0, i32 1
  %arraydecay22 = getelementptr inbounds [256 x i32], [256 x i32] addrspace(4)* %mm21, i32 0, i32 0
  %40 = bitcast i32 addrspace(4)* %arraydecay22 to i8 addrspace(4)*
  %41 = load i32, i32* %x, align 4
  %and23 = and i32 %41, 1020
  %add.ptr24 = getelementptr inbounds i8, i8 addrspace(4)* %40, i32 %and23
  %42 = bitcast i8 addrspace(4)* %add.ptr24 to i32 addrspace(4)*
  %43 = load i32, i32 addrspace(4)* %42, align 4
  %44 = load i32, i32* %a, align 4
  %add25 = add i32 %43, %44
  %45 = load i32, i32* %b, align 4
  %add26 = add i32 %add25, %45
  store i32 %add26, i32* %y, align 4
  %46 = load i32 addrspace(4)*, i32 addrspace(4)** %m, align 4
  %incdec.ptr27 = getelementptr inbounds i32, i32 addrspace(4)* %46, i32 1
  store i32 addrspace(4)* %incdec.ptr27, i32 addrspace(4)** %m, align 4
  store i32 %add26, i32 addrspace(4)* %46, align 4
  %47 = load %struct.isaac_state addrspace(4)*, %struct.isaac_state addrspace(4)** %state.addr, align 4
  %mm28 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state addrspace(4)* %47, i32 0, i32 1
  %arraydecay29 = getelementptr inbounds [256 x i32], [256 x i32] addrspace(4)* %mm28, i32 0, i32 0
  %48 = bitcast i32 addrspace(4)* %arraydecay29 to i8 addrspace(4)*
  %49 = load i32, i32* %y, align 4
  %shr30 = lshr i32 %49, 8
  %and31 = and i32 %shr30, 1020
  %add.ptr32 = getelementptr inbounds i8, i8 addrspace(4)* %48, i32 %and31
  %50 = bitcast i8 addrspace(4)* %add.ptr32 to i32 addrspace(4)*
  %51 = load i32, i32 addrspace(4)* %50, align 4
  %52 = load i32, i32* %x, align 4
  %add33 = add i32 %51, %52
  store i32 %add33, i32* %b, align 4
  %53 = load i32 addrspace(4)*, i32 addrspace(4)** %r, align 4
  %incdec.ptr34 = getelementptr inbounds i32, i32 addrspace(4)* %53, i32 1
  store i32 addrspace(4)* %incdec.ptr34, i32 addrspace(4)** %r, align 4
  store i32 %add33, i32 addrspace(4)* %53, align 4
  %54 = load i32 addrspace(4)*, i32 addrspace(4)** %m, align 4
  %55 = load i32, i32 addrspace(4)* %54, align 4
  store i32 %55, i32* %x, align 4
  %56 = load i32, i32* %a, align 4
  %57 = load i32, i32* %a, align 4
  %shl35 = shl i32 %57, 2
  %xor36 = xor i32 %56, %shl35
  %58 = load i32 addrspace(4)*, i32 addrspace(4)** %m2, align 4
  %incdec.ptr37 = getelementptr inbounds i32, i32 addrspace(4)* %58, i32 1
  store i32 addrspace(4)* %incdec.ptr37, i32 addrspace(4)** %m2, align 4
  %59 = load i32, i32 addrspace(4)* %58, align 4
  %add38 = add i32 %xor36, %59
  store i32 %add38, i32* %a, align 4
  %60 = load %struct.isaac_state addrspace(4)*, %struct.isaac_state addrspace(4)** %state.addr, align 4
  %mm39 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state addrspace(4)* %60, i32 0, i32 1
  %arraydecay40 = getelementptr inbounds [256 x i32], [256 x i32] addrspace(4)* %mm39, i32 0, i32 0
  %61 = bitcast i32 addrspace(4)* %arraydecay40 to i8 addrspace(4)*
  %62 = load i32, i32* %x, align 4
  %and41 = and i32 %62, 1020
  %add.ptr42 = getelementptr inbounds i8, i8 addrspace(4)* %61, i32 %and41
  %63 = bitcast i8 addrspace(4)* %add.ptr42 to i32 addrspace(4)*
  %64 = load i32, i32 addrspace(4)* %63, align 4
  %65 = load i32, i32* %a, align 4
  %add43 = add i32 %64, %65
  %66 = load i32, i32* %b, align 4
  %add44 = add i32 %add43, %66
  store i32 %add44, i32* %y, align 4
  %67 = load i32 addrspace(4)*, i32 addrspace(4)** %m, align 4
  %incdec.ptr45 = getelementptr inbounds i32, i32 addrspace(4)* %67, i32 1
  store i32 addrspace(4)* %incdec.ptr45, i32 addrspace(4)** %m, align 4
  store i32 %add44, i32 addrspace(4)* %67, align 4
  %68 = load %struct.isaac_state addrspace(4)*, %struct.isaac_state addrspace(4)** %state.addr, align 4
  %mm46 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state addrspace(4)* %68, i32 0, i32 1
  %arraydecay47 = getelementptr inbounds [256 x i32], [256 x i32] addrspace(4)* %mm46, i32 0, i32 0
  %69 = bitcast i32 addrspace(4)* %arraydecay47 to i8 addrspace(4)*
  %70 = load i32, i32* %y, align 4
  %shr48 = lshr i32 %70, 8
  %and49 = and i32 %shr48, 1020
  %add.ptr50 = getelementptr inbounds i8, i8 addrspace(4)* %69, i32 %and49
  %71 = bitcast i8 addrspace(4)* %add.ptr50 to i32 addrspace(4)*
  %72 = load i32, i32 addrspace(4)* %71, align 4
  %73 = load i32, i32* %x, align 4
  %add51 = add i32 %72, %73
  store i32 %add51, i32* %b, align 4
  %74 = load i32 addrspace(4)*, i32 addrspace(4)** %r, align 4
  %incdec.ptr52 = getelementptr inbounds i32, i32 addrspace(4)* %74, i32 1
  store i32 addrspace(4)* %incdec.ptr52, i32 addrspace(4)** %r, align 4
  store i32 %add51, i32 addrspace(4)* %74, align 4
  %75 = load i32 addrspace(4)*, i32 addrspace(4)** %m, align 4
  %76 = load i32, i32 addrspace(4)* %75, align 4
  store i32 %76, i32* %x, align 4
  %77 = load i32, i32* %a, align 4
  %78 = load i32, i32* %a, align 4
  %shr53 = lshr i32 %78, 16
  %xor54 = xor i32 %77, %shr53
  %79 = load i32 addrspace(4)*, i32 addrspace(4)** %m2, align 4
  %incdec.ptr55 = getelementptr inbounds i32, i32 addrspace(4)* %79, i32 1
  store i32 addrspace(4)* %incdec.ptr55, i32 addrspace(4)** %m2, align 4
  %80 = load i32, i32 addrspace(4)* %79, align 4
  %add56 = add i32 %xor54, %80
  store i32 %add56, i32* %a, align 4
  %81 = load %struct.isaac_state addrspace(4)*, %struct.isaac_state addrspace(4)** %state.addr, align 4
  %mm57 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state addrspace(4)* %81, i32 0, i32 1
  %arraydecay58 = getelementptr inbounds [256 x i32], [256 x i32] addrspace(4)* %mm57, i32 0, i32 0
  %82 = bitcast i32 addrspace(4)* %arraydecay58 to i8 addrspace(4)*
  %83 = load i32, i32* %x, align 4
  %and59 = and i32 %83, 1020
  %add.ptr60 = getelementptr inbounds i8, i8 addrspace(4)* %82, i32 %and59
  %84 = bitcast i8 addrspace(4)* %add.ptr60 to i32 addrspace(4)*
  %85 = load i32, i32 addrspace(4)* %84, align 4
  %86 = load i32, i32* %a, align 4
  %add61 = add i32 %85, %86
  %87 = load i32, i32* %b, align 4
  %add62 = add i32 %add61, %87
  store i32 %add62, i32* %y, align 4
  %88 = load i32 addrspace(4)*, i32 addrspace(4)** %m, align 4
  %incdec.ptr63 = getelementptr inbounds i32, i32 addrspace(4)* %88, i32 1
  store i32 addrspace(4)* %incdec.ptr63, i32 addrspace(4)** %m, align 4
  store i32 %add62, i32 addrspace(4)* %88, align 4
  %89 = load %struct.isaac_state addrspace(4)*, %struct.isaac_state addrspace(4)** %state.addr, align 4
  %mm64 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state addrspace(4)* %89, i32 0, i32 1
  %arraydecay65 = getelementptr inbounds [256 x i32], [256 x i32] addrspace(4)* %mm64, i32 0, i32 0
  %90 = bitcast i32 addrspace(4)* %arraydecay65 to i8 addrspace(4)*
  %91 = load i32, i32* %y, align 4
  %shr66 = lshr i32 %91, 8
  %and67 = and i32 %shr66, 1020
  %add.ptr68 = getelementptr inbounds i8, i8 addrspace(4)* %90, i32 %and67
  %92 = bitcast i8 addrspace(4)* %add.ptr68 to i32 addrspace(4)*
  %93 = load i32, i32 addrspace(4)* %92, align 4
  %94 = load i32, i32* %x, align 4
  %add69 = add i32 %93, %94
  store i32 %add69, i32* %b, align 4
  %95 = load i32 addrspace(4)*, i32 addrspace(4)** %r, align 4
  %incdec.ptr70 = getelementptr inbounds i32, i32 addrspace(4)* %95, i32 1
  store i32 addrspace(4)* %incdec.ptr70, i32 addrspace(4)** %r, align 4
  store i32 %add69, i32 addrspace(4)* %95, align 4
  br label %for.cond, !llvm.loop !3

for.end:                                          ; preds = %for.cond
  %96 = load %struct.isaac_state addrspace(4)*, %struct.isaac_state addrspace(4)** %state.addr, align 4
  %mm71 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state addrspace(4)* %96, i32 0, i32 1
  %arraydecay72 = getelementptr inbounds [256 x i32], [256 x i32] addrspace(4)* %mm71, i32 0, i32 0
  store i32 addrspace(4)* %arraydecay72, i32 addrspace(4)** %m2, align 4
  br label %for.cond73

for.cond73:                                       ; preds = %for.body75, %for.end
  %97 = load i32 addrspace(4)*, i32 addrspace(4)** %m2, align 4
  %98 = load i32 addrspace(4)*, i32 addrspace(4)** %mend, align 4
  %cmp74 = icmp ult i32 addrspace(4)* %97, %98
  br i1 %cmp74, label %for.body75, label %for.end148

for.body75:                                       ; preds = %for.cond73
  %99 = load i32 addrspace(4)*, i32 addrspace(4)** %m, align 4
  %100 = load i32, i32 addrspace(4)* %99, align 4
  store i32 %100, i32* %x, align 4
  %101 = load i32, i32* %a, align 4
  %102 = load i32, i32* %a, align 4
  %shl76 = shl i32 %102, 13
  %xor77 = xor i32 %101, %shl76
  %103 = load i32 addrspace(4)*, i32 addrspace(4)** %m2, align 4
  %incdec.ptr78 = getelementptr inbounds i32, i32 addrspace(4)* %103, i32 1
  store i32 addrspace(4)* %incdec.ptr78, i32 addrspace(4)** %m2, align 4
  %104 = load i32, i32 addrspace(4)* %103, align 4
  %add79 = add i32 %xor77, %104
  store i32 %add79, i32* %a, align 4
  %105 = load %struct.isaac_state addrspace(4)*, %struct.isaac_state addrspace(4)** %state.addr, align 4
  %mm80 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state addrspace(4)* %105, i32 0, i32 1
  %arraydecay81 = getelementptr inbounds [256 x i32], [256 x i32] addrspace(4)* %mm80, i32 0, i32 0
  %106 = bitcast i32 addrspace(4)* %arraydecay81 to i8 addrspace(4)*
  %107 = load i32, i32* %x, align 4
  %and82 = and i32 %107, 1020
  %add.ptr83 = getelementptr inbounds i8, i8 addrspace(4)* %106, i32 %and82
  %108 = bitcast i8 addrspace(4)* %add.ptr83 to i32 addrspace(4)*
  %109 = load i32, i32 addrspace(4)* %108, align 4
  %110 = load i32, i32* %a, align 4
  %add84 = add i32 %109, %110
  %111 = load i32, i32* %b, align 4
  %add85 = add i32 %add84, %111
  store i32 %add85, i32* %y, align 4
  %112 = load i32 addrspace(4)*, i32 addrspace(4)** %m, align 4
  %incdec.ptr86 = getelementptr inbounds i32, i32 addrspace(4)* %112, i32 1
  store i32 addrspace(4)* %incdec.ptr86, i32 addrspace(4)** %m, align 4
  store i32 %add85, i32 addrspace(4)* %112, align 4
  %113 = load %struct.isaac_state addrspace(4)*, %struct.isaac_state addrspace(4)** %state.addr, align 4
  %mm87 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state addrspace(4)* %113, i32 0, i32 1
  %arraydecay88 = getelementptr inbounds [256 x i32], [256 x i32] addrspace(4)* %mm87, i32 0, i32 0
  %114 = bitcast i32 addrspace(4)* %arraydecay88 to i8 addrspace(4)*
  %115 = load i32, i32* %y, align 4
  %shr89 = lshr i32 %115, 8
  %and90 = and i32 %shr89, 1020
  %add.ptr91 = getelementptr inbounds i8, i8 addrspace(4)* %114, i32 %and90
  %116 = bitcast i8 addrspace(4)* %add.ptr91 to i32 addrspace(4)*
  %117 = load i32, i32 addrspace(4)* %116, align 4
  %118 = load i32, i32* %x, align 4
  %add92 = add i32 %117, %118
  store i32 %add92, i32* %b, align 4
  %119 = load i32 addrspace(4)*, i32 addrspace(4)** %r, align 4
  %incdec.ptr93 = getelementptr inbounds i32, i32 addrspace(4)* %119, i32 1
  store i32 addrspace(4)* %incdec.ptr93, i32 addrspace(4)** %r, align 4
  store i32 %add92, i32 addrspace(4)* %119, align 4
  %120 = load i32 addrspace(4)*, i32 addrspace(4)** %m, align 4
  %121 = load i32, i32 addrspace(4)* %120, align 4
  store i32 %121, i32* %x, align 4
  %122 = load i32, i32* %a, align 4
  %123 = load i32, i32* %a, align 4
  %shr94 = lshr i32 %123, 6
  %xor95 = xor i32 %122, %shr94
  %124 = load i32 addrspace(4)*, i32 addrspace(4)** %m2, align 4
  %incdec.ptr96 = getelementptr inbounds i32, i32 addrspace(4)* %124, i32 1
  store i32 addrspace(4)* %incdec.ptr96, i32 addrspace(4)** %m2, align 4
  %125 = load i32, i32 addrspace(4)* %124, align 4
  %add97 = add i32 %xor95, %125
  store i32 %add97, i32* %a, align 4
  %126 = load %struct.isaac_state addrspace(4)*, %struct.isaac_state addrspace(4)** %state.addr, align 4
  %mm98 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state addrspace(4)* %126, i32 0, i32 1
  %arraydecay99 = getelementptr inbounds [256 x i32], [256 x i32] addrspace(4)* %mm98, i32 0, i32 0
  %127 = bitcast i32 addrspace(4)* %arraydecay99 to i8 addrspace(4)*
  %128 = load i32, i32* %x, align 4
  %and100 = and i32 %128, 1020
  %add.ptr101 = getelementptr inbounds i8, i8 addrspace(4)* %127, i32 %and100
  %129 = bitcast i8 addrspace(4)* %add.ptr101 to i32 addrspace(4)*
  %130 = load i32, i32 addrspace(4)* %129, align 4
  %131 = load i32, i32* %a, align 4
  %add102 = add i32 %130, %131
  %132 = load i32, i32* %b, align 4
  %add103 = add i32 %add102, %132
  store i32 %add103, i32* %y, align 4
  %133 = load i32 addrspace(4)*, i32 addrspace(4)** %m, align 4
  %incdec.ptr104 = getelementptr inbounds i32, i32 addrspace(4)* %133, i32 1
  store i32 addrspace(4)* %incdec.ptr104, i32 addrspace(4)** %m, align 4
  store i32 %add103, i32 addrspace(4)* %133, align 4
  %134 = load %struct.isaac_state addrspace(4)*, %struct.isaac_state addrspace(4)** %state.addr, align 4
  %mm105 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state addrspace(4)* %134, i32 0, i32 1
  %arraydecay106 = getelementptr inbounds [256 x i32], [256 x i32] addrspace(4)* %mm105, i32 0, i32 0
  %135 = bitcast i32 addrspace(4)* %arraydecay106 to i8 addrspace(4)*
  %136 = load i32, i32* %y, align 4
  %shr107 = lshr i32 %136, 8
  %and108 = and i32 %shr107, 1020
  %add.ptr109 = getelementptr inbounds i8, i8 addrspace(4)* %135, i32 %and108
  %137 = bitcast i8 addrspace(4)* %add.ptr109 to i32 addrspace(4)*
  %138 = load i32, i32 addrspace(4)* %137, align 4
  %139 = load i32, i32* %x, align 4
  %add110 = add i32 %138, %139
  store i32 %add110, i32* %b, align 4
  %140 = load i32 addrspace(4)*, i32 addrspace(4)** %r, align 4
  %incdec.ptr111 = getelementptr inbounds i32, i32 addrspace(4)* %140, i32 1
  store i32 addrspace(4)* %incdec.ptr111, i32 addrspace(4)** %r, align 4
  store i32 %add110, i32 addrspace(4)* %140, align 4
  %141 = load i32 addrspace(4)*, i32 addrspace(4)** %m, align 4
  %142 = load i32, i32 addrspace(4)* %141, align 4
  store i32 %142, i32* %x, align 4
  %143 = load i32, i32* %a, align 4
  %144 = load i32, i32* %a, align 4
  %shl112 = shl i32 %144, 2
  %xor113 = xor i32 %143, %shl112
  %145 = load i32 addrspace(4)*, i32 addrspace(4)** %m2, align 4
  %incdec.ptr114 = getelementptr inbounds i32, i32 addrspace(4)* %145, i32 1
  store i32 addrspace(4)* %incdec.ptr114, i32 addrspace(4)** %m2, align 4
  %146 = load i32, i32 addrspace(4)* %145, align 4
  %add115 = add i32 %xor113, %146
  store i32 %add115, i32* %a, align 4
  %147 = load %struct.isaac_state addrspace(4)*, %struct.isaac_state addrspace(4)** %state.addr, align 4
  %mm116 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state addrspace(4)* %147, i32 0, i32 1
  %arraydecay117 = getelementptr inbounds [256 x i32], [256 x i32] addrspace(4)* %mm116, i32 0, i32 0
  %148 = bitcast i32 addrspace(4)* %arraydecay117 to i8 addrspace(4)*
  %149 = load i32, i32* %x, align 4
  %and118 = and i32 %149, 1020
  %add.ptr119 = getelementptr inbounds i8, i8 addrspace(4)* %148, i32 %and118
  %150 = bitcast i8 addrspace(4)* %add.ptr119 to i32 addrspace(4)*
  %151 = load i32, i32 addrspace(4)* %150, align 4
  %152 = load i32, i32* %a, align 4
  %add120 = add i32 %151, %152
  %153 = load i32, i32* %b, align 4
  %add121 = add i32 %add120, %153
  store i32 %add121, i32* %y, align 4
  %154 = load i32 addrspace(4)*, i32 addrspace(4)** %m, align 4
  %incdec.ptr122 = getelementptr inbounds i32, i32 addrspace(4)* %154, i32 1
  store i32 addrspace(4)* %incdec.ptr122, i32 addrspace(4)** %m, align 4
  store i32 %add121, i32 addrspace(4)* %154, align 4
  %155 = load %struct.isaac_state addrspace(4)*, %struct.isaac_state addrspace(4)** %state.addr, align 4
  %mm123 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state addrspace(4)* %155, i32 0, i32 1
  %arraydecay124 = getelementptr inbounds [256 x i32], [256 x i32] addrspace(4)* %mm123, i32 0, i32 0
  %156 = bitcast i32 addrspace(4)* %arraydecay124 to i8 addrspace(4)*
  %157 = load i32, i32* %y, align 4
  %shr125 = lshr i32 %157, 8
  %and126 = and i32 %shr125, 1020
  %add.ptr127 = getelementptr inbounds i8, i8 addrspace(4)* %156, i32 %and126
  %158 = bitcast i8 addrspace(4)* %add.ptr127 to i32 addrspace(4)*
  %159 = load i32, i32 addrspace(4)* %158, align 4
  %160 = load i32, i32* %x, align 4
  %add128 = add i32 %159, %160
  store i32 %add128, i32* %b, align 4
  %161 = load i32 addrspace(4)*, i32 addrspace(4)** %r, align 4
  %incdec.ptr129 = getelementptr inbounds i32, i32 addrspace(4)* %161, i32 1
  store i32 addrspace(4)* %incdec.ptr129, i32 addrspace(4)** %r, align 4
  store i32 %add128, i32 addrspace(4)* %161, align 4
  %162 = load i32 addrspace(4)*, i32 addrspace(4)** %m, align 4
  %163 = load i32, i32 addrspace(4)* %162, align 4
  store i32 %163, i32* %x, align 4
  %164 = load i32, i32* %a, align 4
  %165 = load i32, i32* %a, align 4
  %shr130 = lshr i32 %165, 16
  %xor131 = xor i32 %164, %shr130
  %166 = load i32 addrspace(4)*, i32 addrspace(4)** %m2, align 4
  %incdec.ptr132 = getelementptr inbounds i32, i32 addrspace(4)* %166, i32 1
  store i32 addrspace(4)* %incdec.ptr132, i32 addrspace(4)** %m2, align 4
  %167 = load i32, i32 addrspace(4)* %166, align 4
  %add133 = add i32 %xor131, %167
  store i32 %add133, i32* %a, align 4
  %168 = load %struct.isaac_state addrspace(4)*, %struct.isaac_state addrspace(4)** %state.addr, align 4
  %mm134 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state addrspace(4)* %168, i32 0, i32 1
  %arraydecay135 = getelementptr inbounds [256 x i32], [256 x i32] addrspace(4)* %mm134, i32 0, i32 0
  %169 = bitcast i32 addrspace(4)* %arraydecay135 to i8 addrspace(4)*
  %170 = load i32, i32* %x, align 4
  %and136 = and i32 %170, 1020
  %add.ptr137 = getelementptr inbounds i8, i8 addrspace(4)* %169, i32 %and136
  %171 = bitcast i8 addrspace(4)* %add.ptr137 to i32 addrspace(4)*
  %172 = load i32, i32 addrspace(4)* %171, align 4
  %173 = load i32, i32* %a, align 4
  %add138 = add i32 %172, %173
  %174 = load i32, i32* %b, align 4
  %add139 = add i32 %add138, %174
  store i32 %add139, i32* %y, align 4
  %175 = load i32 addrspace(4)*, i32 addrspace(4)** %m, align 4
  %incdec.ptr140 = getelementptr inbounds i32, i32 addrspace(4)* %175, i32 1
  store i32 addrspace(4)* %incdec.ptr140, i32 addrspace(4)** %m, align 4
  store i32 %add139, i32 addrspace(4)* %175, align 4
  %176 = load %struct.isaac_state addrspace(4)*, %struct.isaac_state addrspace(4)** %state.addr, align 4
  %mm141 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state addrspace(4)* %176, i32 0, i32 1
  %arraydecay142 = getelementptr inbounds [256 x i32], [256 x i32] addrspace(4)* %mm141, i32 0, i32 0
  %177 = bitcast i32 addrspace(4)* %arraydecay142 to i8 addrspace(4)*
  %178 = load i32, i32* %y, align 4
  %shr143 = lshr i32 %178, 8
  %and144 = and i32 %shr143, 1020
  %add.ptr145 = getelementptr inbounds i8, i8 addrspace(4)* %177, i32 %and144
  %179 = bitcast i8 addrspace(4)* %add.ptr145 to i32 addrspace(4)*
  %180 = load i32, i32 addrspace(4)* %179, align 4
  %181 = load i32, i32* %x, align 4
  %add146 = add i32 %180, %181
  store i32 %add146, i32* %b, align 4
  %182 = load i32 addrspace(4)*, i32 addrspace(4)** %r, align 4
  %incdec.ptr147 = getelementptr inbounds i32, i32 addrspace(4)* %182, i32 1
  store i32 addrspace(4)* %incdec.ptr147, i32 addrspace(4)** %r, align 4
  store i32 %add146, i32 addrspace(4)* %182, align 4
  br label %for.cond73, !llvm.loop !5

for.end148:                                       ; preds = %for.cond73
  %183 = load i32, i32* %b, align 4
  %184 = load %struct.isaac_state addrspace(4)*, %struct.isaac_state addrspace(4)** %state.addr, align 4
  %bb149 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state addrspace(4)* %184, i32 0, i32 3
  store i32 %183, i32 addrspace(4)* %bb149, align 4
  %185 = load i32, i32* %a, align 4
  %186 = load %struct.isaac_state addrspace(4)*, %struct.isaac_state addrspace(4)** %state.addr, align 4
  %aa150 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state addrspace(4)* %186, i32 0, i32 2
  store i32 %185, i32 addrspace(4)* %aa150, align 4
  ret void
}

; Function Attrs: convergent mustprogress norecurse nounwind
define dso_local spir_func i32 @_Z11_isaac_uintPU3AS411isaac_state(%struct.isaac_state addrspace(4)* %state) #0 {
entry:
  %state.addr = alloca %struct.isaac_state addrspace(4)*, align 4
  store %struct.isaac_state addrspace(4)* %state, %struct.isaac_state addrspace(4)** %state.addr, align 4
  %0 = load %struct.isaac_state addrspace(4)*, %struct.isaac_state addrspace(4)** %state.addr, align 4
  %idx = getelementptr inbounds %struct.isaac_state, %struct.isaac_state addrspace(4)* %0, i32 0, i32 5
  %1 = load i32, i32 addrspace(4)* %idx, align 4
  %cmp = icmp eq i32 %1, 256
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.isaac_state addrspace(4)*, %struct.isaac_state addrspace(4)** %state.addr, align 4
  call spir_func void @_Z13isaac_advancePU3AS411isaac_state(%struct.isaac_state addrspace(4)* %2) #6
  %3 = load %struct.isaac_state addrspace(4)*, %struct.isaac_state addrspace(4)** %state.addr, align 4
  %idx1 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state addrspace(4)* %3, i32 0, i32 5
  store i32 0, i32 addrspace(4)* %idx1, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.isaac_state addrspace(4)*, %struct.isaac_state addrspace(4)** %state.addr, align 4
  %rr = getelementptr inbounds %struct.isaac_state, %struct.isaac_state addrspace(4)* %4, i32 0, i32 0
  %5 = load %struct.isaac_state addrspace(4)*, %struct.isaac_state addrspace(4)** %state.addr, align 4
  %idx2 = getelementptr inbounds %struct.isaac_state, %struct.isaac_state addrspace(4)* %5, i32 0, i32 5
  %6 = load i32, i32 addrspace(4)* %idx2, align 4
  %inc = add i32 %6, 1
  store i32 %inc, i32 addrspace(4)* %idx2, align 4
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32] addrspace(4)* %rr, i32 0, i32 %6
  %7 = load i32, i32 addrspace(4)* %arrayidx, align 4
  ret i32 %7
}

; Function Attrs: convergent mustprogress norecurse nounwind
define dso_local spir_func void @_Z10isaac_seedPU3AS411isaac_statem(%struct.isaac_state addrspace(4)* %state, i64 %j) #0 {
entry:
  %state.addr = alloca %struct.isaac_state addrspace(4)*, align 4
  %j.addr = alloca i64, align 8
  %i = alloca i32, align 4
  store %struct.isaac_state addrspace(4)* %state, %struct.isaac_state addrspace(4)** %state.addr, align 4
  store i64 %j, i64* %j.addr, align 8
  %0 = load i64, i64* %j.addr, align 8
  %conv = trunc i64 %0 to i32
  %1 = load %struct.isaac_state addrspace(4)*, %struct.isaac_state addrspace(4)** %state.addr, align 4
  %aa = getelementptr inbounds %struct.isaac_state, %struct.isaac_state addrspace(4)* %1, i32 0, i32 2
  store i32 %conv, i32 addrspace(4)* %aa, align 4
  %2 = load i64, i64* %j.addr, align 8
  %xor = xor i64 %2, 123456789
  %conv1 = trunc i64 %xor to i32
  %3 = load %struct.isaac_state addrspace(4)*, %struct.isaac_state addrspace(4)** %state.addr, align 4
  %bb = getelementptr inbounds %struct.isaac_state, %struct.isaac_state addrspace(4)* %3, i32 0, i32 3
  store i32 %conv1, i32 addrspace(4)* %bb, align 4
  %4 = load i64, i64* %j.addr, align 8
  %add = add i64 %4, 123456789
  %conv2 = trunc i64 %add to i32
  %5 = load %struct.isaac_state addrspace(4)*, %struct.isaac_state addrspace(4)** %state.addr, align 4
  %cc = getelementptr inbounds %struct.isaac_state, %struct.isaac_state addrspace(4)* %5, i32 0, i32 4
  store i32 %conv2, i32 addrspace(4)* %cc, align 4
  %6 = load %struct.isaac_state addrspace(4)*, %struct.isaac_state addrspace(4)** %state.addr, align 4
  %idx = getelementptr inbounds %struct.isaac_state, %struct.isaac_state addrspace(4)* %6, i32 0, i32 5
  store i32 256, i32 addrspace(4)* %idx, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %7 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %7, 256
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load i64, i64* %j.addr, align 8
  %mul = mul i64 6906969069, %8
  %add3 = add i64 %mul, 1234567
  store i64 %add3, i64* %j.addr, align 8
  %9 = load i64, i64* %j.addr, align 8
  %conv4 = trunc i64 %9 to i32
  %10 = load %struct.isaac_state addrspace(4)*, %struct.isaac_state addrspace(4)** %state.addr, align 4
  %mm = getelementptr inbounds %struct.isaac_state, %struct.isaac_state addrspace(4)* %10, i32 0, i32 1
  %11 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32] addrspace(4)* %mm, i32 0, i32 %11
  store i32 %conv4, i32 addrspace(4)* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %i, align 4
  %inc = add nsw i32 %12, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond, !llvm.loop !6

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: convergent mustprogress norecurse nounwind
define dso_local spir_func i32 @_Z12_kiss99_uintPU3AS412kiss99_state(%struct.kiss99_state addrspace(4)* %state) #0 {
entry:
  %state.addr = alloca %struct.kiss99_state addrspace(4)*, align 4
  store %struct.kiss99_state addrspace(4)* %state, %struct.kiss99_state addrspace(4)** %state.addr, align 4
  %0 = load %struct.kiss99_state addrspace(4)*, %struct.kiss99_state addrspace(4)** %state.addr, align 4
  %z = getelementptr inbounds %struct.kiss99_state, %struct.kiss99_state addrspace(4)* %0, i32 0, i32 0
  %1 = load i32, i32 addrspace(4)* %z, align 4
  %and = and i32 %1, 65535
  %mul = mul i32 36969, %and
  %2 = load %struct.kiss99_state addrspace(4)*, %struct.kiss99_state addrspace(4)** %state.addr, align 4
  %z1 = getelementptr inbounds %struct.kiss99_state, %struct.kiss99_state addrspace(4)* %2, i32 0, i32 0
  %3 = load i32, i32 addrspace(4)* %z1, align 4
  %shr = lshr i32 %3, 16
  %add = add i32 %mul, %shr
  %4 = load %struct.kiss99_state addrspace(4)*, %struct.kiss99_state addrspace(4)** %state.addr, align 4
  %z2 = getelementptr inbounds %struct.kiss99_state, %struct.kiss99_state addrspace(4)* %4, i32 0, i32 0
  store i32 %add, i32 addrspace(4)* %z2, align 4
  %5 = load %struct.kiss99_state addrspace(4)*, %struct.kiss99_state addrspace(4)** %state.addr, align 4
  %w = getelementptr inbounds %struct.kiss99_state, %struct.kiss99_state addrspace(4)* %5, i32 0, i32 1
  %6 = load i32, i32 addrspace(4)* %w, align 4
  %and3 = and i32 %6, 65535
  %mul4 = mul i32 18000, %and3
  %7 = load %struct.kiss99_state addrspace(4)*, %struct.kiss99_state addrspace(4)** %state.addr, align 4
  %w5 = getelementptr inbounds %struct.kiss99_state, %struct.kiss99_state addrspace(4)* %7, i32 0, i32 1
  %8 = load i32, i32 addrspace(4)* %w5, align 4
  %shr6 = lshr i32 %8, 16
  %add7 = add i32 %mul4, %shr6
  %9 = load %struct.kiss99_state addrspace(4)*, %struct.kiss99_state addrspace(4)** %state.addr, align 4
  %w8 = getelementptr inbounds %struct.kiss99_state, %struct.kiss99_state addrspace(4)* %9, i32 0, i32 1
  store i32 %add7, i32 addrspace(4)* %w8, align 4
  %10 = load %struct.kiss99_state addrspace(4)*, %struct.kiss99_state addrspace(4)** %state.addr, align 4
  %jsr = getelementptr inbounds %struct.kiss99_state, %struct.kiss99_state addrspace(4)* %10, i32 0, i32 2
  %11 = load i32, i32 addrspace(4)* %jsr, align 4
  %shl = shl i32 %11, 17
  %12 = load %struct.kiss99_state addrspace(4)*, %struct.kiss99_state addrspace(4)** %state.addr, align 4
  %jsr9 = getelementptr inbounds %struct.kiss99_state, %struct.kiss99_state addrspace(4)* %12, i32 0, i32 2
  %13 = load i32, i32 addrspace(4)* %jsr9, align 4
  %xor = xor i32 %13, %shl
  store i32 %xor, i32 addrspace(4)* %jsr9, align 4
  %14 = load %struct.kiss99_state addrspace(4)*, %struct.kiss99_state addrspace(4)** %state.addr, align 4
  %jsr10 = getelementptr inbounds %struct.kiss99_state, %struct.kiss99_state addrspace(4)* %14, i32 0, i32 2
  %15 = load i32, i32 addrspace(4)* %jsr10, align 4
  %shr11 = lshr i32 %15, 13
  %16 = load %struct.kiss99_state addrspace(4)*, %struct.kiss99_state addrspace(4)** %state.addr, align 4
  %jsr12 = getelementptr inbounds %struct.kiss99_state, %struct.kiss99_state addrspace(4)* %16, i32 0, i32 2
  %17 = load i32, i32 addrspace(4)* %jsr12, align 4
  %xor13 = xor i32 %17, %shr11
  store i32 %xor13, i32 addrspace(4)* %jsr12, align 4
  %18 = load %struct.kiss99_state addrspace(4)*, %struct.kiss99_state addrspace(4)** %state.addr, align 4
  %jsr14 = getelementptr inbounds %struct.kiss99_state, %struct.kiss99_state addrspace(4)* %18, i32 0, i32 2
  %19 = load i32, i32 addrspace(4)* %jsr14, align 4
  %shl15 = shl i32 %19, 5
  %20 = load %struct.kiss99_state addrspace(4)*, %struct.kiss99_state addrspace(4)** %state.addr, align 4
  %jsr16 = getelementptr inbounds %struct.kiss99_state, %struct.kiss99_state addrspace(4)* %20, i32 0, i32 2
  %21 = load i32, i32 addrspace(4)* %jsr16, align 4
  %xor17 = xor i32 %21, %shl15
  store i32 %xor17, i32 addrspace(4)* %jsr16, align 4
  %22 = load %struct.kiss99_state addrspace(4)*, %struct.kiss99_state addrspace(4)** %state.addr, align 4
  %jcong = getelementptr inbounds %struct.kiss99_state, %struct.kiss99_state addrspace(4)* %22, i32 0, i32 3
  %23 = load i32, i32 addrspace(4)* %jcong, align 4
  %mul18 = mul i32 69069, %23
  %add19 = add i32 %mul18, 1234567
  %24 = load %struct.kiss99_state addrspace(4)*, %struct.kiss99_state addrspace(4)** %state.addr, align 4
  %jcong20 = getelementptr inbounds %struct.kiss99_state, %struct.kiss99_state addrspace(4)* %24, i32 0, i32 3
  store i32 %add19, i32 addrspace(4)* %jcong20, align 4
  %25 = load %struct.kiss99_state addrspace(4)*, %struct.kiss99_state addrspace(4)** %state.addr, align 4
  %z21 = getelementptr inbounds %struct.kiss99_state, %struct.kiss99_state addrspace(4)* %25, i32 0, i32 0
  %26 = load i32, i32 addrspace(4)* %z21, align 4
  %shl22 = shl i32 %26, 16
  %27 = load %struct.kiss99_state addrspace(4)*, %struct.kiss99_state addrspace(4)** %state.addr, align 4
  %w23 = getelementptr inbounds %struct.kiss99_state, %struct.kiss99_state addrspace(4)* %27, i32 0, i32 1
  %28 = load i32, i32 addrspace(4)* %w23, align 4
  %add24 = add i32 %shl22, %28
  %29 = load %struct.kiss99_state addrspace(4)*, %struct.kiss99_state addrspace(4)** %state.addr, align 4
  %jcong25 = getelementptr inbounds %struct.kiss99_state, %struct.kiss99_state addrspace(4)* %29, i32 0, i32 3
  %30 = load i32, i32 addrspace(4)* %jcong25, align 4
  %xor26 = xor i32 %add24, %30
  %31 = load %struct.kiss99_state addrspace(4)*, %struct.kiss99_state addrspace(4)** %state.addr, align 4
  %jsr27 = getelementptr inbounds %struct.kiss99_state, %struct.kiss99_state addrspace(4)* %31, i32 0, i32 2
  %32 = load i32, i32 addrspace(4)* %jsr27, align 4
  %add28 = add i32 %xor26, %32
  ret i32 %add28
}

; Function Attrs: convergent mustprogress norecurse nounwind
define dso_local spir_func void @_Z11kiss99_seedPU3AS412kiss99_statem(%struct.kiss99_state addrspace(4)* %state, i64 %j) #0 {
entry:
  %state.addr = alloca %struct.kiss99_state addrspace(4)*, align 4
  %j.addr = alloca i64, align 8
  store %struct.kiss99_state addrspace(4)* %state, %struct.kiss99_state addrspace(4)** %state.addr, align 4
  store i64 %j, i64* %j.addr, align 8
  %0 = load i64, i64* %j.addr, align 8
  %conv = trunc i64 %0 to i32
  %xor = xor i32 362436069, %conv
  %1 = load %struct.kiss99_state addrspace(4)*, %struct.kiss99_state addrspace(4)** %state.addr, align 4
  %z = getelementptr inbounds %struct.kiss99_state, %struct.kiss99_state addrspace(4)* %1, i32 0, i32 0
  store i32 %xor, i32 addrspace(4)* %z, align 4
  %2 = load %struct.kiss99_state addrspace(4)*, %struct.kiss99_state addrspace(4)** %state.addr, align 4
  %z1 = getelementptr inbounds %struct.kiss99_state, %struct.kiss99_state addrspace(4)* %2, i32 0, i32 0
  %3 = load i32, i32 addrspace(4)* %z1, align 4
  %cmp = icmp eq i32 %3, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.kiss99_state addrspace(4)*, %struct.kiss99_state addrspace(4)** %state.addr, align 4
  %z2 = getelementptr inbounds %struct.kiss99_state, %struct.kiss99_state addrspace(4)* %4, i32 0, i32 0
  store i32 1, i32 addrspace(4)* %z2, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load i64, i64* %j.addr, align 8
  %shr = lshr i64 %5, 32
  %conv3 = trunc i64 %shr to i32
  %xor4 = xor i32 521288629, %conv3
  %6 = load %struct.kiss99_state addrspace(4)*, %struct.kiss99_state addrspace(4)** %state.addr, align 4
  %w = getelementptr inbounds %struct.kiss99_state, %struct.kiss99_state addrspace(4)* %6, i32 0, i32 1
  store i32 %xor4, i32 addrspace(4)* %w, align 4
  %7 = load %struct.kiss99_state addrspace(4)*, %struct.kiss99_state addrspace(4)** %state.addr, align 4
  %w5 = getelementptr inbounds %struct.kiss99_state, %struct.kiss99_state addrspace(4)* %7, i32 0, i32 1
  %8 = load i32, i32 addrspace(4)* %w5, align 4
  %cmp6 = icmp eq i32 %8, 0
  br i1 %cmp6, label %if.then7, label %if.end9

if.then7:                                         ; preds = %if.end
  %9 = load %struct.kiss99_state addrspace(4)*, %struct.kiss99_state addrspace(4)** %state.addr, align 4
  %w8 = getelementptr inbounds %struct.kiss99_state, %struct.kiss99_state addrspace(4)* %9, i32 0, i32 1
  store i32 1, i32 addrspace(4)* %w8, align 4
  br label %if.end9

if.end9:                                          ; preds = %if.then7, %if.end
  %10 = load i64, i64* %j.addr, align 8
  %conv10 = trunc i64 %10 to i32
  %xor11 = xor i32 123456789, %conv10
  %11 = load %struct.kiss99_state addrspace(4)*, %struct.kiss99_state addrspace(4)** %state.addr, align 4
  %jsr = getelementptr inbounds %struct.kiss99_state, %struct.kiss99_state addrspace(4)* %11, i32 0, i32 2
  store i32 %xor11, i32 addrspace(4)* %jsr, align 4
  %12 = load %struct.kiss99_state addrspace(4)*, %struct.kiss99_state addrspace(4)** %state.addr, align 4
  %jsr12 = getelementptr inbounds %struct.kiss99_state, %struct.kiss99_state addrspace(4)* %12, i32 0, i32 2
  %13 = load i32, i32 addrspace(4)* %jsr12, align 4
  %cmp13 = icmp eq i32 %13, 0
  br i1 %cmp13, label %if.then14, label %if.end16

if.then14:                                        ; preds = %if.end9
  %14 = load %struct.kiss99_state addrspace(4)*, %struct.kiss99_state addrspace(4)** %state.addr, align 4
  %jsr15 = getelementptr inbounds %struct.kiss99_state, %struct.kiss99_state addrspace(4)* %14, i32 0, i32 2
  store i32 1, i32 addrspace(4)* %jsr15, align 4
  br label %if.end16

if.end16:                                         ; preds = %if.then14, %if.end9
  %15 = load i64, i64* %j.addr, align 8
  %shr17 = lshr i64 %15, 32
  %conv18 = trunc i64 %shr17 to i32
  %xor19 = xor i32 380116160, %conv18
  %16 = load %struct.kiss99_state addrspace(4)*, %struct.kiss99_state addrspace(4)** %state.addr, align 4
  %jcong = getelementptr inbounds %struct.kiss99_state, %struct.kiss99_state addrspace(4)* %16, i32 0, i32 3
  store i32 %xor19, i32 addrspace(4)* %jcong, align 4
  ret void
}

; Function Attrs: convergent mustprogress norecurse nounwind
define dso_local spir_func i32 @_Z13_lcg6432_uintPU3AS4m(i64 addrspace(4)* %state) #0 {
entry:
  %state.addr = alloca i64 addrspace(4)*, align 4
  store i64 addrspace(4)* %state, i64 addrspace(4)** %state.addr, align 4
  %0 = load i64 addrspace(4)*, i64 addrspace(4)** %state.addr, align 4
  %1 = load i64, i64 addrspace(4)* %0, align 8
  %mul = mul i64 %1, 6364136223846793005
  %add = add i64 %mul, -2720673578348880933
  %2 = load i64 addrspace(4)*, i64 addrspace(4)** %state.addr, align 4
  store i64 %add, i64 addrspace(4)* %2, align 8
  %3 = load i64 addrspace(4)*, i64 addrspace(4)** %state.addr, align 4
  %4 = load i64, i64 addrspace(4)* %3, align 8
  %shr = lshr i64 %4, 32
  %conv = trunc i64 %shr to i32
  ret i32 %conv
}

; Function Attrs: convergent mustprogress norecurse nounwind
define dso_local spir_func void @_Z12lcg6432_seedPU3AS4mm(i64 addrspace(4)* %state, i64 %j) #0 {
entry:
  %state.addr = alloca i64 addrspace(4)*, align 4
  %j.addr = alloca i64, align 8
  store i64 addrspace(4)* %state, i64 addrspace(4)** %state.addr, align 4
  store i64 %j, i64* %j.addr, align 8
  %0 = load i64, i64* %j.addr, align 8
  %1 = load i64 addrspace(4)*, i64 addrspace(4)** %state.addr, align 4
  store i64 %0, i64 addrspace(4)* %1, align 8
  ret void
}

; Function Attrs: convergent mustprogress norecurse nounwind
define dso_local spir_func i64 @_Z19_lfib_ternary_ulongPU3AS410lfib_state(%struct.lfib_state addrspace(4)* %state) #0 {
entry:
  %state.addr = alloca %struct.lfib_state addrspace(4)*, align 4
  store %struct.lfib_state addrspace(4)* %state, %struct.lfib_state addrspace(4)** %state.addr, align 4
  %0 = load %struct.lfib_state addrspace(4)*, %struct.lfib_state addrspace(4)** %state.addr, align 4
  %p1 = getelementptr inbounds %struct.lfib_state, %struct.lfib_state addrspace(4)* %0, i32 0, i32 1
  %1 = load i8, i8 addrspace(4)* %p1, align 8
  %dec = add i8 %1, -1
  store i8 %dec, i8 addrspace(4)* %p1, align 8
  %conv = sext i8 %dec to i32
  %cmp = icmp sge i32 %conv, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load %struct.lfib_state addrspace(4)*, %struct.lfib_state addrspace(4)** %state.addr, align 4
  %p11 = getelementptr inbounds %struct.lfib_state, %struct.lfib_state addrspace(4)* %2, i32 0, i32 1
  %3 = load i8, i8 addrspace(4)* %p11, align 8
  %conv2 = sext i8 %3 to i32
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ 16, %cond.false ]
  %conv3 = trunc i32 %cond to i8
  %4 = load %struct.lfib_state addrspace(4)*, %struct.lfib_state addrspace(4)** %state.addr, align 4
  %p14 = getelementptr inbounds %struct.lfib_state, %struct.lfib_state addrspace(4)* %4, i32 0, i32 1
  store i8 %conv3, i8 addrspace(4)* %p14, align 8
  %5 = load %struct.lfib_state addrspace(4)*, %struct.lfib_state addrspace(4)** %state.addr, align 4
  %p2 = getelementptr inbounds %struct.lfib_state, %struct.lfib_state addrspace(4)* %5, i32 0, i32 2
  %6 = load i8, i8 addrspace(4)* %p2, align 1
  %dec5 = add i8 %6, -1
  store i8 %dec5, i8 addrspace(4)* %p2, align 1
  %conv6 = sext i8 %dec5 to i32
  %cmp7 = icmp sge i32 %conv6, 0
  br i1 %cmp7, label %cond.true8, label %cond.false11

cond.true8:                                       ; preds = %cond.end
  %7 = load %struct.lfib_state addrspace(4)*, %struct.lfib_state addrspace(4)** %state.addr, align 4
  %p29 = getelementptr inbounds %struct.lfib_state, %struct.lfib_state addrspace(4)* %7, i32 0, i32 2
  %8 = load i8, i8 addrspace(4)* %p29, align 1
  %conv10 = sext i8 %8 to i32
  br label %cond.end12

cond.false11:                                     ; preds = %cond.end
  br label %cond.end12

cond.end12:                                       ; preds = %cond.false11, %cond.true8
  %cond13 = phi i32 [ %conv10, %cond.true8 ], [ 16, %cond.false11 ]
  %conv14 = trunc i32 %cond13 to i8
  %9 = load %struct.lfib_state addrspace(4)*, %struct.lfib_state addrspace(4)** %state.addr, align 4
  %p215 = getelementptr inbounds %struct.lfib_state, %struct.lfib_state addrspace(4)* %9, i32 0, i32 2
  store i8 %conv14, i8 addrspace(4)* %p215, align 1
  %10 = load %struct.lfib_state addrspace(4)*, %struct.lfib_state addrspace(4)** %state.addr, align 4
  %s = getelementptr inbounds %struct.lfib_state, %struct.lfib_state addrspace(4)* %10, i32 0, i32 0
  %11 = load %struct.lfib_state addrspace(4)*, %struct.lfib_state addrspace(4)** %state.addr, align 4
  %p216 = getelementptr inbounds %struct.lfib_state, %struct.lfib_state addrspace(4)* %11, i32 0, i32 2
  %12 = load i8, i8 addrspace(4)* %p216, align 1
  %idxprom = sext i8 %12 to i32
  %arrayidx = getelementptr inbounds [17 x i64], [17 x i64] addrspace(4)* %s, i32 0, i32 %idxprom
  %13 = load i64, i64 addrspace(4)* %arrayidx, align 8
  %14 = load %struct.lfib_state addrspace(4)*, %struct.lfib_state addrspace(4)** %state.addr, align 4
  %s17 = getelementptr inbounds %struct.lfib_state, %struct.lfib_state addrspace(4)* %14, i32 0, i32 0
  %15 = load %struct.lfib_state addrspace(4)*, %struct.lfib_state addrspace(4)** %state.addr, align 4
  %p118 = getelementptr inbounds %struct.lfib_state, %struct.lfib_state addrspace(4)* %15, i32 0, i32 1
  %16 = load i8, i8 addrspace(4)* %p118, align 8
  %idxprom19 = sext i8 %16 to i32
  %arrayidx20 = getelementptr inbounds [17 x i64], [17 x i64] addrspace(4)* %s17, i32 0, i32 %idxprom19
  %17 = load i64, i64 addrspace(4)* %arrayidx20, align 8
  %mul = mul i64 %17, %13
  store i64 %mul, i64 addrspace(4)* %arrayidx20, align 8
  %18 = load %struct.lfib_state addrspace(4)*, %struct.lfib_state addrspace(4)** %state.addr, align 4
  %s21 = getelementptr inbounds %struct.lfib_state, %struct.lfib_state addrspace(4)* %18, i32 0, i32 0
  %19 = load %struct.lfib_state addrspace(4)*, %struct.lfib_state addrspace(4)** %state.addr, align 4
  %p122 = getelementptr inbounds %struct.lfib_state, %struct.lfib_state addrspace(4)* %19, i32 0, i32 1
  %20 = load i8, i8 addrspace(4)* %p122, align 8
  %idxprom23 = sext i8 %20 to i32
  %arrayidx24 = getelementptr inbounds [17 x i64], [17 x i64] addrspace(4)* %s21, i32 0, i32 %idxprom23
  %21 = load i64, i64 addrspace(4)* %arrayidx24, align 8
  ret i64 %21
}

; Function Attrs: convergent mustprogress norecurse nounwind
define dso_local spir_func i64 @_Z11_lfib_ulongPU3AS410lfib_state(%struct.lfib_state addrspace(4)* %state) #0 {
entry:
  %state.addr = alloca %struct.lfib_state addrspace(4)*, align 4
  store %struct.lfib_state addrspace(4)* %state, %struct.lfib_state addrspace(4)** %state.addr, align 4
  %0 = load %struct.lfib_state addrspace(4)*, %struct.lfib_state addrspace(4)** %state.addr, align 4
  %p1 = getelementptr inbounds %struct.lfib_state, %struct.lfib_state addrspace(4)* %0, i32 0, i32 1
  %1 = load i8, i8 addrspace(4)* %p1, align 8
  %dec = add i8 %1, -1
  store i8 %dec, i8 addrspace(4)* %p1, align 8
  %2 = load %struct.lfib_state addrspace(4)*, %struct.lfib_state addrspace(4)** %state.addr, align 4
  %p11 = getelementptr inbounds %struct.lfib_state, %struct.lfib_state addrspace(4)* %2, i32 0, i32 1
  %3 = load i8, i8 addrspace(4)* %p11, align 8
  %conv = sext i8 %3 to i32
  %cmp = icmp slt i32 %conv, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.lfib_state addrspace(4)*, %struct.lfib_state addrspace(4)** %state.addr, align 4
  %p12 = getelementptr inbounds %struct.lfib_state, %struct.lfib_state addrspace(4)* %4, i32 0, i32 1
  store i8 16, i8 addrspace(4)* %p12, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.lfib_state addrspace(4)*, %struct.lfib_state addrspace(4)** %state.addr, align 4
  %p2 = getelementptr inbounds %struct.lfib_state, %struct.lfib_state addrspace(4)* %5, i32 0, i32 2
  %6 = load i8, i8 addrspace(4)* %p2, align 1
  %dec3 = add i8 %6, -1
  store i8 %dec3, i8 addrspace(4)* %p2, align 1
  %7 = load %struct.lfib_state addrspace(4)*, %struct.lfib_state addrspace(4)** %state.addr, align 4
  %p24 = getelementptr inbounds %struct.lfib_state, %struct.lfib_state addrspace(4)* %7, i32 0, i32 2
  %8 = load i8, i8 addrspace(4)* %p24, align 1
  %conv5 = sext i8 %8 to i32
  %cmp6 = icmp slt i32 %conv5, 0
  br i1 %cmp6, label %if.then7, label %if.end9

if.then7:                                         ; preds = %if.end
  %9 = load %struct.lfib_state addrspace(4)*, %struct.lfib_state addrspace(4)** %state.addr, align 4
  %p28 = getelementptr inbounds %struct.lfib_state, %struct.lfib_state addrspace(4)* %9, i32 0, i32 2
  store i8 16, i8 addrspace(4)* %p28, align 1
  br label %if.end9

if.end9:                                          ; preds = %if.then7, %if.end
  %10 = load %struct.lfib_state addrspace(4)*, %struct.lfib_state addrspace(4)** %state.addr, align 4
  %s = getelementptr inbounds %struct.lfib_state, %struct.lfib_state addrspace(4)* %10, i32 0, i32 0
  %11 = load %struct.lfib_state addrspace(4)*, %struct.lfib_state addrspace(4)** %state.addr, align 4
  %p210 = getelementptr inbounds %struct.lfib_state, %struct.lfib_state addrspace(4)* %11, i32 0, i32 2
  %12 = load i8, i8 addrspace(4)* %p210, align 1
  %idxprom = sext i8 %12 to i32
  %arrayidx = getelementptr inbounds [17 x i64], [17 x i64] addrspace(4)* %s, i32 0, i32 %idxprom
  %13 = load i64, i64 addrspace(4)* %arrayidx, align 8
  %14 = load %struct.lfib_state addrspace(4)*, %struct.lfib_state addrspace(4)** %state.addr, align 4
  %s11 = getelementptr inbounds %struct.lfib_state, %struct.lfib_state addrspace(4)* %14, i32 0, i32 0
  %15 = load %struct.lfib_state addrspace(4)*, %struct.lfib_state addrspace(4)** %state.addr, align 4
  %p112 = getelementptr inbounds %struct.lfib_state, %struct.lfib_state addrspace(4)* %15, i32 0, i32 1
  %16 = load i8, i8 addrspace(4)* %p112, align 8
  %idxprom13 = sext i8 %16 to i32
  %arrayidx14 = getelementptr inbounds [17 x i64], [17 x i64] addrspace(4)* %s11, i32 0, i32 %idxprom13
  %17 = load i64, i64 addrspace(4)* %arrayidx14, align 8
  %mul = mul i64 %17, %13
  store i64 %mul, i64 addrspace(4)* %arrayidx14, align 8
  %18 = load %struct.lfib_state addrspace(4)*, %struct.lfib_state addrspace(4)** %state.addr, align 4
  %s15 = getelementptr inbounds %struct.lfib_state, %struct.lfib_state addrspace(4)* %18, i32 0, i32 0
  %19 = load %struct.lfib_state addrspace(4)*, %struct.lfib_state addrspace(4)** %state.addr, align 4
  %p116 = getelementptr inbounds %struct.lfib_state, %struct.lfib_state addrspace(4)* %19, i32 0, i32 1
  %20 = load i8, i8 addrspace(4)* %p116, align 8
  %idxprom17 = sext i8 %20 to i32
  %arrayidx18 = getelementptr inbounds [17 x i64], [17 x i64] addrspace(4)* %s15, i32 0, i32 %idxprom17
  %21 = load i64, i64 addrspace(4)* %arrayidx18, align 8
  ret i64 %21
}

; Function Attrs: convergent mustprogress norecurse nounwind
define dso_local spir_func i64 @_Z15_lfib_inc_ulongPU3AS410lfib_state(%struct.lfib_state addrspace(4)* %state) #0 {
entry:
  %state.addr = alloca %struct.lfib_state addrspace(4)*, align 4
  store %struct.lfib_state addrspace(4)* %state, %struct.lfib_state addrspace(4)** %state.addr, align 4
  %0 = load %struct.lfib_state addrspace(4)*, %struct.lfib_state addrspace(4)** %state.addr, align 4
  %p1 = getelementptr inbounds %struct.lfib_state, %struct.lfib_state addrspace(4)* %0, i32 0, i32 1
  %1 = load i8, i8 addrspace(4)* %p1, align 8
  %inc = add i8 %1, 1
  store i8 %inc, i8 addrspace(4)* %p1, align 8
  %2 = load %struct.lfib_state addrspace(4)*, %struct.lfib_state addrspace(4)** %state.addr, align 4
  %p11 = getelementptr inbounds %struct.lfib_state, %struct.lfib_state addrspace(4)* %2, i32 0, i32 1
  %3 = load i8, i8 addrspace(4)* %p11, align 8
  %conv = sext i8 %3 to i32
  %rem = srem i32 %conv, 17
  %conv2 = trunc i32 %rem to i8
  store i8 %conv2, i8 addrspace(4)* %p11, align 8
  %4 = load %struct.lfib_state addrspace(4)*, %struct.lfib_state addrspace(4)** %state.addr, align 4
  %p2 = getelementptr inbounds %struct.lfib_state, %struct.lfib_state addrspace(4)* %4, i32 0, i32 2
  %5 = load i8, i8 addrspace(4)* %p2, align 1
  %inc3 = add i8 %5, 1
  store i8 %inc3, i8 addrspace(4)* %p2, align 1
  %6 = load %struct.lfib_state addrspace(4)*, %struct.lfib_state addrspace(4)** %state.addr, align 4
  %p24 = getelementptr inbounds %struct.lfib_state, %struct.lfib_state addrspace(4)* %6, i32 0, i32 2
  %7 = load i8, i8 addrspace(4)* %p24, align 1
  %conv5 = sext i8 %7 to i32
  %rem6 = srem i32 %conv5, 5
  %conv7 = trunc i32 %rem6 to i8
  store i8 %conv7, i8 addrspace(4)* %p24, align 1
  %8 = load %struct.lfib_state addrspace(4)*, %struct.lfib_state addrspace(4)** %state.addr, align 4
  %s = getelementptr inbounds %struct.lfib_state, %struct.lfib_state addrspace(4)* %8, i32 0, i32 0
  %9 = load %struct.lfib_state addrspace(4)*, %struct.lfib_state addrspace(4)** %state.addr, align 4
  %p28 = getelementptr inbounds %struct.lfib_state, %struct.lfib_state addrspace(4)* %9, i32 0, i32 2
  %10 = load i8, i8 addrspace(4)* %p28, align 1
  %idxprom = sext i8 %10 to i32
  %arrayidx = getelementptr inbounds [17 x i64], [17 x i64] addrspace(4)* %s, i32 0, i32 %idxprom
  %11 = load i64, i64 addrspace(4)* %arrayidx, align 8
  %12 = load %struct.lfib_state addrspace(4)*, %struct.lfib_state addrspace(4)** %state.addr, align 4
  %s9 = getelementptr inbounds %struct.lfib_state, %struct.lfib_state addrspace(4)* %12, i32 0, i32 0
  %13 = load %struct.lfib_state addrspace(4)*, %struct.lfib_state addrspace(4)** %state.addr, align 4
  %p110 = getelementptr inbounds %struct.lfib_state, %struct.lfib_state addrspace(4)* %13, i32 0, i32 1
  %14 = load i8, i8 addrspace(4)* %p110, align 8
  %idxprom11 = sext i8 %14 to i32
  %arrayidx12 = getelementptr inbounds [17 x i64], [17 x i64] addrspace(4)* %s9, i32 0, i32 %idxprom11
  %15 = load i64, i64 addrspace(4)* %arrayidx12, align 8
  %mul = mul i64 %15, %11
  store i64 %mul, i64 addrspace(4)* %arrayidx12, align 8
  %16 = load %struct.lfib_state addrspace(4)*, %struct.lfib_state addrspace(4)** %state.addr, align 4
  %s13 = getelementptr inbounds %struct.lfib_state, %struct.lfib_state addrspace(4)* %16, i32 0, i32 0
  %17 = load %struct.lfib_state addrspace(4)*, %struct.lfib_state addrspace(4)** %state.addr, align 4
  %p114 = getelementptr inbounds %struct.lfib_state, %struct.lfib_state addrspace(4)* %17, i32 0, i32 1
  %18 = load i8, i8 addrspace(4)* %p114, align 8
  %idxprom15 = sext i8 %18 to i32
  %arrayidx16 = getelementptr inbounds [17 x i64], [17 x i64] addrspace(4)* %s13, i32 0, i32 %idxprom15
  %19 = load i64, i64 addrspace(4)* %arrayidx16, align 8
  ret i64 %19
}

; Function Attrs: convergent mustprogress norecurse nounwind
define dso_local spir_func void @_Z9lfib_seedPU3AS410lfib_statem(%struct.lfib_state addrspace(4)* %state, i64 %j) #0 {
entry:
  %state.addr = alloca %struct.lfib_state addrspace(4)*, align 4
  %j.addr = alloca i64, align 8
  %i = alloca i32, align 4
  store %struct.lfib_state addrspace(4)* %state, %struct.lfib_state addrspace(4)** %state.addr, align 4
  store i64 %j, i64* %j.addr, align 8
  %0 = load %struct.lfib_state addrspace(4)*, %struct.lfib_state addrspace(4)** %state.addr, align 4
  %p1 = getelementptr inbounds %struct.lfib_state, %struct.lfib_state addrspace(4)* %0, i32 0, i32 1
  store i8 17, i8 addrspace(4)* %p1, align 8
  %1 = load %struct.lfib_state addrspace(4)*, %struct.lfib_state addrspace(4)** %state.addr, align 4
  %p2 = getelementptr inbounds %struct.lfib_state, %struct.lfib_state addrspace(4)* %1, i32 0, i32 2
  store i8 5, i8 addrspace(4)* %p2, align 1
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 17
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i64, i64* %j.addr, align 8
  %mul = mul i64 6906969069, %3
  %add = add i64 %mul, 1234567
  store i64 %add, i64* %j.addr, align 8
  %4 = load i64, i64* %j.addr, align 8
  %or = or i64 %4, 1
  %5 = load %struct.lfib_state addrspace(4)*, %struct.lfib_state addrspace(4)** %state.addr, align 4
  %s = getelementptr inbounds %struct.lfib_state, %struct.lfib_state addrspace(4)* %5, i32 0, i32 0
  %6 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds [17 x i64], [17 x i64] addrspace(4)* %s, i32 0, i32 %6
  store i64 %or, i64 addrspace(4)* %arrayidx, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond, !llvm.loop !7

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: convergent mustprogress norecurse nounwind
define dso_local spir_func i32 @_Z14_mrg31k3p_uintPU3AS414mrg31k3p_state(%struct.mrg31k3p_state addrspace(4)* %state) #0 {
entry:
  %retval = alloca i32, align 4
  %state.addr = alloca %struct.mrg31k3p_state addrspace(4)*, align 4
  %y1 = alloca i32, align 4
  %y2 = alloca i32, align 4
  store %struct.mrg31k3p_state addrspace(4)* %state, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %0 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x11 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %0, i32 0, i32 1
  %1 = load i32, i32 addrspace(4)* %x11, align 4
  %and = and i32 %1, 511
  %shl = shl i32 %and, 22
  %2 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x111 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %2, i32 0, i32 1
  %3 = load i32, i32 addrspace(4)* %x111, align 4
  %shr = lshr i32 %3, 9
  %add = add i32 %shl, %shr
  %4 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x12 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %4, i32 0, i32 2
  %5 = load i32, i32 addrspace(4)* %x12, align 4
  %and2 = and i32 %5, 16777215
  %shl3 = shl i32 %and2, 7
  %6 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x124 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %6, i32 0, i32 2
  %7 = load i32, i32 addrspace(4)* %x124, align 4
  %shr5 = lshr i32 %7, 24
  %add6 = add i32 %shl3, %shr5
  %add7 = add i32 %add, %add6
  store i32 %add7, i32* %y1, align 4
  %8 = load i32, i32* %y1, align 4
  %cmp = icmp ugt i32 %8, 2147483647
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %9 = load i32, i32* %y1, align 4
  %sub = sub i32 %9, 2147483647
  store i32 %sub, i32* %y1, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %10 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x128 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %10, i32 0, i32 2
  %11 = load i32, i32 addrspace(4)* %x128, align 4
  %12 = load i32, i32* %y1, align 4
  %add9 = add i32 %12, %11
  store i32 %add9, i32* %y1, align 4
  %13 = load i32, i32* %y1, align 4
  %cmp10 = icmp ugt i32 %13, 2147483647
  br i1 %cmp10, label %if.then11, label %if.end13

if.then11:                                        ; preds = %if.end
  %14 = load i32, i32* %y1, align 4
  %sub12 = sub i32 %14, 2147483647
  store i32 %sub12, i32* %y1, align 4
  br label %if.end13

if.end13:                                         ; preds = %if.then11, %if.end
  %15 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x1114 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %15, i32 0, i32 1
  %16 = load i32, i32 addrspace(4)* %x1114, align 4
  %17 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x1215 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %17, i32 0, i32 2
  store i32 %16, i32 addrspace(4)* %x1215, align 4
  %18 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x10 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %18, i32 0, i32 0
  %19 = load i32, i32 addrspace(4)* %x10, align 4
  %20 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x1116 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %20, i32 0, i32 1
  store i32 %19, i32 addrspace(4)* %x1116, align 4
  %21 = load i32, i32* %y1, align 4
  %22 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x1017 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %22, i32 0, i32 0
  store i32 %21, i32 addrspace(4)* %x1017, align 4
  %23 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x20 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %23, i32 0, i32 3
  %24 = load i32, i32 addrspace(4)* %x20, align 4
  %and18 = and i32 %24, 65535
  %shl19 = shl i32 %and18, 15
  %25 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x2020 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %25, i32 0, i32 3
  %26 = load i32, i32 addrspace(4)* %x2020, align 4
  %shr21 = lshr i32 %26, 16
  %mul = mul i32 21069, %shr21
  %add22 = add i32 %shl19, %mul
  store i32 %add22, i32* %y1, align 4
  %27 = load i32, i32* %y1, align 4
  %cmp23 = icmp ugt i32 %27, 2147462579
  br i1 %cmp23, label %if.then24, label %if.end26

if.then24:                                        ; preds = %if.end13
  %28 = load i32, i32* %y1, align 4
  %sub25 = sub i32 %28, 2147462579
  store i32 %sub25, i32* %y1, align 4
  br label %if.end26

if.end26:                                         ; preds = %if.then24, %if.end13
  %29 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x22 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %29, i32 0, i32 5
  %30 = load i32, i32 addrspace(4)* %x22, align 4
  %and27 = and i32 %30, 65535
  %shl28 = shl i32 %and27, 15
  %31 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x2229 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %31, i32 0, i32 5
  %32 = load i32, i32 addrspace(4)* %x2229, align 4
  %shr30 = lshr i32 %32, 16
  %mul31 = mul i32 21069, %shr30
  %add32 = add i32 %shl28, %mul31
  store i32 %add32, i32* %y2, align 4
  %33 = load i32, i32* %y2, align 4
  %cmp33 = icmp ugt i32 %33, 2147462579
  br i1 %cmp33, label %if.then34, label %if.end36

if.then34:                                        ; preds = %if.end26
  %34 = load i32, i32* %y2, align 4
  %sub35 = sub i32 %34, 2147462579
  store i32 %sub35, i32* %y2, align 4
  br label %if.end36

if.end36:                                         ; preds = %if.then34, %if.end26
  %35 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x2237 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %35, i32 0, i32 5
  %36 = load i32, i32 addrspace(4)* %x2237, align 4
  %37 = load i32, i32* %y2, align 4
  %add38 = add i32 %37, %36
  store i32 %add38, i32* %y2, align 4
  %38 = load i32, i32* %y2, align 4
  %cmp39 = icmp ugt i32 %38, 2147462579
  br i1 %cmp39, label %if.then40, label %if.end42

if.then40:                                        ; preds = %if.end36
  %39 = load i32, i32* %y2, align 4
  %sub41 = sub i32 %39, 2147462579
  store i32 %sub41, i32* %y2, align 4
  br label %if.end42

if.end42:                                         ; preds = %if.then40, %if.end36
  %40 = load i32, i32* %y1, align 4
  %41 = load i32, i32* %y2, align 4
  %add43 = add i32 %41, %40
  store i32 %add43, i32* %y2, align 4
  %42 = load i32, i32* %y2, align 4
  %cmp44 = icmp ugt i32 %42, 2147462579
  br i1 %cmp44, label %if.then45, label %if.end47

if.then45:                                        ; preds = %if.end42
  %43 = load i32, i32* %y2, align 4
  %sub46 = sub i32 %43, 2147462579
  store i32 %sub46, i32* %y2, align 4
  br label %if.end47

if.end47:                                         ; preds = %if.then45, %if.end42
  %44 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x21 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %44, i32 0, i32 4
  %45 = load i32, i32 addrspace(4)* %x21, align 4
  %46 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x2248 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %46, i32 0, i32 5
  store i32 %45, i32 addrspace(4)* %x2248, align 4
  %47 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x2049 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %47, i32 0, i32 3
  %48 = load i32, i32 addrspace(4)* %x2049, align 4
  %49 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x2150 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %49, i32 0, i32 4
  store i32 %48, i32 addrspace(4)* %x2150, align 4
  %50 = load i32, i32* %y2, align 4
  %51 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x2051 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %51, i32 0, i32 3
  store i32 %50, i32 addrspace(4)* %x2051, align 4
  %52 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x1052 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %52, i32 0, i32 0
  %53 = load i32, i32 addrspace(4)* %x1052, align 4
  %54 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x2053 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %54, i32 0, i32 3
  %55 = load i32, i32 addrspace(4)* %x2053, align 4
  %cmp54 = icmp ule i32 %53, %55
  br i1 %cmp54, label %if.then55, label %if.else

if.then55:                                        ; preds = %if.end47
  %56 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x1056 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %56, i32 0, i32 0
  %57 = load i32, i32 addrspace(4)* %x1056, align 4
  %58 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x2057 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %58, i32 0, i32 3
  %59 = load i32, i32 addrspace(4)* %x2057, align 4
  %sub58 = sub i32 %57, %59
  %add59 = add i32 %sub58, 2147483647
  store i32 %add59, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %if.end47
  %60 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x1060 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %60, i32 0, i32 0
  %61 = load i32, i32 addrspace(4)* %x1060, align 4
  %62 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x2061 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %62, i32 0, i32 3
  %63 = load i32, i32 addrspace(4)* %x2061, align 4
  %sub62 = sub i32 %61, %63
  store i32 %sub62, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else, %if.then55
  %64 = load i32, i32* %retval, align 4
  ret i32 %64
}

; Function Attrs: convergent mustprogress norecurse nounwind
define dso_local spir_func void @_Z13mrg31k3p_seedPU3AS414mrg31k3p_statem(%struct.mrg31k3p_state addrspace(4)* %state, i64 %j) #0 {
entry:
  %state.addr = alloca %struct.mrg31k3p_state addrspace(4)*, align 4
  %j.addr = alloca i64, align 8
  store %struct.mrg31k3p_state addrspace(4)* %state, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  store i64 %j, i64* %j.addr, align 8
  %0 = load i64, i64* %j.addr, align 8
  %conv = trunc i64 %0 to i32
  %1 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x10 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %1, i32 0, i32 0
  store i32 %conv, i32 addrspace(4)* %x10, align 4
  %2 = load i64, i64* %j.addr, align 8
  %conv1 = trunc i64 %2 to i32
  %shr = lshr i32 %conv1, 5
  %3 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x11 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %3, i32 0, i32 1
  store i32 %shr, i32 addrspace(4)* %x11, align 4
  %4 = load i64, i64* %j.addr, align 8
  %conv2 = trunc i64 %4 to i32
  %shr3 = lshr i32 %conv2, 11
  %5 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x12 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %5, i32 0, i32 2
  store i32 %shr3, i32 addrspace(4)* %x12, align 4
  %6 = load i64, i64* %j.addr, align 8
  %conv4 = trunc i64 %6 to i32
  %shr5 = lshr i32 %conv4, 22
  %7 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x20 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %7, i32 0, i32 3
  store i32 %shr5, i32 addrspace(4)* %x20, align 4
  %8 = load i64, i64* %j.addr, align 8
  %conv6 = trunc i64 %8 to i32
  %shr7 = lshr i32 %conv6, 30
  %9 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x21 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %9, i32 0, i32 4
  store i32 %shr7, i32 addrspace(4)* %x21, align 4
  %10 = load i64, i64* %j.addr, align 8
  %conv8 = trunc i64 %10 to i32
  %shr9 = lshr i32 %conv8, 1
  %11 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x22 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %11, i32 0, i32 5
  store i32 %shr9, i32 addrspace(4)* %x22, align 4
  %12 = load i64, i64* %j.addr, align 8
  %cmp = icmp eq i64 %12, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %13 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x1010 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %13, i32 0, i32 0
  %14 = load i32, i32 addrspace(4)* %x1010, align 4
  %inc = add i32 %14, 1
  store i32 %inc, i32 addrspace(4)* %x1010, align 4
  %15 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x2111 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %15, i32 0, i32 4
  %16 = load i32, i32 addrspace(4)* %x2111, align 4
  %inc12 = add i32 %16, 1
  store i32 %inc12, i32 addrspace(4)* %x2111, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %17 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x1013 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %17, i32 0, i32 0
  %18 = load i32, i32 addrspace(4)* %x1013, align 4
  %cmp14 = icmp ugt i32 %18, 2147483647
  br i1 %cmp14, label %if.then15, label %if.end17

if.then15:                                        ; preds = %if.end
  %19 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x1016 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %19, i32 0, i32 0
  %20 = load i32, i32 addrspace(4)* %x1016, align 4
  %sub = sub i32 %20, 2147483647
  store i32 %sub, i32 addrspace(4)* %x1016, align 4
  br label %if.end17

if.end17:                                         ; preds = %if.then15, %if.end
  %21 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x1118 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %21, i32 0, i32 1
  %22 = load i32, i32 addrspace(4)* %x1118, align 4
  %cmp19 = icmp ugt i32 %22, 2147483647
  br i1 %cmp19, label %if.then20, label %if.end23

if.then20:                                        ; preds = %if.end17
  %23 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x1121 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %23, i32 0, i32 1
  %24 = load i32, i32 addrspace(4)* %x1121, align 4
  %sub22 = sub i32 %24, 2147483647
  store i32 %sub22, i32 addrspace(4)* %x1121, align 4
  br label %if.end23

if.end23:                                         ; preds = %if.then20, %if.end17
  %25 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x1224 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %25, i32 0, i32 2
  %26 = load i32, i32 addrspace(4)* %x1224, align 4
  %cmp25 = icmp ugt i32 %26, 2147483647
  br i1 %cmp25, label %if.then26, label %if.end29

if.then26:                                        ; preds = %if.end23
  %27 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x1227 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %27, i32 0, i32 2
  %28 = load i32, i32 addrspace(4)* %x1227, align 4
  %sub28 = sub i32 %28, 2147483647
  store i32 %sub28, i32 addrspace(4)* %x1227, align 4
  br label %if.end29

if.end29:                                         ; preds = %if.then26, %if.end23
  %29 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x2030 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %29, i32 0, i32 3
  %30 = load i32, i32 addrspace(4)* %x2030, align 4
  %cmp31 = icmp ugt i32 %30, 2147462579
  br i1 %cmp31, label %if.then32, label %if.end35

if.then32:                                        ; preds = %if.end29
  %31 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x2033 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %31, i32 0, i32 3
  %32 = load i32, i32 addrspace(4)* %x2033, align 4
  %sub34 = sub i32 %32, 2147462579
  store i32 %sub34, i32 addrspace(4)* %x2033, align 4
  br label %if.end35

if.end35:                                         ; preds = %if.then32, %if.end29
  %33 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x2136 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %33, i32 0, i32 4
  %34 = load i32, i32 addrspace(4)* %x2136, align 4
  %cmp37 = icmp ugt i32 %34, 2147462579
  br i1 %cmp37, label %if.then38, label %if.end41

if.then38:                                        ; preds = %if.end35
  %35 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x2139 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %35, i32 0, i32 4
  %36 = load i32, i32 addrspace(4)* %x2139, align 4
  %sub40 = sub i32 %36, 2147462579
  store i32 %sub40, i32 addrspace(4)* %x2139, align 4
  br label %if.end41

if.end41:                                         ; preds = %if.then38, %if.end35
  %37 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x2242 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %37, i32 0, i32 5
  %38 = load i32, i32 addrspace(4)* %x2242, align 4
  %cmp43 = icmp ugt i32 %38, 2147462579
  br i1 %cmp43, label %if.then44, label %if.end47

if.then44:                                        ; preds = %if.end41
  %39 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x2245 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %39, i32 0, i32 5
  %40 = load i32, i32 addrspace(4)* %x2245, align 4
  %sub46 = sub i32 %40, 2147462579
  store i32 %sub46, i32 addrspace(4)* %x2245, align 4
  br label %if.end47

if.end47:                                         ; preds = %if.then44, %if.end41
  %41 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x1048 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %41, i32 0, i32 0
  %42 = load i32, i32 addrspace(4)* %x1048, align 4
  %cmp49 = icmp ugt i32 %42, 2147483647
  br i1 %cmp49, label %if.then50, label %if.end53

if.then50:                                        ; preds = %if.end47
  %43 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x1051 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %43, i32 0, i32 0
  %44 = load i32, i32 addrspace(4)* %x1051, align 4
  %sub52 = sub i32 %44, 2147483647
  store i32 %sub52, i32 addrspace(4)* %x1051, align 4
  br label %if.end53

if.end53:                                         ; preds = %if.then50, %if.end47
  %45 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x1154 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %45, i32 0, i32 1
  %46 = load i32, i32 addrspace(4)* %x1154, align 4
  %cmp55 = icmp ugt i32 %46, 2147483647
  br i1 %cmp55, label %if.then56, label %if.end59

if.then56:                                        ; preds = %if.end53
  %47 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x1157 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %47, i32 0, i32 1
  %48 = load i32, i32 addrspace(4)* %x1157, align 4
  %sub58 = sub i32 %48, 2147483647
  store i32 %sub58, i32 addrspace(4)* %x1157, align 4
  br label %if.end59

if.end59:                                         ; preds = %if.then56, %if.end53
  %49 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x1260 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %49, i32 0, i32 2
  %50 = load i32, i32 addrspace(4)* %x1260, align 4
  %cmp61 = icmp ugt i32 %50, 2147483647
  br i1 %cmp61, label %if.then62, label %if.end65

if.then62:                                        ; preds = %if.end59
  %51 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x1263 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %51, i32 0, i32 2
  %52 = load i32, i32 addrspace(4)* %x1263, align 4
  %sub64 = sub i32 %52, 2147483647
  store i32 %sub64, i32 addrspace(4)* %x1263, align 4
  br label %if.end65

if.end65:                                         ; preds = %if.then62, %if.end59
  %53 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x2066 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %53, i32 0, i32 3
  %54 = load i32, i32 addrspace(4)* %x2066, align 4
  %cmp67 = icmp ugt i32 %54, 2147462579
  br i1 %cmp67, label %if.then68, label %if.end71

if.then68:                                        ; preds = %if.end65
  %55 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x2069 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %55, i32 0, i32 3
  %56 = load i32, i32 addrspace(4)* %x2069, align 4
  %sub70 = sub i32 %56, 2147462579
  store i32 %sub70, i32 addrspace(4)* %x2069, align 4
  br label %if.end71

if.end71:                                         ; preds = %if.then68, %if.end65
  %57 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x2172 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %57, i32 0, i32 4
  %58 = load i32, i32 addrspace(4)* %x2172, align 4
  %cmp73 = icmp ugt i32 %58, 2147462579
  br i1 %cmp73, label %if.then74, label %if.end77

if.then74:                                        ; preds = %if.end71
  %59 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x2175 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %59, i32 0, i32 4
  %60 = load i32, i32 addrspace(4)* %x2175, align 4
  %sub76 = sub i32 %60, 2147462579
  store i32 %sub76, i32 addrspace(4)* %x2175, align 4
  br label %if.end77

if.end77:                                         ; preds = %if.then74, %if.end71
  %61 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x2278 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %61, i32 0, i32 5
  %62 = load i32, i32 addrspace(4)* %x2278, align 4
  %cmp79 = icmp ugt i32 %62, 2147462579
  br i1 %cmp79, label %if.then80, label %if.end83

if.then80:                                        ; preds = %if.end77
  %63 = load %struct.mrg31k3p_state addrspace(4)*, %struct.mrg31k3p_state addrspace(4)** %state.addr, align 4
  %x2281 = getelementptr inbounds %struct.mrg31k3p_state, %struct.mrg31k3p_state addrspace(4)* %63, i32 0, i32 5
  %64 = load i32, i32 addrspace(4)* %x2281, align 4
  %sub82 = sub i32 %64, 2147462579
  store i32 %sub82, i32 addrspace(4)* %x2281, align 4
  br label %if.end83

if.end83:                                         ; preds = %if.then80, %if.end77
  ret void
}

; Function Attrs: convergent mustprogress norecurse nounwind
define dso_local spir_func i64 @_Z16mrg63k3a_advancePU3AS414mrg63k3a_state(%struct.mrg63k3a_state addrspace(4)* %state) #0 {
entry:
  %retval = alloca i64, align 8
  %state.addr = alloca %struct.mrg63k3a_state addrspace(4)*, align 4
  %h = alloca i64, align 8
  %p12 = alloca i64, align 8
  %p13 = alloca i64, align 8
  %p21 = alloca i64, align 8
  %p23 = alloca i64, align 8
  store %struct.mrg63k3a_state addrspace(4)* %state, %struct.mrg63k3a_state addrspace(4)** %state.addr, align 4
  %0 = load %struct.mrg63k3a_state addrspace(4)*, %struct.mrg63k3a_state addrspace(4)** %state.addr, align 4
  %s10 = getelementptr inbounds %struct.mrg63k3a_state, %struct.mrg63k3a_state addrspace(4)* %0, i32 0, i32 0
  %1 = load i64, i64 addrspace(4)* %s10, align 8
  %div = sdiv i64 %1, 2898513661
  store i64 %div, i64* %h, align 8
  %2 = load %struct.mrg63k3a_state addrspace(4)*, %struct.mrg63k3a_state addrspace(4)** %state.addr, align 4
  %s101 = getelementptr inbounds %struct.mrg63k3a_state, %struct.mrg63k3a_state addrspace(4)* %2, i32 0, i32 0
  %3 = load i64, i64 addrspace(4)* %s101, align 8
  %4 = load i64, i64* %h, align 8
  %mul = mul nsw i64 %4, 2898513661
  %sub = sub nsw i64 %3, %mul
  %mul2 = mul nsw i64 3182104042, %sub
  %5 = load i64, i64* %h, align 8
  %mul3 = mul nsw i64 %5, 394451401
  %sub4 = sub nsw i64 %mul2, %mul3
  store i64 %sub4, i64* %p13, align 8
  %6 = load %struct.mrg63k3a_state addrspace(4)*, %struct.mrg63k3a_state addrspace(4)** %state.addr, align 4
  %s11 = getelementptr inbounds %struct.mrg63k3a_state, %struct.mrg63k3a_state addrspace(4)* %6, i32 0, i32 1
  %7 = load i64, i64 addrspace(4)* %s11, align 8
  %div5 = sdiv i64 %7, 5256471877
  store i64 %div5, i64* %h, align 8
  %8 = load %struct.mrg63k3a_state addrspace(4)*, %struct.mrg63k3a_state addrspace(4)** %state.addr, align 4
  %s116 = getelementptr inbounds %struct.mrg63k3a_state, %struct.mrg63k3a_state addrspace(4)* %8, i32 0, i32 1
  %9 = load i64, i64 addrspace(4)* %s116, align 8
  %10 = load i64, i64* %h, align 8
  %mul7 = mul nsw i64 %10, 5256471877
  %sub8 = sub nsw i64 %9, %mul7
  %mul9 = mul nsw i64 1754669720, %sub8
  %11 = load i64, i64* %h, align 8
  %mul10 = mul nsw i64 %11, 251304723
  %sub11 = sub nsw i64 %mul9, %mul10
  store i64 %sub11, i64* %p12, align 8
  %12 = load i64, i64* %p13, align 8
  %cmp = icmp slt i64 %12, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %13 = load i64, i64* %p13, align 8
  %add = add nsw i64 %13, 9223372036854769163
  store i64 %add, i64* %p13, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %14 = load i64, i64* %p12, align 8
  %cmp12 = icmp slt i64 %14, 0
  br i1 %cmp12, label %if.then13, label %if.else

if.then13:                                        ; preds = %if.end
  %15 = load i64, i64* %p13, align 8
  %sub14 = sub nsw i64 9223372036854769163, %15
  %16 = load i64, i64* %p12, align 8
  %add15 = add nsw i64 %16, %sub14
  store i64 %add15, i64* %p12, align 8
  br label %if.end17

if.else:                                          ; preds = %if.end
  %17 = load i64, i64* %p13, align 8
  %18 = load i64, i64* %p12, align 8
  %sub16 = sub nsw i64 %18, %17
  store i64 %sub16, i64* %p12, align 8
  br label %if.end17

if.end17:                                         ; preds = %if.else, %if.then13
  %19 = load i64, i64* %p12, align 8
  %cmp18 = icmp slt i64 %19, 0
  br i1 %cmp18, label %if.then19, label %if.end21

if.then19:                                        ; preds = %if.end17
  %20 = load i64, i64* %p12, align 8
  %add20 = add nsw i64 %20, 9223372036854769163
  store i64 %add20, i64* %p12, align 8
  br label %if.end21

if.end21:                                         ; preds = %if.then19, %if.end17
  %21 = load %struct.mrg63k3a_state addrspace(4)*, %struct.mrg63k3a_state addrspace(4)** %state.addr, align 4
  %s1122 = getelementptr inbounds %struct.mrg63k3a_state, %struct.mrg63k3a_state addrspace(4)* %21, i32 0, i32 1
  %22 = load i64, i64 addrspace(4)* %s1122, align 8
  %23 = load %struct.mrg63k3a_state addrspace(4)*, %struct.mrg63k3a_state addrspace(4)** %state.addr, align 4
  %s1023 = getelementptr inbounds %struct.mrg63k3a_state, %struct.mrg63k3a_state addrspace(4)* %23, i32 0, i32 0
  store i64 %22, i64 addrspace(4)* %s1023, align 8
  %24 = load %struct.mrg63k3a_state addrspace(4)*, %struct.mrg63k3a_state addrspace(4)** %state.addr, align 4
  %s12 = getelementptr inbounds %struct.mrg63k3a_state, %struct.mrg63k3a_state addrspace(4)* %24, i32 0, i32 2
  %25 = load i64, i64 addrspace(4)* %s12, align 8
  %26 = load %struct.mrg63k3a_state addrspace(4)*, %struct.mrg63k3a_state addrspace(4)** %state.addr, align 4
  %s1124 = getelementptr inbounds %struct.mrg63k3a_state, %struct.mrg63k3a_state addrspace(4)* %26, i32 0, i32 1
  store i64 %25, i64 addrspace(4)* %s1124, align 8
  %27 = load i64, i64* %p12, align 8
  %28 = load %struct.mrg63k3a_state addrspace(4)*, %struct.mrg63k3a_state addrspace(4)** %state.addr, align 4
  %s1225 = getelementptr inbounds %struct.mrg63k3a_state, %struct.mrg63k3a_state addrspace(4)* %28, i32 0, i32 2
  store i64 %27, i64 addrspace(4)* %s1225, align 8
  %29 = load %struct.mrg63k3a_state addrspace(4)*, %struct.mrg63k3a_state addrspace(4)** %state.addr, align 4
  %s20 = getelementptr inbounds %struct.mrg63k3a_state, %struct.mrg63k3a_state addrspace(4)* %29, i32 0, i32 3
  %30 = load i64, i64 addrspace(4)* %s20, align 8
  %div26 = sdiv i64 %30, 1487847900
  store i64 %div26, i64* %h, align 8
  %31 = load %struct.mrg63k3a_state addrspace(4)*, %struct.mrg63k3a_state addrspace(4)** %state.addr, align 4
  %s2027 = getelementptr inbounds %struct.mrg63k3a_state, %struct.mrg63k3a_state addrspace(4)* %31, i32 0, i32 3
  %32 = load i64, i64 addrspace(4)* %s2027, align 8
  %33 = load i64, i64* %h, align 8
  %mul28 = mul nsw i64 %33, 1487847900
  %sub29 = sub nsw i64 %32, %mul28
  %mul30 = mul nsw i64 6199136374, %sub29
  %34 = load i64, i64* %h, align 8
  %mul31 = mul nsw i64 %34, 985240079
  %sub32 = sub nsw i64 %mul30, %mul31
  store i64 %sub32, i64* %p23, align 8
  %35 = load %struct.mrg63k3a_state addrspace(4)*, %struct.mrg63k3a_state addrspace(4)** %state.addr, align 4
  %s22 = getelementptr inbounds %struct.mrg63k3a_state, %struct.mrg63k3a_state addrspace(4)* %35, i32 0, i32 5
  %36 = load i64, i64 addrspace(4)* %s22, align 8
  %div33 = sdiv i64 %36, 293855150
  store i64 %div33, i64* %h, align 8
  %37 = load %struct.mrg63k3a_state addrspace(4)*, %struct.mrg63k3a_state addrspace(4)** %state.addr, align 4
  %s2234 = getelementptr inbounds %struct.mrg63k3a_state, %struct.mrg63k3a_state addrspace(4)* %37, i32 0, i32 5
  %38 = load i64, i64 addrspace(4)* %s2234, align 8
  %39 = load i64, i64* %h, align 8
  %mul35 = mul nsw i64 %39, 293855150
  %sub36 = sub nsw i64 %38, %mul35
  %mul37 = mul nsw i64 31387477935, %sub36
  %40 = load i64, i64* %h, align 8
  %mul38 = mul nsw i64 %40, 143639429
  %sub39 = sub nsw i64 %mul37, %mul38
  store i64 %sub39, i64* %p21, align 8
  %41 = load i64, i64* %p23, align 8
  %cmp40 = icmp slt i64 %41, 0
  br i1 %cmp40, label %if.then41, label %if.end43

if.then41:                                        ; preds = %if.end21
  %42 = load i64, i64* %p23, align 8
  %add42 = add nsw i64 %42, 9223372036854754679
  store i64 %add42, i64* %p23, align 8
  br label %if.end43

if.end43:                                         ; preds = %if.then41, %if.end21
  %43 = load i64, i64* %p21, align 8
  %cmp44 = icmp slt i64 %43, 0
  br i1 %cmp44, label %if.then45, label %if.else48

if.then45:                                        ; preds = %if.end43
  %44 = load i64, i64* %p23, align 8
  %sub46 = sub nsw i64 9223372036854754679, %44
  %45 = load i64, i64* %p21, align 8
  %add47 = add nsw i64 %45, %sub46
  store i64 %add47, i64* %p21, align 8
  br label %if.end50

if.else48:                                        ; preds = %if.end43
  %46 = load i64, i64* %p23, align 8
  %47 = load i64, i64* %p21, align 8
  %sub49 = sub nsw i64 %47, %46
  store i64 %sub49, i64* %p21, align 8
  br label %if.end50

if.end50:                                         ; preds = %if.else48, %if.then45
  %48 = load i64, i64* %p21, align 8
  %cmp51 = icmp slt i64 %48, 0
  br i1 %cmp51, label %if.then52, label %if.end54

if.then52:                                        ; preds = %if.end50
  %49 = load i64, i64* %p21, align 8
  %add53 = add nsw i64 %49, 9223372036854754679
  store i64 %add53, i64* %p21, align 8
  br label %if.end54

if.end54:                                         ; preds = %if.then52, %if.end50
  %50 = load %struct.mrg63k3a_state addrspace(4)*, %struct.mrg63k3a_state addrspace(4)** %state.addr, align 4
  %s21 = getelementptr inbounds %struct.mrg63k3a_state, %struct.mrg63k3a_state addrspace(4)* %50, i32 0, i32 4
  %51 = load i64, i64 addrspace(4)* %s21, align 8
  %52 = load %struct.mrg63k3a_state addrspace(4)*, %struct.mrg63k3a_state addrspace(4)** %state.addr, align 4
  %s2055 = getelementptr inbounds %struct.mrg63k3a_state, %struct.mrg63k3a_state addrspace(4)* %52, i32 0, i32 3
  store i64 %51, i64 addrspace(4)* %s2055, align 8
  %53 = load %struct.mrg63k3a_state addrspace(4)*, %struct.mrg63k3a_state addrspace(4)** %state.addr, align 4
  %s2256 = getelementptr inbounds %struct.mrg63k3a_state, %struct.mrg63k3a_state addrspace(4)* %53, i32 0, i32 5
  %54 = load i64, i64 addrspace(4)* %s2256, align 8
  %55 = load %struct.mrg63k3a_state addrspace(4)*, %struct.mrg63k3a_state addrspace(4)** %state.addr, align 4
  %s2157 = getelementptr inbounds %struct.mrg63k3a_state, %struct.mrg63k3a_state addrspace(4)* %55, i32 0, i32 4
  store i64 %54, i64 addrspace(4)* %s2157, align 8
  %56 = load i64, i64* %p21, align 8
  %57 = load %struct.mrg63k3a_state addrspace(4)*, %struct.mrg63k3a_state addrspace(4)** %state.addr, align 4
  %s2258 = getelementptr inbounds %struct.mrg63k3a_state, %struct.mrg63k3a_state addrspace(4)* %57, i32 0, i32 5
  store i64 %56, i64 addrspace(4)* %s2258, align 8
  %58 = load i64, i64* %p12, align 8
  %59 = load i64, i64* %p21, align 8
  %cmp59 = icmp sgt i64 %58, %59
  br i1 %cmp59, label %if.then60, label %if.else62

if.then60:                                        ; preds = %if.end54
  %60 = load i64, i64* %p12, align 8
  %61 = load i64, i64* %p21, align 8
  %sub61 = sub nsw i64 %60, %61
  store i64 %sub61, i64* %retval, align 8
  br label %return

if.else62:                                        ; preds = %if.end54
  %62 = load i64, i64* %p12, align 8
  %63 = load i64, i64* %p21, align 8
  %sub63 = sub nsw i64 %62, %63
  %add64 = add nsw i64 %sub63, 9223372036854769163
  store i64 %add64, i64* %retval, align 8
  br label %return

return:                                           ; preds = %if.else62, %if.then60
  %64 = load i64, i64* %retval, align 8
  ret i64 %64
}

; Function Attrs: convergent mustprogress norecurse nounwind
define dso_local spir_func i64 @_Z15_mrg63k3a_ulongPU3AS414mrg63k3a_state(%struct.mrg63k3a_state addrspace(4)* %state) #0 {
entry:
  %state.addr = alloca %struct.mrg63k3a_state addrspace(4)*, align 4
  store %struct.mrg63k3a_state addrspace(4)* %state, %struct.mrg63k3a_state addrspace(4)** %state.addr, align 4
  %0 = load %struct.mrg63k3a_state addrspace(4)*, %struct.mrg63k3a_state addrspace(4)** %state.addr, align 4
  %call = call spir_func i64 @_Z16mrg63k3a_advancePU3AS414mrg63k3a_state(%struct.mrg63k3a_state addrspace(4)* %0) #6
  %shl = shl i64 %call, 1
  ret i64 %shl
}

; Function Attrs: convergent mustprogress norecurse nounwind
define dso_local spir_func void @_Z13mrg63k3a_seedPU3AS414mrg63k3a_statem(%struct.mrg63k3a_state addrspace(4)* %state, i64 %j) #0 {
entry:
  %state.addr = alloca %struct.mrg63k3a_state addrspace(4)*, align 4
  %j.addr = alloca i64, align 8
  store %struct.mrg63k3a_state addrspace(4)* %state, %struct.mrg63k3a_state addrspace(4)** %state.addr, align 4
  store i64 %j, i64* %j.addr, align 8
  %0 = load i64, i64* %j.addr, align 8
  %1 = load %struct.mrg63k3a_state addrspace(4)*, %struct.mrg63k3a_state addrspace(4)** %state.addr, align 4
  %s10 = getelementptr inbounds %struct.mrg63k3a_state, %struct.mrg63k3a_state addrspace(4)* %1, i32 0, i32 0
  store i64 %0, i64 addrspace(4)* %s10, align 8
  %2 = load i64, i64* %j.addr, align 8
  %3 = load %struct.mrg63k3a_state addrspace(4)*, %struct.mrg63k3a_state addrspace(4)** %state.addr, align 4
  %s11 = getelementptr inbounds %struct.mrg63k3a_state, %struct.mrg63k3a_state addrspace(4)* %3, i32 0, i32 1
  store i64 %2, i64 addrspace(4)* %s11, align 8
  %4 = load i64, i64* %j.addr, align 8
  %5 = load %struct.mrg63k3a_state addrspace(4)*, %struct.mrg63k3a_state addrspace(4)** %state.addr, align 4
  %s12 = getelementptr inbounds %struct.mrg63k3a_state, %struct.mrg63k3a_state addrspace(4)* %5, i32 0, i32 2
  store i64 %4, i64 addrspace(4)* %s12, align 8
  %6 = load i64, i64* %j.addr, align 8
  %7 = load %struct.mrg63k3a_state addrspace(4)*, %struct.mrg63k3a_state addrspace(4)** %state.addr, align 4
  %s20 = getelementptr inbounds %struct.mrg63k3a_state, %struct.mrg63k3a_state addrspace(4)* %7, i32 0, i32 3
  store i64 %6, i64 addrspace(4)* %s20, align 8
  %8 = load i64, i64* %j.addr, align 8
  %9 = load %struct.mrg63k3a_state addrspace(4)*, %struct.mrg63k3a_state addrspace(4)** %state.addr, align 4
  %s21 = getelementptr inbounds %struct.mrg63k3a_state, %struct.mrg63k3a_state addrspace(4)* %9, i32 0, i32 4
  store i64 %8, i64 addrspace(4)* %s21, align 8
  %10 = load i64, i64* %j.addr, align 8
  %11 = load %struct.mrg63k3a_state addrspace(4)*, %struct.mrg63k3a_state addrspace(4)** %state.addr, align 4
  %s22 = getelementptr inbounds %struct.mrg63k3a_state, %struct.mrg63k3a_state addrspace(4)* %11, i32 0, i32 5
  store i64 %10, i64 addrspace(4)* %s22, align 8
  %12 = load i64, i64* %j.addr, align 8
  %cmp = icmp eq i64 %12, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %13 = load %struct.mrg63k3a_state addrspace(4)*, %struct.mrg63k3a_state addrspace(4)** %state.addr, align 4
  %s101 = getelementptr inbounds %struct.mrg63k3a_state, %struct.mrg63k3a_state addrspace(4)* %13, i32 0, i32 0
  %14 = load i64, i64 addrspace(4)* %s101, align 8
  %inc = add nsw i64 %14, 1
  store i64 %inc, i64 addrspace(4)* %s101, align 8
  %15 = load %struct.mrg63k3a_state addrspace(4)*, %struct.mrg63k3a_state addrspace(4)** %state.addr, align 4
  %s212 = getelementptr inbounds %struct.mrg63k3a_state, %struct.mrg63k3a_state addrspace(4)* %15, i32 0, i32 4
  %16 = load i64, i64 addrspace(4)* %s212, align 8
  %inc3 = add nsw i64 %16, 1
  store i64 %inc3, i64 addrspace(4)* %s212, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: convergent mustprogress norecurse nounwind
define dso_local spir_func i64 @_Z11_msws_ulongPU3AS410msws_state(%struct.msws_state addrspace(4)* %state) #0 {
entry:
  %state.addr = alloca %struct.msws_state addrspace(4)*, align 4
  store %struct.msws_state addrspace(4)* %state, %struct.msws_state addrspace(4)** %state.addr, align 4
  %0 = load %struct.msws_state addrspace(4)*, %struct.msws_state addrspace(4)** %state.addr, align 4
  %1 = getelementptr inbounds %struct.msws_state, %struct.msws_state addrspace(4)* %0, i32 0, i32 0
  %x = bitcast %union.anon addrspace(4)* %1 to i64 addrspace(4)*
  %2 = load i64, i64 addrspace(4)* %x, align 8
  %3 = load %struct.msws_state addrspace(4)*, %struct.msws_state addrspace(4)** %state.addr, align 4
  %4 = getelementptr inbounds %struct.msws_state, %struct.msws_state addrspace(4)* %3, i32 0, i32 0
  %x1 = bitcast %union.anon addrspace(4)* %4 to i64 addrspace(4)*
  %5 = load i64, i64 addrspace(4)* %x1, align 8
  %mul = mul i64 %5, %2
  store i64 %mul, i64 addrspace(4)* %x1, align 8
  %6 = load %struct.msws_state addrspace(4)*, %struct.msws_state addrspace(4)** %state.addr, align 4
  %w = getelementptr inbounds %struct.msws_state, %struct.msws_state addrspace(4)* %6, i32 0, i32 1
  %7 = load i64, i64 addrspace(4)* %w, align 8
  %add = add i64 %7, -5355537731544096087
  store i64 %add, i64 addrspace(4)* %w, align 8
  %8 = load %struct.msws_state addrspace(4)*, %struct.msws_state addrspace(4)** %state.addr, align 4
  %9 = getelementptr inbounds %struct.msws_state, %struct.msws_state addrspace(4)* %8, i32 0, i32 0
  %x2 = bitcast %union.anon addrspace(4)* %9 to i64 addrspace(4)*
  %10 = load i64, i64 addrspace(4)* %x2, align 8
  %add3 = add i64 %10, %add
  store i64 %add3, i64 addrspace(4)* %x2, align 8
  %11 = load %struct.msws_state addrspace(4)*, %struct.msws_state addrspace(4)** %state.addr, align 4
  %12 = getelementptr inbounds %struct.msws_state, %struct.msws_state addrspace(4)* %11, i32 0, i32 0
  %x4 = bitcast %union.anon addrspace(4)* %12 to i64 addrspace(4)*
  %13 = load i64, i64 addrspace(4)* %x4, align 8
  %shr = lshr i64 %13, 32
  %14 = load %struct.msws_state addrspace(4)*, %struct.msws_state addrspace(4)** %state.addr, align 4
  %15 = getelementptr inbounds %struct.msws_state, %struct.msws_state addrspace(4)* %14, i32 0, i32 0
  %x5 = bitcast %union.anon addrspace(4)* %15 to i64 addrspace(4)*
  %16 = load i64, i64 addrspace(4)* %x5, align 8
  %shl = shl i64 %16, 32
  %or = or i64 %shr, %shl
  %17 = load %struct.msws_state addrspace(4)*, %struct.msws_state addrspace(4)** %state.addr, align 4
  %18 = getelementptr inbounds %struct.msws_state, %struct.msws_state addrspace(4)* %17, i32 0, i32 0
  %x6 = bitcast %union.anon addrspace(4)* %18 to i64 addrspace(4)*
  store i64 %or, i64 addrspace(4)* %x6, align 8
  ret i64 %or
}

; Function Attrs: convergent mustprogress norecurse nounwind
define dso_local spir_func i64 @_Z16_msws_swap_ulongPU3AS410msws_state(%struct.msws_state addrspace(4)* %state) #0 {
entry:
  %state.addr = alloca %struct.msws_state addrspace(4)*, align 4
  store %struct.msws_state addrspace(4)* %state, %struct.msws_state addrspace(4)** %state.addr, align 4
  %0 = load %struct.msws_state addrspace(4)*, %struct.msws_state addrspace(4)** %state.addr, align 4
  %1 = getelementptr inbounds %struct.msws_state, %struct.msws_state addrspace(4)* %0, i32 0, i32 0
  %x = bitcast %union.anon addrspace(4)* %1 to i64 addrspace(4)*
  %2 = load i64, i64 addrspace(4)* %x, align 8
  %3 = load %struct.msws_state addrspace(4)*, %struct.msws_state addrspace(4)** %state.addr, align 4
  %4 = getelementptr inbounds %struct.msws_state, %struct.msws_state addrspace(4)* %3, i32 0, i32 0
  %x1 = bitcast %union.anon addrspace(4)* %4 to i64 addrspace(4)*
  %5 = load i64, i64 addrspace(4)* %x1, align 8
  %mul = mul i64 %5, %2
  store i64 %mul, i64 addrspace(4)* %x1, align 8
  %6 = load %struct.msws_state addrspace(4)*, %struct.msws_state addrspace(4)** %state.addr, align 4
  %w = getelementptr inbounds %struct.msws_state, %struct.msws_state addrspace(4)* %6, i32 0, i32 1
  %7 = load i64, i64 addrspace(4)* %w, align 8
  %add = add i64 %7, -5355537731544096087
  store i64 %add, i64 addrspace(4)* %w, align 8
  %8 = load %struct.msws_state addrspace(4)*, %struct.msws_state addrspace(4)** %state.addr, align 4
  %9 = getelementptr inbounds %struct.msws_state, %struct.msws_state addrspace(4)* %8, i32 0, i32 0
  %x2 = bitcast %union.anon addrspace(4)* %9 to i64 addrspace(4)*
  %10 = load i64, i64 addrspace(4)* %x2, align 8
  %add3 = add i64 %10, %add
  store i64 %add3, i64 addrspace(4)* %x2, align 8
  %11 = load %struct.msws_state addrspace(4)*, %struct.msws_state addrspace(4)** %state.addr, align 4
  %12 = getelementptr inbounds %struct.msws_state, %struct.msws_state addrspace(4)* %11, i32 0, i32 0
  %x24 = bitcast %union.anon addrspace(4)* %12 to <2 x i32> addrspace(4)*
  %13 = load <2 x i32>, <2 x i32> addrspace(4)* %x24, align 8
  %14 = shufflevector <2 x i32> %13, <2 x i32> poison, <2 x i32> <i32 1, i32 0>
  %15 = load %struct.msws_state addrspace(4)*, %struct.msws_state addrspace(4)** %state.addr, align 4
  %16 = getelementptr inbounds %struct.msws_state, %struct.msws_state addrspace(4)* %15, i32 0, i32 0
  %x25 = bitcast %union.anon addrspace(4)* %16 to <2 x i32> addrspace(4)*
  store <2 x i32> %14, <2 x i32> addrspace(4)* %x25, align 8
  %17 = load %struct.msws_state addrspace(4)*, %struct.msws_state addrspace(4)** %state.addr, align 4
  %18 = getelementptr inbounds %struct.msws_state, %struct.msws_state addrspace(4)* %17, i32 0, i32 0
  %x6 = bitcast %union.anon addrspace(4)* %18 to i64 addrspace(4)*
  %19 = load i64, i64 addrspace(4)* %x6, align 8
  ret i64 %19
}

; Function Attrs: convergent mustprogress norecurse nounwind
define dso_local spir_func i64 @_Z17_msws_swap2_ulongPU3AS410msws_state(%struct.msws_state addrspace(4)* %state) #0 {
entry:
  %state.addr = alloca %struct.msws_state addrspace(4)*, align 4
  %tmp = alloca i32, align 4
  store %struct.msws_state addrspace(4)* %state, %struct.msws_state addrspace(4)** %state.addr, align 4
  %0 = load %struct.msws_state addrspace(4)*, %struct.msws_state addrspace(4)** %state.addr, align 4
  %1 = getelementptr inbounds %struct.msws_state, %struct.msws_state addrspace(4)* %0, i32 0, i32 0
  %x = bitcast %union.anon addrspace(4)* %1 to i64 addrspace(4)*
  %2 = load i64, i64 addrspace(4)* %x, align 8
  %3 = load %struct.msws_state addrspace(4)*, %struct.msws_state addrspace(4)** %state.addr, align 4
  %4 = getelementptr inbounds %struct.msws_state, %struct.msws_state addrspace(4)* %3, i32 0, i32 0
  %x1 = bitcast %union.anon addrspace(4)* %4 to i64 addrspace(4)*
  %5 = load i64, i64 addrspace(4)* %x1, align 8
  %mul = mul i64 %5, %2
  store i64 %mul, i64 addrspace(4)* %x1, align 8
  %6 = load %struct.msws_state addrspace(4)*, %struct.msws_state addrspace(4)** %state.addr, align 4
  %w = getelementptr inbounds %struct.msws_state, %struct.msws_state addrspace(4)* %6, i32 0, i32 1
  %7 = load i64, i64 addrspace(4)* %w, align 8
  %add = add i64 %7, -5355537731544096087
  store i64 %add, i64 addrspace(4)* %w, align 8
  %8 = load %struct.msws_state addrspace(4)*, %struct.msws_state addrspace(4)** %state.addr, align 4
  %9 = getelementptr inbounds %struct.msws_state, %struct.msws_state addrspace(4)* %8, i32 0, i32 0
  %x2 = bitcast %union.anon addrspace(4)* %9 to i64 addrspace(4)*
  %10 = load i64, i64 addrspace(4)* %x2, align 8
  %add3 = add i64 %10, %add
  store i64 %add3, i64 addrspace(4)* %x2, align 8
  %11 = load %struct.msws_state addrspace(4)*, %struct.msws_state addrspace(4)** %state.addr, align 4
  %12 = getelementptr inbounds %struct.msws_state, %struct.msws_state addrspace(4)* %11, i32 0, i32 0
  %x24 = bitcast %union.anon addrspace(4)* %12 to <2 x i32> addrspace(4)*
  %13 = load <2 x i32>, <2 x i32> addrspace(4)* %x24, align 8
  %14 = extractelement <2 x i32> %13, i32 0
  store i32 %14, i32* %tmp, align 4
  %15 = load %struct.msws_state addrspace(4)*, %struct.msws_state addrspace(4)** %state.addr, align 4
  %16 = getelementptr inbounds %struct.msws_state, %struct.msws_state addrspace(4)* %15, i32 0, i32 0
  %x25 = bitcast %union.anon addrspace(4)* %16 to <2 x i32> addrspace(4)*
  %17 = load <2 x i32>, <2 x i32> addrspace(4)* %x25, align 8
  %18 = extractelement <2 x i32> %17, i32 1
  %19 = load %struct.msws_state addrspace(4)*, %struct.msws_state addrspace(4)** %state.addr, align 4
  %20 = getelementptr inbounds %struct.msws_state, %struct.msws_state addrspace(4)* %19, i32 0, i32 0
  %x26 = bitcast %union.anon addrspace(4)* %20 to <2 x i32> addrspace(4)*
  %21 = load <2 x i32>, <2 x i32> addrspace(4)* %x26, align 8
  %22 = insertelement <2 x i32> %21, i32 %18, i32 0
  store <2 x i32> %22, <2 x i32> addrspace(4)* %x26, align 8
  %23 = load i32, i32* %tmp, align 4
  %24 = load %struct.msws_state addrspace(4)*, %struct.msws_state addrspace(4)** %state.addr, align 4
  %25 = getelementptr inbounds %struct.msws_state, %struct.msws_state addrspace(4)* %24, i32 0, i32 0
  %x27 = bitcast %union.anon addrspace(4)* %25 to <2 x i32> addrspace(4)*
  %26 = load <2 x i32>, <2 x i32> addrspace(4)* %x27, align 8
  %27 = insertelement <2 x i32> %26, i32 %23, i32 1
  store <2 x i32> %27, <2 x i32> addrspace(4)* %x27, align 8
  %28 = load %struct.msws_state addrspace(4)*, %struct.msws_state addrspace(4)** %state.addr, align 4
  %29 = getelementptr inbounds %struct.msws_state, %struct.msws_state addrspace(4)* %28, i32 0, i32 0
  %x8 = bitcast %union.anon addrspace(4)* %29 to i64 addrspace(4)*
  %30 = load i64, i64 addrspace(4)* %x8, align 8
  ret i64 %30
}

; Function Attrs: convergent mustprogress norecurse nounwind
define dso_local spir_func void @_Z9msws_seedPU3AS410msws_statem(%struct.msws_state addrspace(4)* %state, i64 %j) #0 {
entry:
  %state.addr = alloca %struct.msws_state addrspace(4)*, align 4
  %j.addr = alloca i64, align 8
  store %struct.msws_state addrspace(4)* %state, %struct.msws_state addrspace(4)** %state.addr, align 4
  store i64 %j, i64* %j.addr, align 8
  %0 = load i64, i64* %j.addr, align 8
  %1 = load %struct.msws_state addrspace(4)*, %struct.msws_state addrspace(4)** %state.addr, align 4
  %2 = getelementptr inbounds %struct.msws_state, %struct.msws_state addrspace(4)* %1, i32 0, i32 0
  %x = bitcast %union.anon addrspace(4)* %2 to i64 addrspace(4)*
  store i64 %0, i64 addrspace(4)* %x, align 8
  %3 = load i64, i64* %j.addr, align 8
  %4 = load %struct.msws_state addrspace(4)*, %struct.msws_state addrspace(4)** %state.addr, align 4
  %w = getelementptr inbounds %struct.msws_state, %struct.msws_state addrspace(4)* %4, i32 0, i32 1
  store i64 %3, i64 addrspace(4)* %w, align 8
  ret void
}

; Function Attrs: convergent mustprogress norecurse nounwind
define dso_local spir_func i32 @_Z13_mt19937_uintPU3AS413mt19937_state(%struct.mt19937_state addrspace(4)* %state) #0 {
entry:
  %state.addr = alloca %struct.mt19937_state addrspace(4)*, align 4
  %y = alloca i32, align 4
  %mag01 = alloca [2 x i32], align 4
  store %struct.mt19937_state addrspace(4)* %state, %struct.mt19937_state addrspace(4)** %state.addr, align 4
  %0 = bitcast [2 x i32]* %mag01 to i8*
  call void @llvm.memcpy.p0i8.p2i8.i32(i8* align 4 %0, i8 addrspace(2)* align 4 bitcast ([2 x i32] addrspace(2)* @__const._Z13_mt19937_uintPU3AS413mt19937_state.mag01 to i8 addrspace(2)*), i32 8, i1 false)
  %1 = load %struct.mt19937_state addrspace(4)*, %struct.mt19937_state addrspace(4)** %state.addr, align 4
  %mti = getelementptr inbounds %struct.mt19937_state, %struct.mt19937_state addrspace(4)* %1, i32 0, i32 1
  %2 = load i32, i32 addrspace(4)* %mti, align 4
  %cmp = icmp slt i32 %2, 227
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load %struct.mt19937_state addrspace(4)*, %struct.mt19937_state addrspace(4)** %state.addr, align 4
  %mt = getelementptr inbounds %struct.mt19937_state, %struct.mt19937_state addrspace(4)* %3, i32 0, i32 0
  %4 = load %struct.mt19937_state addrspace(4)*, %struct.mt19937_state addrspace(4)** %state.addr, align 4
  %mti1 = getelementptr inbounds %struct.mt19937_state, %struct.mt19937_state addrspace(4)* %4, i32 0, i32 1
  %5 = load i32, i32 addrspace(4)* %mti1, align 4
  %arrayidx = getelementptr inbounds [624 x i32], [624 x i32] addrspace(4)* %mt, i32 0, i32 %5
  %6 = load i32, i32 addrspace(4)* %arrayidx, align 4
  %and = and i32 %6, -2147483648
  %7 = load %struct.mt19937_state addrspace(4)*, %struct.mt19937_state addrspace(4)** %state.addr, align 4
  %mt2 = getelementptr inbounds %struct.mt19937_state, %struct.mt19937_state addrspace(4)* %7, i32 0, i32 0
  %8 = load %struct.mt19937_state addrspace(4)*, %struct.mt19937_state addrspace(4)** %state.addr, align 4
  %mti3 = getelementptr inbounds %struct.mt19937_state, %struct.mt19937_state addrspace(4)* %8, i32 0, i32 1
  %9 = load i32, i32 addrspace(4)* %mti3, align 4
  %add = add nsw i32 %9, 1
  %arrayidx4 = getelementptr inbounds [624 x i32], [624 x i32] addrspace(4)* %mt2, i32 0, i32 %add
  %10 = load i32, i32 addrspace(4)* %arrayidx4, align 4
  %and5 = and i32 %10, 2147483647
  %or = or i32 %and, %and5
  store i32 %or, i32* %y, align 4
  %11 = load %struct.mt19937_state addrspace(4)*, %struct.mt19937_state addrspace(4)** %state.addr, align 4
  %mt6 = getelementptr inbounds %struct.mt19937_state, %struct.mt19937_state addrspace(4)* %11, i32 0, i32 0
  %12 = load %struct.mt19937_state addrspace(4)*, %struct.mt19937_state addrspace(4)** %state.addr, align 4
  %mti7 = getelementptr inbounds %struct.mt19937_state, %struct.mt19937_state addrspace(4)* %12, i32 0, i32 1
  %13 = load i32, i32 addrspace(4)* %mti7, align 4
  %add8 = add nsw i32 %13, 397
  %arrayidx9 = getelementptr inbounds [624 x i32], [624 x i32] addrspace(4)* %mt6, i32 0, i32 %add8
  %14 = load i32, i32 addrspace(4)* %arrayidx9, align 4
  %15 = load i32, i32* %y, align 4
  %shr = lshr i32 %15, 1
  %xor = xor i32 %14, %shr
  %16 = load i32, i32* %y, align 4
  %and10 = and i32 %16, 1
  %arrayidx11 = getelementptr inbounds [2 x i32], [2 x i32]* %mag01, i32 0, i32 %and10
  %17 = load i32, i32* %arrayidx11, align 4
  %xor12 = xor i32 %xor, %17
  %18 = load %struct.mt19937_state addrspace(4)*, %struct.mt19937_state addrspace(4)** %state.addr, align 4
  %mt13 = getelementptr inbounds %struct.mt19937_state, %struct.mt19937_state addrspace(4)* %18, i32 0, i32 0
  %19 = load %struct.mt19937_state addrspace(4)*, %struct.mt19937_state addrspace(4)** %state.addr, align 4
  %mti14 = getelementptr inbounds %struct.mt19937_state, %struct.mt19937_state addrspace(4)* %19, i32 0, i32 1
  %20 = load i32, i32 addrspace(4)* %mti14, align 4
  %arrayidx15 = getelementptr inbounds [624 x i32], [624 x i32] addrspace(4)* %mt13, i32 0, i32 %20
  store i32 %xor12, i32 addrspace(4)* %arrayidx15, align 4
  br label %if.end59

if.else:                                          ; preds = %entry
  %21 = load %struct.mt19937_state addrspace(4)*, %struct.mt19937_state addrspace(4)** %state.addr, align 4
  %mti16 = getelementptr inbounds %struct.mt19937_state, %struct.mt19937_state addrspace(4)* %21, i32 0, i32 1
  %22 = load i32, i32 addrspace(4)* %mti16, align 4
  %cmp17 = icmp slt i32 %22, 623
  br i1 %cmp17, label %if.then18, label %if.else41

if.then18:                                        ; preds = %if.else
  %23 = load %struct.mt19937_state addrspace(4)*, %struct.mt19937_state addrspace(4)** %state.addr, align 4
  %mt19 = getelementptr inbounds %struct.mt19937_state, %struct.mt19937_state addrspace(4)* %23, i32 0, i32 0
  %24 = load %struct.mt19937_state addrspace(4)*, %struct.mt19937_state addrspace(4)** %state.addr, align 4
  %mti20 = getelementptr inbounds %struct.mt19937_state, %struct.mt19937_state addrspace(4)* %24, i32 0, i32 1
  %25 = load i32, i32 addrspace(4)* %mti20, align 4
  %arrayidx21 = getelementptr inbounds [624 x i32], [624 x i32] addrspace(4)* %mt19, i32 0, i32 %25
  %26 = load i32, i32 addrspace(4)* %arrayidx21, align 4
  %and22 = and i32 %26, -2147483648
  %27 = load %struct.mt19937_state addrspace(4)*, %struct.mt19937_state addrspace(4)** %state.addr, align 4
  %mt23 = getelementptr inbounds %struct.mt19937_state, %struct.mt19937_state addrspace(4)* %27, i32 0, i32 0
  %28 = load %struct.mt19937_state addrspace(4)*, %struct.mt19937_state addrspace(4)** %state.addr, align 4
  %mti24 = getelementptr inbounds %struct.mt19937_state, %struct.mt19937_state addrspace(4)* %28, i32 0, i32 1
  %29 = load i32, i32 addrspace(4)* %mti24, align 4
  %add25 = add nsw i32 %29, 1
  %arrayidx26 = getelementptr inbounds [624 x i32], [624 x i32] addrspace(4)* %mt23, i32 0, i32 %add25
  %30 = load i32, i32 addrspace(4)* %arrayidx26, align 4
  %and27 = and i32 %30, 2147483647
  %or28 = or i32 %and22, %and27
  store i32 %or28, i32* %y, align 4
  %31 = load %struct.mt19937_state addrspace(4)*, %struct.mt19937_state addrspace(4)** %state.addr, align 4
  %mt29 = getelementptr inbounds %struct.mt19937_state, %struct.mt19937_state addrspace(4)* %31, i32 0, i32 0
  %32 = load %struct.mt19937_state addrspace(4)*, %struct.mt19937_state addrspace(4)** %state.addr, align 4
  %mti30 = getelementptr inbounds %struct.mt19937_state, %struct.mt19937_state addrspace(4)* %32, i32 0, i32 1
  %33 = load i32, i32 addrspace(4)* %mti30, align 4
  %add31 = add nsw i32 %33, -227
  %arrayidx32 = getelementptr inbounds [624 x i32], [624 x i32] addrspace(4)* %mt29, i32 0, i32 %add31
  %34 = load i32, i32 addrspace(4)* %arrayidx32, align 4
  %35 = load i32, i32* %y, align 4
  %shr33 = lshr i32 %35, 1
  %xor34 = xor i32 %34, %shr33
  %36 = load i32, i32* %y, align 4
  %and35 = and i32 %36, 1
  %arrayidx36 = getelementptr inbounds [2 x i32], [2 x i32]* %mag01, i32 0, i32 %and35
  %37 = load i32, i32* %arrayidx36, align 4
  %xor37 = xor i32 %xor34, %37
  %38 = load %struct.mt19937_state addrspace(4)*, %struct.mt19937_state addrspace(4)** %state.addr, align 4
  %mt38 = getelementptr inbounds %struct.mt19937_state, %struct.mt19937_state addrspace(4)* %38, i32 0, i32 0
  %39 = load %struct.mt19937_state addrspace(4)*, %struct.mt19937_state addrspace(4)** %state.addr, align 4
  %mti39 = getelementptr inbounds %struct.mt19937_state, %struct.mt19937_state addrspace(4)* %39, i32 0, i32 1
  %40 = load i32, i32 addrspace(4)* %mti39, align 4
  %arrayidx40 = getelementptr inbounds [624 x i32], [624 x i32] addrspace(4)* %mt38, i32 0, i32 %40
  store i32 %xor37, i32 addrspace(4)* %arrayidx40, align 4
  br label %if.end

if.else41:                                        ; preds = %if.else
  %41 = load %struct.mt19937_state addrspace(4)*, %struct.mt19937_state addrspace(4)** %state.addr, align 4
  %mt42 = getelementptr inbounds %struct.mt19937_state, %struct.mt19937_state addrspace(4)* %41, i32 0, i32 0
  %arrayidx43 = getelementptr inbounds [624 x i32], [624 x i32] addrspace(4)* %mt42, i32 0, i32 623
  %42 = load i32, i32 addrspace(4)* %arrayidx43, align 4
  %and44 = and i32 %42, -2147483648
  %43 = load %struct.mt19937_state addrspace(4)*, %struct.mt19937_state addrspace(4)** %state.addr, align 4
  %mt45 = getelementptr inbounds %struct.mt19937_state, %struct.mt19937_state addrspace(4)* %43, i32 0, i32 0
  %arrayidx46 = getelementptr inbounds [624 x i32], [624 x i32] addrspace(4)* %mt45, i32 0, i32 0
  %44 = load i32, i32 addrspace(4)* %arrayidx46, align 4
  %and47 = and i32 %44, 2147483647
  %or48 = or i32 %and44, %and47
  store i32 %or48, i32* %y, align 4
  %45 = load %struct.mt19937_state addrspace(4)*, %struct.mt19937_state addrspace(4)** %state.addr, align 4
  %mt49 = getelementptr inbounds %struct.mt19937_state, %struct.mt19937_state addrspace(4)* %45, i32 0, i32 0
  %arrayidx50 = getelementptr inbounds [624 x i32], [624 x i32] addrspace(4)* %mt49, i32 0, i32 396
  %46 = load i32, i32 addrspace(4)* %arrayidx50, align 4
  %47 = load i32, i32* %y, align 4
  %shr51 = lshr i32 %47, 1
  %xor52 = xor i32 %46, %shr51
  %48 = load i32, i32* %y, align 4
  %and53 = and i32 %48, 1
  %arrayidx54 = getelementptr inbounds [2 x i32], [2 x i32]* %mag01, i32 0, i32 %and53
  %49 = load i32, i32* %arrayidx54, align 4
  %xor55 = xor i32 %xor52, %49
  %50 = load %struct.mt19937_state addrspace(4)*, %struct.mt19937_state addrspace(4)** %state.addr, align 4
  %mt56 = getelementptr inbounds %struct.mt19937_state, %struct.mt19937_state addrspace(4)* %50, i32 0, i32 0
  %arrayidx57 = getelementptr inbounds [624 x i32], [624 x i32] addrspace(4)* %mt56, i32 0, i32 623
  store i32 %xor55, i32 addrspace(4)* %arrayidx57, align 4
  %51 = load %struct.mt19937_state addrspace(4)*, %struct.mt19937_state addrspace(4)** %state.addr, align 4
  %mti58 = getelementptr inbounds %struct.mt19937_state, %struct.mt19937_state addrspace(4)* %51, i32 0, i32 1
  store i32 0, i32 addrspace(4)* %mti58, align 4
  br label %if.end

if.end:                                           ; preds = %if.else41, %if.then18
  br label %if.end59

if.end59:                                         ; preds = %if.end, %if.then
  %52 = load %struct.mt19937_state addrspace(4)*, %struct.mt19937_state addrspace(4)** %state.addr, align 4
  %mt60 = getelementptr inbounds %struct.mt19937_state, %struct.mt19937_state addrspace(4)* %52, i32 0, i32 0
  %53 = load %struct.mt19937_state addrspace(4)*, %struct.mt19937_state addrspace(4)** %state.addr, align 4
  %mti61 = getelementptr inbounds %struct.mt19937_state, %struct.mt19937_state addrspace(4)* %53, i32 0, i32 1
  %54 = load i32, i32 addrspace(4)* %mti61, align 4
  %inc = add nsw i32 %54, 1
  store i32 %inc, i32 addrspace(4)* %mti61, align 4
  %arrayidx62 = getelementptr inbounds [624 x i32], [624 x i32] addrspace(4)* %mt60, i32 0, i32 %54
  %55 = load i32, i32 addrspace(4)* %arrayidx62, align 4
  store i32 %55, i32* %y, align 4
  %56 = load i32, i32* %y, align 4
  %shr63 = lshr i32 %56, 11
  %57 = load i32, i32* %y, align 4
  %xor64 = xor i32 %57, %shr63
  store i32 %xor64, i32* %y, align 4
  %58 = load i32, i32* %y, align 4
  %shl = shl i32 %58, 7
  %and65 = and i32 %shl, -1658038656
  %59 = load i32, i32* %y, align 4
  %xor66 = xor i32 %59, %and65
  store i32 %xor66, i32* %y, align 4
  %60 = load i32, i32* %y, align 4
  %shl67 = shl i32 %60, 15
  %and68 = and i32 %shl67, -272236544
  %61 = load i32, i32* %y, align 4
  %xor69 = xor i32 %61, %and68
  store i32 %xor69, i32* %y, align 4
  %62 = load i32, i32* %y, align 4
  %shr70 = lshr i32 %62, 18
  %63 = load i32, i32* %y, align 4
  %xor71 = xor i32 %63, %shr70
  store i32 %xor71, i32* %y, align 4
  %64 = load i32, i32* %y, align 4
  ret i32 %64
}

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p2i8.i32(i8* noalias nocapture writeonly, i8 addrspace(2)* noalias nocapture readonly, i32, i1 immarg) #1

; Function Attrs: convergent mustprogress norecurse nounwind
define dso_local spir_func i32 @_Z18_mt19937_loop_uintPU3AS413mt19937_state(%struct.mt19937_state addrspace(4)* %state) #0 {
entry:
  %state.addr = alloca %struct.mt19937_state addrspace(4)*, align 4
  %y = alloca i32, align 4
  %mag01 = alloca [2 x i32], align 4
  %kk = alloca i32, align 4
  store %struct.mt19937_state addrspace(4)* %state, %struct.mt19937_state addrspace(4)** %state.addr, align 4
  %0 = bitcast [2 x i32]* %mag01 to i8*
  call void @llvm.memcpy.p0i8.p2i8.i32(i8* align 4 %0, i8 addrspace(2)* align 4 bitcast ([2 x i32] addrspace(2)* @__const._Z18_mt19937_loop_uintPU3AS413mt19937_state.mag01 to i8 addrspace(2)*), i32 8, i1 false)
  %1 = load %struct.mt19937_state addrspace(4)*, %struct.mt19937_state addrspace(4)** %state.addr, align 4
  %mti = getelementptr inbounds %struct.mt19937_state, %struct.mt19937_state addrspace(4)* %1, i32 0, i32 1
  %2 = load i32, i32 addrspace(4)* %mti, align 4
  %cmp = icmp sge i32 %2, 624
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %kk, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %3 = load i32, i32* %kk, align 4
  %cmp1 = icmp slt i32 %3, 227
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct.mt19937_state addrspace(4)*, %struct.mt19937_state addrspace(4)** %state.addr, align 4
  %mt = getelementptr inbounds %struct.mt19937_state, %struct.mt19937_state addrspace(4)* %4, i32 0, i32 0
  %5 = load i32, i32* %kk, align 4
  %arrayidx = getelementptr inbounds [624 x i32], [624 x i32] addrspace(4)* %mt, i32 0, i32 %5
  %6 = load i32, i32 addrspace(4)* %arrayidx, align 4
  %and = and i32 %6, -2147483648
  %7 = load %struct.mt19937_state addrspace(4)*, %struct.mt19937_state addrspace(4)** %state.addr, align 4
  %mt2 = getelementptr inbounds %struct.mt19937_state, %struct.mt19937_state addrspace(4)* %7, i32 0, i32 0
  %8 = load i32, i32* %kk, align 4
  %add = add nsw i32 %8, 1
  %arrayidx3 = getelementptr inbounds [624 x i32], [624 x i32] addrspace(4)* %mt2, i32 0, i32 %add
  %9 = load i32, i32 addrspace(4)* %arrayidx3, align 4
  %and4 = and i32 %9, 2147483647
  %or = or i32 %and, %and4
  store i32 %or, i32* %y, align 4
  %10 = load %struct.mt19937_state addrspace(4)*, %struct.mt19937_state addrspace(4)** %state.addr, align 4
  %mt5 = getelementptr inbounds %struct.mt19937_state, %struct.mt19937_state addrspace(4)* %10, i32 0, i32 0
  %11 = load i32, i32* %kk, align 4
  %add6 = add nsw i32 %11, 397
  %arrayidx7 = getelementptr inbounds [624 x i32], [624 x i32] addrspace(4)* %mt5, i32 0, i32 %add6
  %12 = load i32, i32 addrspace(4)* %arrayidx7, align 4
  %13 = load i32, i32* %y, align 4
  %shr = lshr i32 %13, 1
  %xor = xor i32 %12, %shr
  %14 = load i32, i32* %y, align 4
  %and8 = and i32 %14, 1
  %arrayidx9 = getelementptr inbounds [2 x i32], [2 x i32]* %mag01, i32 0, i32 %and8
  %15 = load i32, i32* %arrayidx9, align 4
  %xor10 = xor i32 %xor, %15
  %16 = load %struct.mt19937_state addrspace(4)*, %struct.mt19937_state addrspace(4)** %state.addr, align 4
  %mt11 = getelementptr inbounds %struct.mt19937_state, %struct.mt19937_state addrspace(4)* %16, i32 0, i32 0
  %17 = load i32, i32* %kk, align 4
  %arrayidx12 = getelementptr inbounds [624 x i32], [624 x i32] addrspace(4)* %mt11, i32 0, i32 %17
  store i32 %xor10, i32 addrspace(4)* %arrayidx12, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %18 = load i32, i32* %kk, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %kk, align 4
  br label %for.cond, !llvm.loop !8

for.end:                                          ; preds = %for.cond
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc34, %for.end
  %19 = load i32, i32* %kk, align 4
  %cmp14 = icmp slt i32 %19, 623
  br i1 %cmp14, label %for.body15, label %for.end36

for.body15:                                       ; preds = %for.cond13
  %20 = load %struct.mt19937_state addrspace(4)*, %struct.mt19937_state addrspace(4)** %state.addr, align 4
  %mt16 = getelementptr inbounds %struct.mt19937_state, %struct.mt19937_state addrspace(4)* %20, i32 0, i32 0
  %21 = load i32, i32* %kk, align 4
  %arrayidx17 = getelementptr inbounds [624 x i32], [624 x i32] addrspace(4)* %mt16, i32 0, i32 %21
  %22 = load i32, i32 addrspace(4)* %arrayidx17, align 4
  %and18 = and i32 %22, -2147483648
  %23 = load %struct.mt19937_state addrspace(4)*, %struct.mt19937_state addrspace(4)** %state.addr, align 4
  %mt19 = getelementptr inbounds %struct.mt19937_state, %struct.mt19937_state addrspace(4)* %23, i32 0, i32 0
  %24 = load i32, i32* %kk, align 4
  %add20 = add nsw i32 %24, 1
  %arrayidx21 = getelementptr inbounds [624 x i32], [624 x i32] addrspace(4)* %mt19, i32 0, i32 %add20
  %25 = load i32, i32 addrspace(4)* %arrayidx21, align 4
  %and22 = and i32 %25, 2147483647
  %or23 = or i32 %and18, %and22
  store i32 %or23, i32* %y, align 4
  %26 = load %struct.mt19937_state addrspace(4)*, %struct.mt19937_state addrspace(4)** %state.addr, align 4
  %mt24 = getelementptr inbounds %struct.mt19937_state, %struct.mt19937_state addrspace(4)* %26, i32 0, i32 0
  %27 = load i32, i32* %kk, align 4
  %add25 = add nsw i32 %27, -227
  %arrayidx26 = getelementptr inbounds [624 x i32], [624 x i32] addrspace(4)* %mt24, i32 0, i32 %add25
  %28 = load i32, i32 addrspace(4)* %arrayidx26, align 4
  %29 = load i32, i32* %y, align 4
  %shr27 = lshr i32 %29, 1
  %xor28 = xor i32 %28, %shr27
  %30 = load i32, i32* %y, align 4
  %and29 = and i32 %30, 1
  %arrayidx30 = getelementptr inbounds [2 x i32], [2 x i32]* %mag01, i32 0, i32 %and29
  %31 = load i32, i32* %arrayidx30, align 4
  %xor31 = xor i32 %xor28, %31
  %32 = load %struct.mt19937_state addrspace(4)*, %struct.mt19937_state addrspace(4)** %state.addr, align 4
  %mt32 = getelementptr inbounds %struct.mt19937_state, %struct.mt19937_state addrspace(4)* %32, i32 0, i32 0
  %33 = load i32, i32* %kk, align 4
  %arrayidx33 = getelementptr inbounds [624 x i32], [624 x i32] addrspace(4)* %mt32, i32 0, i32 %33
  store i32 %xor31, i32 addrspace(4)* %arrayidx33, align 4
  br label %for.inc34

for.inc34:                                        ; preds = %for.body15
  %34 = load i32, i32* %kk, align 4
  %inc35 = add nsw i32 %34, 1
  store i32 %inc35, i32* %kk, align 4
  br label %for.cond13, !llvm.loop !9

for.end36:                                        ; preds = %for.cond13
  %35 = load %struct.mt19937_state addrspace(4)*, %struct.mt19937_state addrspace(4)** %state.addr, align 4
  %mt37 = getelementptr inbounds %struct.mt19937_state, %struct.mt19937_state addrspace(4)* %35, i32 0, i32 0
  %arrayidx38 = getelementptr inbounds [624 x i32], [624 x i32] addrspace(4)* %mt37, i32 0, i32 623
  %36 = load i32, i32 addrspace(4)* %arrayidx38, align 4
  %and39 = and i32 %36, -2147483648
  %37 = load %struct.mt19937_state addrspace(4)*, %struct.mt19937_state addrspace(4)** %state.addr, align 4
  %mt40 = getelementptr inbounds %struct.mt19937_state, %struct.mt19937_state addrspace(4)* %37, i32 0, i32 0
  %arrayidx41 = getelementptr inbounds [624 x i32], [624 x i32] addrspace(4)* %mt40, i32 0, i32 0
  %38 = load i32, i32 addrspace(4)* %arrayidx41, align 4
  %and42 = and i32 %38, 2147483647
  %or43 = or i32 %and39, %and42
  store i32 %or43, i32* %y, align 4
  %39 = load %struct.mt19937_state addrspace(4)*, %struct.mt19937_state addrspace(4)** %state.addr, align 4
  %mt44 = getelementptr inbounds %struct.mt19937_state, %struct.mt19937_state addrspace(4)* %39, i32 0, i32 0
  %arrayidx45 = getelementptr inbounds [624 x i32], [624 x i32] addrspace(4)* %mt44, i32 0, i32 396
  %40 = load i32, i32 addrspace(4)* %arrayidx45, align 4
  %41 = load i32, i32* %y, align 4
  %shr46 = lshr i32 %41, 1
  %xor47 = xor i32 %40, %shr46
  %42 = load i32, i32* %y, align 4
  %and48 = and i32 %42, 1
  %arrayidx49 = getelementptr inbounds [2 x i32], [2 x i32]* %mag01, i32 0, i32 %and48
  %43 = load i32, i32* %arrayidx49, align 4
  %xor50 = xor i32 %xor47, %43
  %44 = load %struct.mt19937_state addrspace(4)*, %struct.mt19937_state addrspace(4)** %state.addr, align 4
  %mt51 = getelementptr inbounds %struct.mt19937_state, %struct.mt19937_state addrspace(4)* %44, i32 0, i32 0
  %arrayidx52 = getelementptr inbounds [624 x i32], [624 x i32] addrspace(4)* %mt51, i32 0, i32 623
  store i32 %xor50, i32 addrspace(4)* %arrayidx52, align 4
  %45 = load %struct.mt19937_state addrspace(4)*, %struct.mt19937_state addrspace(4)** %state.addr, align 4
  %mti53 = getelementptr inbounds %struct.mt19937_state, %struct.mt19937_state addrspace(4)* %45, i32 0, i32 1
  store i32 0, i32 addrspace(4)* %mti53, align 4
  br label %if.end

if.end:                                           ; preds = %for.end36, %entry
  %46 = load %struct.mt19937_state addrspace(4)*, %struct.mt19937_state addrspace(4)** %state.addr, align 4
  %mt54 = getelementptr inbounds %struct.mt19937_state, %struct.mt19937_state addrspace(4)* %46, i32 0, i32 0
  %47 = load %struct.mt19937_state addrspace(4)*, %struct.mt19937_state addrspace(4)** %state.addr, align 4
  %mti55 = getelementptr inbounds %struct.mt19937_state, %struct.mt19937_state addrspace(4)* %47, i32 0, i32 1
  %48 = load i32, i32 addrspace(4)* %mti55, align 4
  %inc56 = add nsw i32 %48, 1
  store i32 %inc56, i32 addrspace(4)* %mti55, align 4
  %arrayidx57 = getelementptr inbounds [624 x i32], [624 x i32] addrspace(4)* %mt54, i32 0, i32 %48
  %49 = load i32, i32 addrspace(4)* %arrayidx57, align 4
  store i32 %49, i32* %y, align 4
  %50 = load i32, i32* %y, align 4
  %shr58 = lshr i32 %50, 11
  %51 = load i32, i32* %y, align 4
  %xor59 = xor i32 %51, %shr58
  store i32 %xor59, i32* %y, align 4
  %52 = load i32, i32* %y, align 4
  %shl = shl i32 %52, 7
  %and60 = and i32 %shl, -1658038656
  %53 = load i32, i32* %y, align 4
  %xor61 = xor i32 %53, %and60
  store i32 %xor61, i32* %y, align 4
  %54 = load i32, i32* %y, align 4
  %shl62 = shl i32 %54, 15
  %and63 = and i32 %shl62, -272236544
  %55 = load i32, i32* %y, align 4
  %xor64 = xor i32 %55, %and63
  store i32 %xor64, i32* %y, align 4
  %56 = load i32, i32* %y, align 4
  %shr65 = lshr i32 %56, 18
  %57 = load i32, i32* %y, align 4
  %xor66 = xor i32 %57, %shr65
  store i32 %xor66, i32* %y, align 4
  %58 = load i32, i32* %y, align 4
  ret i32 %58
}

; Function Attrs: convergent mustprogress norecurse nounwind
define dso_local spir_func void @_Z12mt19937_seedPU3AS413mt19937_statej(%struct.mt19937_state addrspace(4)* %state, i32 %s) #0 {
entry:
  %state.addr = alloca %struct.mt19937_state addrspace(4)*, align 4
  %s.addr = alloca i32, align 4
  %mti = alloca i32, align 4
  store %struct.mt19937_state addrspace(4)* %state, %struct.mt19937_state addrspace(4)** %state.addr, align 4
  store i32 %s, i32* %s.addr, align 4
  %0 = load i32, i32* %s.addr, align 4
  %1 = load %struct.mt19937_state addrspace(4)*, %struct.mt19937_state addrspace(4)** %state.addr, align 4
  %mt = getelementptr inbounds %struct.mt19937_state, %struct.mt19937_state addrspace(4)* %1, i32 0, i32 0
  %arrayidx = getelementptr inbounds [624 x i32], [624 x i32] addrspace(4)* %mt, i32 0, i32 0
  store i32 %0, i32 addrspace(4)* %arrayidx, align 4
  store i32 1, i32* %mti, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %mti, align 4
  %cmp = icmp ult i32 %2, 624
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.mt19937_state addrspace(4)*, %struct.mt19937_state addrspace(4)** %state.addr, align 4
  %mt1 = getelementptr inbounds %struct.mt19937_state, %struct.mt19937_state addrspace(4)* %3, i32 0, i32 0
  %4 = load i32, i32* %mti, align 4
  %sub = sub i32 %4, 1
  %arrayidx2 = getelementptr inbounds [624 x i32], [624 x i32] addrspace(4)* %mt1, i32 0, i32 %sub
  %5 = load i32, i32 addrspace(4)* %arrayidx2, align 4
  %6 = load %struct.mt19937_state addrspace(4)*, %struct.mt19937_state addrspace(4)** %state.addr, align 4
  %mt3 = getelementptr inbounds %struct.mt19937_state, %struct.mt19937_state addrspace(4)* %6, i32 0, i32 0
  %7 = load i32, i32* %mti, align 4
  %sub4 = sub i32 %7, 1
  %arrayidx5 = getelementptr inbounds [624 x i32], [624 x i32] addrspace(4)* %mt3, i32 0, i32 %sub4
  %8 = load i32, i32 addrspace(4)* %arrayidx5, align 4
  %shr = lshr i32 %8, 30
  %xor = xor i32 %5, %shr
  %mul = mul i32 1812433253, %xor
  %9 = load i32, i32* %mti, align 4
  %add = add i32 %mul, %9
  %10 = load %struct.mt19937_state addrspace(4)*, %struct.mt19937_state addrspace(4)** %state.addr, align 4
  %mt6 = getelementptr inbounds %struct.mt19937_state, %struct.mt19937_state addrspace(4)* %10, i32 0, i32 0
  %11 = load i32, i32* %mti, align 4
  %arrayidx7 = getelementptr inbounds [624 x i32], [624 x i32] addrspace(4)* %mt6, i32 0, i32 %11
  store i32 %add, i32 addrspace(4)* %arrayidx7, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %mti, align 4
  %inc = add i32 %12, 1
  store i32 %inc, i32* %mti, align 4
  br label %for.cond, !llvm.loop !10

for.end:                                          ; preds = %for.cond
  %13 = load i32, i32* %mti, align 4
  %14 = load %struct.mt19937_state addrspace(4)*, %struct.mt19937_state addrspace(4)** %state.addr, align 4
  %mti8 = getelementptr inbounds %struct.mt19937_state, %struct.mt19937_state addrspace(4)* %14, i32 0, i32 1
  store i32 %13, i32 addrspace(4)* %mti8, align 4
  ret void
}

; Function Attrs: convergent mustprogress norecurse nounwind
define dso_local spir_func i32 @_Z12_mwc64x_uintPU3AS412mwc64x_state(%union.mwc64x_state addrspace(4)* %s) #0 {
entry:
  %s.addr = alloca %union.mwc64x_state addrspace(4)*, align 4
  %res = alloca i32, align 4
  %X = alloca i32, align 4
  %C = alloca i32, align 4
  %Xn = alloca i32, align 4
  %carry = alloca i32, align 4
  %Cn = alloca i32, align 4
  store %union.mwc64x_state addrspace(4)* %s, %union.mwc64x_state addrspace(4)** %s.addr, align 4
  %0 = load %union.mwc64x_state addrspace(4)*, %union.mwc64x_state addrspace(4)** %s.addr, align 4
  %1 = bitcast %union.mwc64x_state addrspace(4)* %0 to %struct.anon addrspace(4)*
  %x = getelementptr inbounds %struct.anon, %struct.anon addrspace(4)* %1, i32 0, i32 0
  %2 = load i32, i32 addrspace(4)* %x, align 8
  %3 = load %union.mwc64x_state addrspace(4)*, %union.mwc64x_state addrspace(4)** %s.addr, align 4
  %4 = bitcast %union.mwc64x_state addrspace(4)* %3 to %struct.anon addrspace(4)*
  %c = getelementptr inbounds %struct.anon, %struct.anon addrspace(4)* %4, i32 0, i32 1
  %5 = load i32, i32 addrspace(4)* %c, align 4
  %xor = xor i32 %2, %5
  store i32 %xor, i32* %res, align 4
  %6 = load %union.mwc64x_state addrspace(4)*, %union.mwc64x_state addrspace(4)** %s.addr, align 4
  %7 = bitcast %union.mwc64x_state addrspace(4)* %6 to %struct.anon addrspace(4)*
  %x1 = getelementptr inbounds %struct.anon, %struct.anon addrspace(4)* %7, i32 0, i32 0
  %8 = load i32, i32 addrspace(4)* %x1, align 8
  store i32 %8, i32* %X, align 4
  %9 = load %union.mwc64x_state addrspace(4)*, %union.mwc64x_state addrspace(4)** %s.addr, align 4
  %10 = bitcast %union.mwc64x_state addrspace(4)* %9 to %struct.anon addrspace(4)*
  %c2 = getelementptr inbounds %struct.anon, %struct.anon addrspace(4)* %10, i32 0, i32 1
  %11 = load i32, i32 addrspace(4)* %c2, align 4
  store i32 %11, i32* %C, align 4
  %12 = load i32, i32* %X, align 4
  %mul = mul i32 -83941, %12
  %13 = load i32, i32* %C, align 4
  %add = add i32 %mul, %13
  store i32 %add, i32* %Xn, align 4
  %14 = load i32, i32* %Xn, align 4
  %15 = load i32, i32* %C, align 4
  %cmp = icmp ult i32 %14, %15
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %carry, align 4
  %16 = load i32, i32* %X, align 4
  %17 = load i32, i32* %carry, align 4
  %call = call spir_func i32 @_Z6mad_hijjj(i32 -83941, i32 %16, i32 %17) #7
  store i32 %call, i32* %Cn, align 4
  %18 = load i32, i32* %Xn, align 4
  %19 = load %union.mwc64x_state addrspace(4)*, %union.mwc64x_state addrspace(4)** %s.addr, align 4
  %20 = bitcast %union.mwc64x_state addrspace(4)* %19 to %struct.anon addrspace(4)*
  %x3 = getelementptr inbounds %struct.anon, %struct.anon addrspace(4)* %20, i32 0, i32 0
  store i32 %18, i32 addrspace(4)* %x3, align 8
  %21 = load i32, i32* %Cn, align 4
  %22 = load %union.mwc64x_state addrspace(4)*, %union.mwc64x_state addrspace(4)** %s.addr, align 4
  %23 = bitcast %union.mwc64x_state addrspace(4)* %22 to %struct.anon addrspace(4)*
  %c4 = getelementptr inbounds %struct.anon, %struct.anon addrspace(4)* %23, i32 0, i32 1
  store i32 %21, i32 addrspace(4)* %c4, align 4
  %24 = load i32, i32* %res, align 4
  ret i32 %24
}

; Function Attrs: convergent nounwind readnone willreturn
declare spir_func i32 @_Z6mad_hijjj(i32, i32, i32) #2

; Function Attrs: convergent mustprogress norecurse nounwind
define dso_local spir_func void @_Z11mwc64x_seedPU3AS412mwc64x_statem(%union.mwc64x_state addrspace(4)* %state, i64 %j) #0 {
entry:
  %state.addr = alloca %union.mwc64x_state addrspace(4)*, align 4
  %j.addr = alloca i64, align 8
  store %union.mwc64x_state addrspace(4)* %state, %union.mwc64x_state addrspace(4)** %state.addr, align 4
  store i64 %j, i64* %j.addr, align 8
  %0 = load i64, i64* %j.addr, align 8
  %1 = load %union.mwc64x_state addrspace(4)*, %union.mwc64x_state addrspace(4)** %state.addr, align 4
  %xc = bitcast %union.mwc64x_state addrspace(4)* %1 to i64 addrspace(4)*
  store i64 %0, i64 addrspace(4)* %xc, align 8
  ret void
}

; Function Attrs: convergent mustprogress norecurse nounwind
define dso_local spir_func i32 @_Z13_pcg6432_uintPU3AS4m(i64 addrspace(4)* %state) #0 {
entry:
  %state.addr = alloca i64 addrspace(4)*, align 4
  %oldstate = alloca i64, align 8
  %xorshifted = alloca i32, align 4
  %rot = alloca i32, align 4
  store i64 addrspace(4)* %state, i64 addrspace(4)** %state.addr, align 4
  %0 = load i64 addrspace(4)*, i64 addrspace(4)** %state.addr, align 4
  %1 = load i64, i64 addrspace(4)* %0, align 8
  store i64 %1, i64* %oldstate, align 8
  %2 = load i64, i64* %oldstate, align 8
  %mul = mul i64 %2, 6364136223846793005
  %add = add i64 %mul, -2720673578348880933
  %3 = load i64 addrspace(4)*, i64 addrspace(4)** %state.addr, align 4
  store i64 %add, i64 addrspace(4)* %3, align 8
  %4 = load i64, i64* %oldstate, align 8
  %shr = lshr i64 %4, 18
  %5 = load i64, i64* %oldstate, align 8
  %xor = xor i64 %shr, %5
  %shr1 = lshr i64 %xor, 27
  %conv = trunc i64 %shr1 to i32
  store i32 %conv, i32* %xorshifted, align 4
  %6 = load i64, i64* %oldstate, align 8
  %shr2 = lshr i64 %6, 59
  %conv3 = trunc i64 %shr2 to i32
  store i32 %conv3, i32* %rot, align 4
  %7 = load i32, i32* %xorshifted, align 4
  %8 = load i32, i32* %rot, align 4
  %shr.mask = and i32 %8, 31
  %shr4 = lshr i32 %7, %shr.mask
  %9 = load i32, i32* %xorshifted, align 4
  %10 = load i32, i32* %rot, align 4
  %sub = sub i32 0, %10
  %and = and i32 %sub, 31
  %shl.mask = and i32 %and, 31
  %shl = shl i32 %9, %shl.mask
  %or = or i32 %shr4, %shl
  ret i32 %or
}

; Function Attrs: convergent mustprogress norecurse nounwind
define dso_local spir_func void @_Z12pcg6432_seedPU3AS4mm(i64 addrspace(4)* %state, i64 %j) #0 {
entry:
  %state.addr = alloca i64 addrspace(4)*, align 4
  %j.addr = alloca i64, align 8
  store i64 addrspace(4)* %state, i64 addrspace(4)** %state.addr, align 4
  store i64 %j, i64* %j.addr, align 8
  %0 = load i64, i64* %j.addr, align 8
  %1 = load i64 addrspace(4)*, i64 addrspace(4)** %state.addr, align 4
  store i64 %0, i64 addrspace(4)* %1, align 8
  ret void
}

; Function Attrs: convergent mustprogress norecurse nounwind
define dso_local spir_func i64 @_Z13philox2x32_1019philox2x32_10_statej(%union.philox2x32_10_state* byval(%union.philox2x32_10_state) align 8 %state, i32 %key) #0 {
entry:
  %key.addr = alloca i32, align 4
  %tmp = alloca i32, align 4
  %L = alloca i32, align 4
  %R = alloca i32, align 4
  %i = alloca i32, align 4
  %tmp3 = alloca i32, align 4
  store i32 %key, i32* %key.addr, align 4
  %0 = bitcast %union.philox2x32_10_state* %state to %struct.anon.0*
  %L1 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %0, i32 0, i32 0
  %1 = load i32, i32* %L1, align 8
  store i32 %1, i32* %L, align 4
  %2 = bitcast %union.philox2x32_10_state* %state to %struct.anon.0*
  %R2 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %2, i32 0, i32 1
  %3 = load i32, i32* %R2, align 4
  store i32 %3, i32* %R, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %4, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %R, align 4
  %mul = mul i32 %5, -766062189
  store i32 %mul, i32* %tmp3, align 4
  %6 = load i32, i32* %R, align 4
  %call = call spir_func i32 @_Z6mul_hijj(i32 %6, i32 -766062189) #7
  %7 = load i32, i32* %L, align 4
  %xor = xor i32 %call, %7
  %8 = load i32, i32* %key.addr, align 4
  %xor4 = xor i32 %xor, %8
  store i32 %xor4, i32* %R, align 4
  %9 = load i32, i32* %tmp3, align 4
  store i32 %9, i32* %L, align 4
  %10 = load i32, i32* %key.addr, align 4
  %add = add i32 %10, -1640531527
  store i32 %add, i32* %key.addr, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4
  %inc = add i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond, !llvm.loop !11

for.end:                                          ; preds = %for.cond
  %12 = load i32, i32* %L, align 4
  %13 = bitcast %union.philox2x32_10_state* %state to %struct.anon.0*
  %L5 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %13, i32 0, i32 0
  store i32 %12, i32* %L5, align 8
  %14 = load i32, i32* %R, align 4
  %15 = bitcast %union.philox2x32_10_state* %state to %struct.anon.0*
  %R6 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %15, i32 0, i32 1
  store i32 %14, i32* %R6, align 4
  %LR = bitcast %union.philox2x32_10_state* %state to i64*
  %16 = load i64, i64* %LR, align 8
  ret i64 %16
}

; Function Attrs: convergent nounwind readnone willreturn
declare spir_func i32 @_Z6mul_hijj(i32, i32) #2

; Function Attrs: convergent mustprogress norecurse nounwind
define dso_local spir_func i64 @_Z20_philox2x32_10_ulongPU3AS419philox2x32_10_state(%union.philox2x32_10_state addrspace(4)* %state) #0 {
entry:
  %state.addr = alloca %union.philox2x32_10_state addrspace(4)*, align 4
  %agg.tmp = alloca %union.philox2x32_10_state, align 8
  store %union.philox2x32_10_state addrspace(4)* %state, %union.philox2x32_10_state addrspace(4)** %state.addr, align 4
  %0 = load %union.philox2x32_10_state addrspace(4)*, %union.philox2x32_10_state addrspace(4)** %state.addr, align 4
  %LR = bitcast %union.philox2x32_10_state addrspace(4)* %0 to i64 addrspace(4)*
  %1 = load i64, i64 addrspace(4)* %LR, align 8
  %inc = add i64 %1, 1
  store i64 %inc, i64 addrspace(4)* %LR, align 8
  %agg.tmp.ascast = addrspacecast %union.philox2x32_10_state* %agg.tmp to %union.philox2x32_10_state addrspace(4)*
  %2 = load %union.philox2x32_10_state addrspace(4)*, %union.philox2x32_10_state addrspace(4)** %state.addr, align 4
  %3 = bitcast %union.philox2x32_10_state* %agg.tmp to i8*
  %4 = bitcast %union.philox2x32_10_state addrspace(4)* %2 to i8 addrspace(4)*
  call void @llvm.memcpy.p0i8.p4i8.i32(i8* align 8 %3, i8 addrspace(4)* align 8 %4, i32 8, i1 false)
  %call = call spir_func i64 @_Z13philox2x32_1019philox2x32_10_statej(%union.philox2x32_10_state* byval(%union.philox2x32_10_state) align 8 %agg.tmp, i32 12345) #6
  ret i64 %call
}

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p4i8.i32(i8* noalias nocapture writeonly, i8 addrspace(4)* noalias nocapture readonly, i32, i1 immarg) #1

; Function Attrs: convergent mustprogress norecurse nounwind
define dso_local spir_func void @_Z18philox2x32_10_seedPU3AS419philox2x32_10_statem(%union.philox2x32_10_state addrspace(4)* %state, i64 %j) #0 {
entry:
  %state.addr = alloca %union.philox2x32_10_state addrspace(4)*, align 4
  %j.addr = alloca i64, align 8
  store %union.philox2x32_10_state addrspace(4)* %state, %union.philox2x32_10_state addrspace(4)** %state.addr, align 4
  store i64 %j, i64* %j.addr, align 8
  %0 = load i64, i64* %j.addr, align 8
  %1 = load %union.philox2x32_10_state addrspace(4)*, %union.philox2x32_10_state addrspace(4)** %state.addr, align 4
  %LR = bitcast %union.philox2x32_10_state addrspace(4)* %1 to i64 addrspace(4)*
  store i64 %0, i64 addrspace(4)* %LR, align 8
  ret void
}

; Function Attrs: convergent mustprogress norecurse nounwind
define dso_local spir_func i64 @_Z10_ran2_uintPU3AS410ran2_state(%struct.ran2_state addrspace(4)* %state) #0 {
entry:
  %state.addr = alloca %struct.ran2_state addrspace(4)*, align 4
  %k = alloca i32, align 4
  %j = alloca i16, align 2
  store %struct.ran2_state addrspace(4)* %state, %struct.ran2_state addrspace(4)** %state.addr, align 4
  %0 = load %struct.ran2_state addrspace(4)*, %struct.ran2_state addrspace(4)** %state.addr, align 4
  %idum = getelementptr inbounds %struct.ran2_state, %struct.ran2_state addrspace(4)* %0, i32 0, i32 0
  %1 = load i32, i32 addrspace(4)* %idum, align 4
  %div = sdiv i32 %1, 53668
  store i32 %div, i32* %k, align 4
  %2 = load %struct.ran2_state addrspace(4)*, %struct.ran2_state addrspace(4)** %state.addr, align 4
  %idum1 = getelementptr inbounds %struct.ran2_state, %struct.ran2_state addrspace(4)* %2, i32 0, i32 0
  %3 = load i32, i32 addrspace(4)* %idum1, align 4
  %4 = load i32, i32* %k, align 4
  %mul = mul nsw i32 %4, 53668
  %sub = sub nsw i32 %3, %mul
  %mul2 = mul nsw i32 40014, %sub
  %5 = load i32, i32* %k, align 4
  %mul3 = mul nsw i32 %5, 12211
  %sub4 = sub nsw i32 %mul2, %mul3
  %6 = load %struct.ran2_state addrspace(4)*, %struct.ran2_state addrspace(4)** %state.addr, align 4
  %idum5 = getelementptr inbounds %struct.ran2_state, %struct.ran2_state addrspace(4)* %6, i32 0, i32 0
  store i32 %sub4, i32 addrspace(4)* %idum5, align 4
  %7 = load %struct.ran2_state addrspace(4)*, %struct.ran2_state addrspace(4)** %state.addr, align 4
  %idum6 = getelementptr inbounds %struct.ran2_state, %struct.ran2_state addrspace(4)* %7, i32 0, i32 0
  %8 = load i32, i32 addrspace(4)* %idum6, align 4
  %cmp = icmp slt i32 %8, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %9 = load %struct.ran2_state addrspace(4)*, %struct.ran2_state addrspace(4)** %state.addr, align 4
  %idum7 = getelementptr inbounds %struct.ran2_state, %struct.ran2_state addrspace(4)* %9, i32 0, i32 0
  %10 = load i32, i32 addrspace(4)* %idum7, align 4
  %add = add nsw i32 %10, 2147483563
  store i32 %add, i32 addrspace(4)* %idum7, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %11 = load %struct.ran2_state addrspace(4)*, %struct.ran2_state addrspace(4)** %state.addr, align 4
  %idum2 = getelementptr inbounds %struct.ran2_state, %struct.ran2_state addrspace(4)* %11, i32 0, i32 1
  %12 = load i32, i32 addrspace(4)* %idum2, align 4
  %div8 = sdiv i32 %12, 52774
  store i32 %div8, i32* %k, align 4
  %13 = load %struct.ran2_state addrspace(4)*, %struct.ran2_state addrspace(4)** %state.addr, align 4
  %idum29 = getelementptr inbounds %struct.ran2_state, %struct.ran2_state addrspace(4)* %13, i32 0, i32 1
  %14 = load i32, i32 addrspace(4)* %idum29, align 4
  %15 = load i32, i32* %k, align 4
  %mul10 = mul nsw i32 %15, 52774
  %sub11 = sub nsw i32 %14, %mul10
  %mul12 = mul nsw i32 40692, %sub11
  %16 = load i32, i32* %k, align 4
  %mul13 = mul nsw i32 %16, 3791
  %sub14 = sub nsw i32 %mul12, %mul13
  %17 = load %struct.ran2_state addrspace(4)*, %struct.ran2_state addrspace(4)** %state.addr, align 4
  %idum215 = getelementptr inbounds %struct.ran2_state, %struct.ran2_state addrspace(4)* %17, i32 0, i32 1
  store i32 %sub14, i32 addrspace(4)* %idum215, align 4
  %18 = load %struct.ran2_state addrspace(4)*, %struct.ran2_state addrspace(4)** %state.addr, align 4
  %idum216 = getelementptr inbounds %struct.ran2_state, %struct.ran2_state addrspace(4)* %18, i32 0, i32 1
  %19 = load i32, i32 addrspace(4)* %idum216, align 4
  %cmp17 = icmp slt i32 %19, 0
  br i1 %cmp17, label %if.then18, label %if.end21

if.then18:                                        ; preds = %if.end
  %20 = load %struct.ran2_state addrspace(4)*, %struct.ran2_state addrspace(4)** %state.addr, align 4
  %idum219 = getelementptr inbounds %struct.ran2_state, %struct.ran2_state addrspace(4)* %20, i32 0, i32 1
  %21 = load i32, i32 addrspace(4)* %idum219, align 4
  %add20 = add nsw i32 %21, 2147483399
  store i32 %add20, i32 addrspace(4)* %idum219, align 4
  br label %if.end21

if.end21:                                         ; preds = %if.then18, %if.end
  %22 = load %struct.ran2_state addrspace(4)*, %struct.ran2_state addrspace(4)** %state.addr, align 4
  %iy = getelementptr inbounds %struct.ran2_state, %struct.ran2_state addrspace(4)* %22, i32 0, i32 2
  %23 = load i32, i32 addrspace(4)* %iy, align 4
  %div22 = sdiv i32 %23, 67108862
  %conv = trunc i32 %div22 to i16
  store i16 %conv, i16* %j, align 2
  %24 = load %struct.ran2_state addrspace(4)*, %struct.ran2_state addrspace(4)** %state.addr, align 4
  %iv = getelementptr inbounds %struct.ran2_state, %struct.ran2_state addrspace(4)* %24, i32 0, i32 3
  %25 = load i16, i16* %j, align 2
  %idxprom = sext i16 %25 to i32
  %arrayidx = getelementptr inbounds [32 x i32], [32 x i32] addrspace(4)* %iv, i32 0, i32 %idxprom
  %26 = load i32, i32 addrspace(4)* %arrayidx, align 4
  %27 = load %struct.ran2_state addrspace(4)*, %struct.ran2_state addrspace(4)** %state.addr, align 4
  %idum223 = getelementptr inbounds %struct.ran2_state, %struct.ran2_state addrspace(4)* %27, i32 0, i32 1
  %28 = load i32, i32 addrspace(4)* %idum223, align 4
  %sub24 = sub nsw i32 %26, %28
  %29 = load %struct.ran2_state addrspace(4)*, %struct.ran2_state addrspace(4)** %state.addr, align 4
  %iy25 = getelementptr inbounds %struct.ran2_state, %struct.ran2_state addrspace(4)* %29, i32 0, i32 2
  store i32 %sub24, i32 addrspace(4)* %iy25, align 4
  %30 = load %struct.ran2_state addrspace(4)*, %struct.ran2_state addrspace(4)** %state.addr, align 4
  %idum26 = getelementptr inbounds %struct.ran2_state, %struct.ran2_state addrspace(4)* %30, i32 0, i32 0
  %31 = load i32, i32 addrspace(4)* %idum26, align 4
  %32 = load %struct.ran2_state addrspace(4)*, %struct.ran2_state addrspace(4)** %state.addr, align 4
  %iv27 = getelementptr inbounds %struct.ran2_state, %struct.ran2_state addrspace(4)* %32, i32 0, i32 3
  %33 = load i16, i16* %j, align 2
  %idxprom28 = sext i16 %33 to i32
  %arrayidx29 = getelementptr inbounds [32 x i32], [32 x i32] addrspace(4)* %iv27, i32 0, i32 %idxprom28
  store i32 %31, i32 addrspace(4)* %arrayidx29, align 4
  %34 = load %struct.ran2_state addrspace(4)*, %struct.ran2_state addrspace(4)** %state.addr, align 4
  %iy30 = getelementptr inbounds %struct.ran2_state, %struct.ran2_state addrspace(4)* %34, i32 0, i32 2
  %35 = load i32, i32 addrspace(4)* %iy30, align 4
  %cmp31 = icmp slt i32 %35, 1
  br i1 %cmp31, label %if.then32, label %if.end35

if.then32:                                        ; preds = %if.end21
  %36 = load %struct.ran2_state addrspace(4)*, %struct.ran2_state addrspace(4)** %state.addr, align 4
  %iy33 = getelementptr inbounds %struct.ran2_state, %struct.ran2_state addrspace(4)* %36, i32 0, i32 2
  %37 = load i32, i32 addrspace(4)* %iy33, align 4
  %add34 = add nsw i32 %37, 2147483562
  store i32 %add34, i32 addrspace(4)* %iy33, align 4
  br label %if.end35

if.end35:                                         ; preds = %if.then32, %if.end21
  %38 = load %struct.ran2_state addrspace(4)*, %struct.ran2_state addrspace(4)** %state.addr, align 4
  %iy36 = getelementptr inbounds %struct.ran2_state, %struct.ran2_state addrspace(4)* %38, i32 0, i32 2
  %39 = load i32, i32 addrspace(4)* %iy36, align 4
  %conv37 = sext i32 %39 to i64
  ret i64 %conv37
}

; Function Attrs: convergent mustprogress norecurse nounwind
define dso_local spir_func void @_Z9ran2_seedPU3AS410ran2_statem(%struct.ran2_state addrspace(4)* %state, i64 %seed) #0 {
entry:
  %state.addr = alloca %struct.ran2_state addrspace(4)*, align 4
  %seed.addr = alloca i64, align 8
  %j = alloca i32, align 4
  %k = alloca i16, align 2
  store %struct.ran2_state addrspace(4)* %state, %struct.ran2_state addrspace(4)** %state.addr, align 4
  store i64 %seed, i64* %seed.addr, align 8
  %0 = load i64, i64* %seed.addr, align 8
  %cmp = icmp eq i64 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i64 1, i64* %seed.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load i64, i64* %seed.addr, align 8
  %conv = trunc i64 %1 to i32
  %2 = load %struct.ran2_state addrspace(4)*, %struct.ran2_state addrspace(4)** %state.addr, align 4
  %idum = getelementptr inbounds %struct.ran2_state, %struct.ran2_state addrspace(4)* %2, i32 0, i32 0
  store i32 %conv, i32 addrspace(4)* %idum, align 4
  %3 = load i64, i64* %seed.addr, align 8
  %shr = lshr i64 %3, 32
  %conv1 = trunc i64 %shr to i32
  %4 = load %struct.ran2_state addrspace(4)*, %struct.ran2_state addrspace(4)** %state.addr, align 4
  %idum2 = getelementptr inbounds %struct.ran2_state, %struct.ran2_state addrspace(4)* %4, i32 0, i32 1
  store i32 %conv1, i32 addrspace(4)* %idum2, align 4
  store i32 39, i32* %j, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %5 = load i32, i32* %j, align 4
  %cmp2 = icmp sge i32 %5, 0
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load %struct.ran2_state addrspace(4)*, %struct.ran2_state addrspace(4)** %state.addr, align 4
  %idum3 = getelementptr inbounds %struct.ran2_state, %struct.ran2_state addrspace(4)* %6, i32 0, i32 0
  %7 = load i32, i32 addrspace(4)* %idum3, align 4
  %div = sdiv i32 %7, 53668
  %conv4 = trunc i32 %div to i16
  store i16 %conv4, i16* %k, align 2
  %8 = load %struct.ran2_state addrspace(4)*, %struct.ran2_state addrspace(4)** %state.addr, align 4
  %idum5 = getelementptr inbounds %struct.ran2_state, %struct.ran2_state addrspace(4)* %8, i32 0, i32 0
  %9 = load i32, i32 addrspace(4)* %idum5, align 4
  %10 = load i16, i16* %k, align 2
  %conv6 = sext i16 %10 to i32
  %mul = mul nsw i32 %conv6, 53668
  %sub = sub nsw i32 %9, %mul
  %mul7 = mul nsw i32 40014, %sub
  %11 = load i16, i16* %k, align 2
  %conv8 = sext i16 %11 to i32
  %mul9 = mul nsw i32 %conv8, 12211
  %sub10 = sub nsw i32 %mul7, %mul9
  %12 = load %struct.ran2_state addrspace(4)*, %struct.ran2_state addrspace(4)** %state.addr, align 4
  %idum11 = getelementptr inbounds %struct.ran2_state, %struct.ran2_state addrspace(4)* %12, i32 0, i32 0
  store i32 %sub10, i32 addrspace(4)* %idum11, align 4
  %13 = load %struct.ran2_state addrspace(4)*, %struct.ran2_state addrspace(4)** %state.addr, align 4
  %idum12 = getelementptr inbounds %struct.ran2_state, %struct.ran2_state addrspace(4)* %13, i32 0, i32 0
  %14 = load i32, i32 addrspace(4)* %idum12, align 4
  %cmp13 = icmp slt i32 %14, 0
  br i1 %cmp13, label %if.then14, label %if.end16

if.then14:                                        ; preds = %for.body
  %15 = load %struct.ran2_state addrspace(4)*, %struct.ran2_state addrspace(4)** %state.addr, align 4
  %idum15 = getelementptr inbounds %struct.ran2_state, %struct.ran2_state addrspace(4)* %15, i32 0, i32 0
  %16 = load i32, i32 addrspace(4)* %idum15, align 4
  %add = add nsw i32 %16, 2147483563
  store i32 %add, i32 addrspace(4)* %idum15, align 4
  br label %if.end16

if.end16:                                         ; preds = %if.then14, %for.body
  %17 = load i32, i32* %j, align 4
  %cmp17 = icmp slt i32 %17, 32
  br i1 %cmp17, label %if.then18, label %if.end20

if.then18:                                        ; preds = %if.end16
  %18 = load %struct.ran2_state addrspace(4)*, %struct.ran2_state addrspace(4)** %state.addr, align 4
  %idum19 = getelementptr inbounds %struct.ran2_state, %struct.ran2_state addrspace(4)* %18, i32 0, i32 0
  %19 = load i32, i32 addrspace(4)* %idum19, align 4
  %20 = load %struct.ran2_state addrspace(4)*, %struct.ran2_state addrspace(4)** %state.addr, align 4
  %iv = getelementptr inbounds %struct.ran2_state, %struct.ran2_state addrspace(4)* %20, i32 0, i32 3
  %21 = load i32, i32* %j, align 4
  %arrayidx = getelementptr inbounds [32 x i32], [32 x i32] addrspace(4)* %iv, i32 0, i32 %21
  store i32 %19, i32 addrspace(4)* %arrayidx, align 4
  br label %if.end20

if.end20:                                         ; preds = %if.then18, %if.end16
  br label %for.inc

for.inc:                                          ; preds = %if.end20
  %22 = load i32, i32* %j, align 4
  %dec = add nsw i32 %22, -1
  store i32 %dec, i32* %j, align 4
  br label %for.cond, !llvm.loop !12

for.end:                                          ; preds = %for.cond
  %23 = load %struct.ran2_state addrspace(4)*, %struct.ran2_state addrspace(4)** %state.addr, align 4
  %iv21 = getelementptr inbounds %struct.ran2_state, %struct.ran2_state addrspace(4)* %23, i32 0, i32 3
  %arrayidx22 = getelementptr inbounds [32 x i32], [32 x i32] addrspace(4)* %iv21, i32 0, i32 0
  %24 = load i32, i32 addrspace(4)* %arrayidx22, align 4
  %25 = load %struct.ran2_state addrspace(4)*, %struct.ran2_state addrspace(4)** %state.addr, align 4
  %iy = getelementptr inbounds %struct.ran2_state, %struct.ran2_state addrspace(4)* %25, i32 0, i32 2
  store i32 %24, i32 addrspace(4)* %iy, align 4
  ret void
}

; Function Attrs: convergent mustprogress norecurse nounwind
define dso_local spir_func void @_Z13tinymt32_seedPU3AS412TINYMT32WP_Tm(%struct.TINYMT32WP_T addrspace(4)* %state, i64 %seed) #0 {
entry:
  %state.addr = alloca %struct.TINYMT32WP_T addrspace(4)*, align 4
  %seed.addr = alloca i64, align 8
  store %struct.TINYMT32WP_T addrspace(4)* %state, %struct.TINYMT32WP_T addrspace(4)** %state.addr, align 4
  store i64 %seed, i64* %seed.addr, align 8
  %0 = load %struct.TINYMT32WP_T addrspace(4)*, %struct.TINYMT32WP_T addrspace(4)** %state.addr, align 4
  %mat1 = getelementptr inbounds %struct.TINYMT32WP_T, %struct.TINYMT32WP_T addrspace(4)* %0, i32 0, i32 4
  store i32 -1888480786, i32 addrspace(4)* %mat1, align 4
  %1 = load %struct.TINYMT32WP_T addrspace(4)*, %struct.TINYMT32WP_T addrspace(4)** %state.addr, align 4
  %mat2 = getelementptr inbounds %struct.TINYMT32WP_T, %struct.TINYMT32WP_T addrspace(4)* %1, i32 0, i32 5
  store i32 -59179233, i32 addrspace(4)* %mat2, align 4
  %2 = load %struct.TINYMT32WP_T addrspace(4)*, %struct.TINYMT32WP_T addrspace(4)** %state.addr, align 4
  %tmat = getelementptr inbounds %struct.TINYMT32WP_T, %struct.TINYMT32WP_T addrspace(4)* %2, i32 0, i32 6
  store i32 932445695, i32 addrspace(4)* %tmat, align 4
  %3 = load %struct.TINYMT32WP_T addrspace(4)*, %struct.TINYMT32WP_T addrspace(4)** %state.addr, align 4
  %4 = load i64, i64* %seed.addr, align 8
  %conv = trunc i64 %4 to i32
  call spir_func void @_ZL13tinymt32_initPU3AS412TINYMT32WP_Tj(%struct.TINYMT32WP_T addrspace(4)* %3, i32 %conv) #6
  ret void
}

; Function Attrs: convergent inlinehint mustprogress norecurse nounwind
define internal spir_func void @_ZL13tinymt32_initPU3AS412TINYMT32WP_Tj(%struct.TINYMT32WP_T addrspace(4)* %tiny, i32 %seed) #3 {
entry:
  %tiny.addr = alloca %struct.TINYMT32WP_T addrspace(4)*, align 4
  %seed.addr = alloca i32, align 4
  %status = alloca [4 x i32], align 4
  %i = alloca i32, align 4
  %i15 = alloca i32, align 4
  store %struct.TINYMT32WP_T addrspace(4)* %tiny, %struct.TINYMT32WP_T addrspace(4)** %tiny.addr, align 4
  store i32 %seed, i32* %seed.addr, align 4
  %0 = load i32, i32* %seed.addr, align 4
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* %status, i32 0, i32 0
  store i32 %0, i32* %arrayidx, align 4
  %1 = load %struct.TINYMT32WP_T addrspace(4)*, %struct.TINYMT32WP_T addrspace(4)** %tiny.addr, align 4
  %mat1 = getelementptr inbounds %struct.TINYMT32WP_T, %struct.TINYMT32WP_T addrspace(4)* %1, i32 0, i32 4
  %2 = load i32, i32 addrspace(4)* %mat1, align 4
  %arrayidx1 = getelementptr inbounds [4 x i32], [4 x i32]* %status, i32 0, i32 1
  store i32 %2, i32* %arrayidx1, align 4
  %3 = load %struct.TINYMT32WP_T addrspace(4)*, %struct.TINYMT32WP_T addrspace(4)** %tiny.addr, align 4
  %mat2 = getelementptr inbounds %struct.TINYMT32WP_T, %struct.TINYMT32WP_T addrspace(4)* %3, i32 0, i32 5
  %4 = load i32, i32 addrspace(4)* %mat2, align 4
  %arrayidx2 = getelementptr inbounds [4 x i32], [4 x i32]* %status, i32 0, i32 2
  store i32 %4, i32* %arrayidx2, align 4
  %5 = load %struct.TINYMT32WP_T addrspace(4)*, %struct.TINYMT32WP_T addrspace(4)** %tiny.addr, align 4
  %tmat = getelementptr inbounds %struct.TINYMT32WP_T, %struct.TINYMT32WP_T addrspace(4)* %5, i32 0, i32 6
  %6 = load i32, i32 addrspace(4)* %tmat, align 4
  %arrayidx3 = getelementptr inbounds [4 x i32], [4 x i32]* %status, i32 0, i32 3
  store i32 %6, i32* %arrayidx3, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %7 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %7, 8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load i32, i32* %i, align 4
  %9 = load i32, i32* %i, align 4
  %sub = sub nsw i32 %9, 1
  %and = and i32 %sub, 3
  %arrayidx4 = getelementptr inbounds [4 x i32], [4 x i32]* %status, i32 0, i32 %and
  %10 = load i32, i32* %arrayidx4, align 4
  %11 = load i32, i32* %i, align 4
  %sub5 = sub nsw i32 %11, 1
  %and6 = and i32 %sub5, 3
  %arrayidx7 = getelementptr inbounds [4 x i32], [4 x i32]* %status, i32 0, i32 %and6
  %12 = load i32, i32* %arrayidx7, align 4
  %shr = lshr i32 %12, 30
  %xor = xor i32 %10, %shr
  %mul = mul i32 1812433253, %xor
  %add = add i32 %8, %mul
  %13 = load i32, i32* %i, align 4
  %and8 = and i32 %13, 3
  %arrayidx9 = getelementptr inbounds [4 x i32], [4 x i32]* %status, i32 0, i32 %and8
  %14 = load i32, i32* %arrayidx9, align 4
  %xor10 = xor i32 %14, %add
  store i32 %xor10, i32* %arrayidx9, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %15 = load i32, i32* %i, align 4
  %inc = add nsw i32 %15, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond, !llvm.loop !13

for.end:                                          ; preds = %for.cond
  %arrayidx11 = getelementptr inbounds [4 x i32], [4 x i32]* %status, i32 0, i32 0
  %16 = load i32, i32* %arrayidx11, align 4
  %17 = load %struct.TINYMT32WP_T addrspace(4)*, %struct.TINYMT32WP_T addrspace(4)** %tiny.addr, align 4
  %s0 = getelementptr inbounds %struct.TINYMT32WP_T, %struct.TINYMT32WP_T addrspace(4)* %17, i32 0, i32 0
  store i32 %16, i32 addrspace(4)* %s0, align 4
  %arrayidx12 = getelementptr inbounds [4 x i32], [4 x i32]* %status, i32 0, i32 1
  %18 = load i32, i32* %arrayidx12, align 4
  %19 = load %struct.TINYMT32WP_T addrspace(4)*, %struct.TINYMT32WP_T addrspace(4)** %tiny.addr, align 4
  %s1 = getelementptr inbounds %struct.TINYMT32WP_T, %struct.TINYMT32WP_T addrspace(4)* %19, i32 0, i32 1
  store i32 %18, i32 addrspace(4)* %s1, align 4
  %arrayidx13 = getelementptr inbounds [4 x i32], [4 x i32]* %status, i32 0, i32 2
  %20 = load i32, i32* %arrayidx13, align 4
  %21 = load %struct.TINYMT32WP_T addrspace(4)*, %struct.TINYMT32WP_T addrspace(4)** %tiny.addr, align 4
  %s2 = getelementptr inbounds %struct.TINYMT32WP_T, %struct.TINYMT32WP_T addrspace(4)* %21, i32 0, i32 2
  store i32 %20, i32 addrspace(4)* %s2, align 4
  %arrayidx14 = getelementptr inbounds [4 x i32], [4 x i32]* %status, i32 0, i32 3
  %22 = load i32, i32* %arrayidx14, align 4
  %23 = load %struct.TINYMT32WP_T addrspace(4)*, %struct.TINYMT32WP_T addrspace(4)** %tiny.addr, align 4
  %s3 = getelementptr inbounds %struct.TINYMT32WP_T, %struct.TINYMT32WP_T addrspace(4)* %23, i32 0, i32 3
  store i32 %22, i32 addrspace(4)* %s3, align 4
  %24 = load %struct.TINYMT32WP_T addrspace(4)*, %struct.TINYMT32WP_T addrspace(4)** %tiny.addr, align 4
  call spir_func void @_ZL29tinymt32_period_certificationPU3AS412TINYMT32WP_T(%struct.TINYMT32WP_T addrspace(4)* %24) #6
  store i32 0, i32* %i15, align 4
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc19, %for.end
  %25 = load i32, i32* %i15, align 4
  %cmp17 = icmp slt i32 %25, 8
  br i1 %cmp17, label %for.body18, label %for.end21

for.body18:                                       ; preds = %for.cond16
  %26 = load %struct.TINYMT32WP_T addrspace(4)*, %struct.TINYMT32WP_T addrspace(4)** %tiny.addr, align 4
  %call = call spir_func i32 @_ZL15tinymt32_uint32PU3AS412TINYMT32WP_T(%struct.TINYMT32WP_T addrspace(4)* %26) #6
  br label %for.inc19

for.inc19:                                        ; preds = %for.body18
  %27 = load i32, i32* %i15, align 4
  %inc20 = add nsw i32 %27, 1
  store i32 %inc20, i32* %i15, align 4
  br label %for.cond16, !llvm.loop !14

for.end21:                                        ; preds = %for.cond16
  ret void
}

; Function Attrs: convergent mustprogress norecurse nounwind
define dso_local spir_func void @_Z13tyche_advancePU3AS411tyche_state(%union.tyche_state addrspace(4)* %state) #0 {
entry:
  %state.addr = alloca %union.tyche_state addrspace(4)*, align 4
  store %union.tyche_state addrspace(4)* %state, %union.tyche_state addrspace(4)** %state.addr, align 4
  %0 = load %union.tyche_state addrspace(4)*, %union.tyche_state addrspace(4)** %state.addr, align 4
  %1 = bitcast %union.tyche_state addrspace(4)* %0 to %struct.anon.1 addrspace(4)*
  %b = getelementptr inbounds %struct.anon.1, %struct.anon.1 addrspace(4)* %1, i32 0, i32 1
  %2 = load i32, i32 addrspace(4)* %b, align 4
  %3 = load %union.tyche_state addrspace(4)*, %union.tyche_state addrspace(4)** %state.addr, align 4
  %4 = bitcast %union.tyche_state addrspace(4)* %3 to %struct.anon.1 addrspace(4)*
  %a = getelementptr inbounds %struct.anon.1, %struct.anon.1 addrspace(4)* %4, i32 0, i32 0
  %5 = load i32, i32 addrspace(4)* %a, align 8
  %add = add i32 %5, %2
  store i32 %add, i32 addrspace(4)* %a, align 8
  %6 = load %union.tyche_state addrspace(4)*, %union.tyche_state addrspace(4)** %state.addr, align 4
  %7 = bitcast %union.tyche_state addrspace(4)* %6 to %struct.anon.1 addrspace(4)*
  %d = getelementptr inbounds %struct.anon.1, %struct.anon.1 addrspace(4)* %7, i32 0, i32 3
  %8 = load i32, i32 addrspace(4)* %d, align 4
  %9 = load %union.tyche_state addrspace(4)*, %union.tyche_state addrspace(4)** %state.addr, align 4
  %10 = bitcast %union.tyche_state addrspace(4)* %9 to %struct.anon.1 addrspace(4)*
  %a1 = getelementptr inbounds %struct.anon.1, %struct.anon.1 addrspace(4)* %10, i32 0, i32 0
  %11 = load i32, i32 addrspace(4)* %a1, align 8
  %xor = xor i32 %8, %11
  %shl = shl i32 %xor, 16
  %12 = load %union.tyche_state addrspace(4)*, %union.tyche_state addrspace(4)** %state.addr, align 4
  %13 = bitcast %union.tyche_state addrspace(4)* %12 to %struct.anon.1 addrspace(4)*
  %d2 = getelementptr inbounds %struct.anon.1, %struct.anon.1 addrspace(4)* %13, i32 0, i32 3
  %14 = load i32, i32 addrspace(4)* %d2, align 4
  %15 = load %union.tyche_state addrspace(4)*, %union.tyche_state addrspace(4)** %state.addr, align 4
  %16 = bitcast %union.tyche_state addrspace(4)* %15 to %struct.anon.1 addrspace(4)*
  %a3 = getelementptr inbounds %struct.anon.1, %struct.anon.1 addrspace(4)* %16, i32 0, i32 0
  %17 = load i32, i32 addrspace(4)* %a3, align 8
  %xor4 = xor i32 %14, %17
  %shr = lshr i32 %xor4, 16
  %or = or i32 %shl, %shr
  %18 = load %union.tyche_state addrspace(4)*, %union.tyche_state addrspace(4)** %state.addr, align 4
  %19 = bitcast %union.tyche_state addrspace(4)* %18 to %struct.anon.1 addrspace(4)*
  %d5 = getelementptr inbounds %struct.anon.1, %struct.anon.1 addrspace(4)* %19, i32 0, i32 3
  store i32 %or, i32 addrspace(4)* %d5, align 4
  %20 = load %union.tyche_state addrspace(4)*, %union.tyche_state addrspace(4)** %state.addr, align 4
  %21 = bitcast %union.tyche_state addrspace(4)* %20 to %struct.anon.1 addrspace(4)*
  %d6 = getelementptr inbounds %struct.anon.1, %struct.anon.1 addrspace(4)* %21, i32 0, i32 3
  %22 = load i32, i32 addrspace(4)* %d6, align 4
  %23 = load %union.tyche_state addrspace(4)*, %union.tyche_state addrspace(4)** %state.addr, align 4
  %24 = bitcast %union.tyche_state addrspace(4)* %23 to %struct.anon.1 addrspace(4)*
  %c = getelementptr inbounds %struct.anon.1, %struct.anon.1 addrspace(4)* %24, i32 0, i32 2
  %25 = load i32, i32 addrspace(4)* %c, align 8
  %add7 = add i32 %25, %22
  store i32 %add7, i32 addrspace(4)* %c, align 8
  %26 = load %union.tyche_state addrspace(4)*, %union.tyche_state addrspace(4)** %state.addr, align 4
  %27 = bitcast %union.tyche_state addrspace(4)* %26 to %struct.anon.1 addrspace(4)*
  %b8 = getelementptr inbounds %struct.anon.1, %struct.anon.1 addrspace(4)* %27, i32 0, i32 1
  %28 = load i32, i32 addrspace(4)* %b8, align 4
  %29 = load %union.tyche_state addrspace(4)*, %union.tyche_state addrspace(4)** %state.addr, align 4
  %30 = bitcast %union.tyche_state addrspace(4)* %29 to %struct.anon.1 addrspace(4)*
  %c9 = getelementptr inbounds %struct.anon.1, %struct.anon.1 addrspace(4)* %30, i32 0, i32 2
  %31 = load i32, i32 addrspace(4)* %c9, align 8
  %xor10 = xor i32 %28, %31
  %shl11 = shl i32 %xor10, 12
  %32 = load %union.tyche_state addrspace(4)*, %union.tyche_state addrspace(4)** %state.addr, align 4
  %33 = bitcast %union.tyche_state addrspace(4)* %32 to %struct.anon.1 addrspace(4)*
  %b12 = getelementptr inbounds %struct.anon.1, %struct.anon.1 addrspace(4)* %33, i32 0, i32 1
  %34 = load i32, i32 addrspace(4)* %b12, align 4
  %35 = load %union.tyche_state addrspace(4)*, %union.tyche_state addrspace(4)** %state.addr, align 4
  %36 = bitcast %union.tyche_state addrspace(4)* %35 to %struct.anon.1 addrspace(4)*
  %c13 = getelementptr inbounds %struct.anon.1, %struct.anon.1 addrspace(4)* %36, i32 0, i32 2
  %37 = load i32, i32 addrspace(4)* %c13, align 8
  %xor14 = xor i32 %34, %37
  %shr15 = lshr i32 %xor14, 20
  %or16 = or i32 %shl11, %shr15
  %38 = load %union.tyche_state addrspace(4)*, %union.tyche_state addrspace(4)** %state.addr, align 4
  %39 = bitcast %union.tyche_state addrspace(4)* %38 to %struct.anon.1 addrspace(4)*
  %b17 = getelementptr inbounds %struct.anon.1, %struct.anon.1 addrspace(4)* %39, i32 0, i32 1
  store i32 %or16, i32 addrspace(4)* %b17, align 4
  %40 = load %union.tyche_state addrspace(4)*, %union.tyche_state addrspace(4)** %state.addr, align 4
  %41 = bitcast %union.tyche_state addrspace(4)* %40 to %struct.anon.1 addrspace(4)*
  %b18 = getelementptr inbounds %struct.anon.1, %struct.anon.1 addrspace(4)* %41, i32 0, i32 1
  %42 = load i32, i32 addrspace(4)* %b18, align 4
  %43 = load %union.tyche_state addrspace(4)*, %union.tyche_state addrspace(4)** %state.addr, align 4
  %44 = bitcast %union.tyche_state addrspace(4)* %43 to %struct.anon.1 addrspace(4)*
  %a19 = getelementptr inbounds %struct.anon.1, %struct.anon.1 addrspace(4)* %44, i32 0, i32 0
  %45 = load i32, i32 addrspace(4)* %a19, align 8
  %add20 = add i32 %45, %42
  store i32 %add20, i32 addrspace(4)* %a19, align 8
  %46 = load %union.tyche_state addrspace(4)*, %union.tyche_state addrspace(4)** %state.addr, align 4
  %47 = bitcast %union.tyche_state addrspace(4)* %46 to %struct.anon.1 addrspace(4)*
  %d21 = getelementptr inbounds %struct.anon.1, %struct.anon.1 addrspace(4)* %47, i32 0, i32 3
  %48 = load i32, i32 addrspace(4)* %d21, align 4
  %49 = load %union.tyche_state addrspace(4)*, %union.tyche_state addrspace(4)** %state.addr, align 4
  %50 = bitcast %union.tyche_state addrspace(4)* %49 to %struct.anon.1 addrspace(4)*
  %a22 = getelementptr inbounds %struct.anon.1, %struct.anon.1 addrspace(4)* %50, i32 0, i32 0
  %51 = load i32, i32 addrspace(4)* %a22, align 8
  %xor23 = xor i32 %48, %51
  %shl24 = shl i32 %xor23, 8
  %52 = load %union.tyche_state addrspace(4)*, %union.tyche_state addrspace(4)** %state.addr, align 4
  %53 = bitcast %union.tyche_state addrspace(4)* %52 to %struct.anon.1 addrspace(4)*
  %d25 = getelementptr inbounds %struct.anon.1, %struct.anon.1 addrspace(4)* %53, i32 0, i32 3
  %54 = load i32, i32 addrspace(4)* %d25, align 4
  %55 = load %union.tyche_state addrspace(4)*, %union.tyche_state addrspace(4)** %state.addr, align 4
  %56 = bitcast %union.tyche_state addrspace(4)* %55 to %struct.anon.1 addrspace(4)*
  %a26 = getelementptr inbounds %struct.anon.1, %struct.anon.1 addrspace(4)* %56, i32 0, i32 0
  %57 = load i32, i32 addrspace(4)* %a26, align 8
  %xor27 = xor i32 %54, %57
  %shr28 = lshr i32 %xor27, 24
  %or29 = or i32 %shl24, %shr28
  %58 = load %union.tyche_state addrspace(4)*, %union.tyche_state addrspace(4)** %state.addr, align 4
  %59 = bitcast %union.tyche_state addrspace(4)* %58 to %struct.anon.1 addrspace(4)*
  %d30 = getelementptr inbounds %struct.anon.1, %struct.anon.1 addrspace(4)* %59, i32 0, i32 3
  store i32 %or29, i32 addrspace(4)* %d30, align 4
  %60 = load %union.tyche_state addrspace(4)*, %union.tyche_state addrspace(4)** %state.addr, align 4
  %61 = bitcast %union.tyche_state addrspace(4)* %60 to %struct.anon.1 addrspace(4)*
  %d31 = getelementptr inbounds %struct.anon.1, %struct.anon.1 addrspace(4)* %61, i32 0, i32 3
  %62 = load i32, i32 addrspace(4)* %d31, align 4
  %63 = load %union.tyche_state addrspace(4)*, %union.tyche_state addrspace(4)** %state.addr, align 4
  %64 = bitcast %union.tyche_state addrspace(4)* %63 to %struct.anon.1 addrspace(4)*
  %c32 = getelementptr inbounds %struct.anon.1, %struct.anon.1 addrspace(4)* %64, i32 0, i32 2
  %65 = load i32, i32 addrspace(4)* %c32, align 8
  %add33 = add i32 %65, %62
  store i32 %add33, i32 addrspace(4)* %c32, align 8
  %66 = load %union.tyche_state addrspace(4)*, %union.tyche_state addrspace(4)** %state.addr, align 4
  %67 = bitcast %union.tyche_state addrspace(4)* %66 to %struct.anon.1 addrspace(4)*
  %b34 = getelementptr inbounds %struct.anon.1, %struct.anon.1 addrspace(4)* %67, i32 0, i32 1
  %68 = load i32, i32 addrspace(4)* %b34, align 4
  %69 = load %union.tyche_state addrspace(4)*, %union.tyche_state addrspace(4)** %state.addr, align 4
  %70 = bitcast %union.tyche_state addrspace(4)* %69 to %struct.anon.1 addrspace(4)*
  %c35 = getelementptr inbounds %struct.anon.1, %struct.anon.1 addrspace(4)* %70, i32 0, i32 2
  %71 = load i32, i32 addrspace(4)* %c35, align 8
  %xor36 = xor i32 %68, %71
  %shl37 = shl i32 %xor36, 7
  %72 = load %union.tyche_state addrspace(4)*, %union.tyche_state addrspace(4)** %state.addr, align 4
  %73 = bitcast %union.tyche_state addrspace(4)* %72 to %struct.anon.1 addrspace(4)*
  %b38 = getelementptr inbounds %struct.anon.1, %struct.anon.1 addrspace(4)* %73, i32 0, i32 1
  %74 = load i32, i32 addrspace(4)* %b38, align 4
  %75 = load %union.tyche_state addrspace(4)*, %union.tyche_state addrspace(4)** %state.addr, align 4
  %76 = bitcast %union.tyche_state addrspace(4)* %75 to %struct.anon.1 addrspace(4)*
  %c39 = getelementptr inbounds %struct.anon.1, %struct.anon.1 addrspace(4)* %76, i32 0, i32 2
  %77 = load i32, i32 addrspace(4)* %c39, align 8
  %xor40 = xor i32 %74, %77
  %shr41 = lshr i32 %xor40, 25
  %or42 = or i32 %shl37, %shr41
  %78 = load %union.tyche_state addrspace(4)*, %union.tyche_state addrspace(4)** %state.addr, align 4
  %79 = bitcast %union.tyche_state addrspace(4)* %78 to %struct.anon.1 addrspace(4)*
  %b43 = getelementptr inbounds %struct.anon.1, %struct.anon.1 addrspace(4)* %79, i32 0, i32 1
  store i32 %or42, i32 addrspace(4)* %b43, align 4
  ret void
}

; Function Attrs: convergent mustprogress norecurse nounwind
define dso_local spir_func void @_Z10tyche_seedPU3AS411tyche_statem(%union.tyche_state addrspace(4)* %state, i64 %seed) #0 {
entry:
  %state.addr = alloca %union.tyche_state addrspace(4)*, align 4
  %seed.addr = alloca i64, align 8
  %i = alloca i32, align 4
  store %union.tyche_state addrspace(4)* %state, %union.tyche_state addrspace(4)** %state.addr, align 4
  store i64 %seed, i64* %seed.addr, align 8
  %0 = load i64, i64* %seed.addr, align 8
  %shr = lshr i64 %0, 32
  %conv = trunc i64 %shr to i32
  %1 = load %union.tyche_state addrspace(4)*, %union.tyche_state addrspace(4)** %state.addr, align 4
  %2 = bitcast %union.tyche_state addrspace(4)* %1 to %struct.anon.1 addrspace(4)*
  %a = getelementptr inbounds %struct.anon.1, %struct.anon.1 addrspace(4)* %2, i32 0, i32 0
  store i32 %conv, i32 addrspace(4)* %a, align 8
  %3 = load i64, i64* %seed.addr, align 8
  %conv1 = trunc i64 %3 to i32
  %4 = load %union.tyche_state addrspace(4)*, %union.tyche_state addrspace(4)** %state.addr, align 4
  %5 = bitcast %union.tyche_state addrspace(4)* %4 to %struct.anon.1 addrspace(4)*
  %b = getelementptr inbounds %struct.anon.1, %struct.anon.1 addrspace(4)* %5, i32 0, i32 1
  store i32 %conv1, i32 addrspace(4)* %b, align 4
  %6 = load %union.tyche_state addrspace(4)*, %union.tyche_state addrspace(4)** %state.addr, align 4
  %7 = bitcast %union.tyche_state addrspace(4)* %6 to %struct.anon.1 addrspace(4)*
  %c = getelementptr inbounds %struct.anon.1, %struct.anon.1 addrspace(4)* %7, i32 0, i32 2
  store i32 -1640531527, i32 addrspace(4)* %c, align 8
  %call = call spir_func i32 @_Z13get_global_idj(i32 0) #7
  %call2 = call spir_func i32 @_Z15get_global_sizej(i32 0) #7
  %call3 = call spir_func i32 @_Z13get_global_idj(i32 1) #7
  %call4 = call spir_func i32 @_Z15get_global_sizej(i32 1) #7
  %call5 = call spir_func i32 @_Z13get_global_idj(i32 2) #7
  %mul = mul i32 %call4, %call5
  %add = add i32 %call3, %mul
  %mul6 = mul i32 %call2, %add
  %add7 = add i32 %call, %mul6
  %xor = xor i32 1367130551, %add7
  %8 = load %union.tyche_state addrspace(4)*, %union.tyche_state addrspace(4)** %state.addr, align 4
  %9 = bitcast %union.tyche_state addrspace(4)* %8 to %struct.anon.1 addrspace(4)*
  %d = getelementptr inbounds %struct.anon.1, %struct.anon.1 addrspace(4)* %9, i32 0, i32 3
  store i32 %xor, i32 addrspace(4)* %d, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %10 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %10, 20
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load %union.tyche_state addrspace(4)*, %union.tyche_state addrspace(4)** %state.addr, align 4
  call spir_func void @_Z13tyche_advancePU3AS411tyche_state(%union.tyche_state addrspace(4)* %11) #6
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %i, align 4
  %inc = add i32 %12, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond, !llvm.loop !15

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: convergent nounwind readnone willreturn
declare spir_func i32 @_Z13get_global_idj(i32) #2

; Function Attrs: convergent nounwind readnone willreturn
declare spir_func i32 @_Z15get_global_sizej(i32) #2

; Function Attrs: convergent mustprogress norecurse nounwind
define dso_local spir_func i32 @_Z13_well512_uintPU3AS413well512_state(%struct.well512_state addrspace(4)* %state) #0 {
entry:
  %state.addr = alloca %struct.well512_state addrspace(4)*, align 4
  %z0 = alloca i32, align 4
  %z1 = alloca i32, align 4
  %z2 = alloca i32, align 4
  store %struct.well512_state addrspace(4)* %state, %struct.well512_state addrspace(4)** %state.addr, align 4
  %0 = load %struct.well512_state addrspace(4)*, %struct.well512_state addrspace(4)** %state.addr, align 4
  %s = getelementptr inbounds %struct.well512_state, %struct.well512_state addrspace(4)* %0, i32 0, i32 0
  %1 = load %struct.well512_state addrspace(4)*, %struct.well512_state addrspace(4)** %state.addr, align 4
  %i = getelementptr inbounds %struct.well512_state, %struct.well512_state addrspace(4)* %1, i32 0, i32 1
  %2 = load i32, i32 addrspace(4)* %i, align 4
  %add = add i32 %2, 15
  %and = and i32 %add, 15
  %arrayidx = getelementptr inbounds [16 x i32], [16 x i32] addrspace(4)* %s, i32 0, i32 %and
  %3 = load i32, i32 addrspace(4)* %arrayidx, align 4
  store i32 %3, i32* %z0, align 4
  %4 = load %struct.well512_state addrspace(4)*, %struct.well512_state addrspace(4)** %state.addr, align 4
  %s1 = getelementptr inbounds %struct.well512_state, %struct.well512_state addrspace(4)* %4, i32 0, i32 0
  %5 = load %struct.well512_state addrspace(4)*, %struct.well512_state addrspace(4)** %state.addr, align 4
  %i2 = getelementptr inbounds %struct.well512_state, %struct.well512_state addrspace(4)* %5, i32 0, i32 1
  %6 = load i32, i32 addrspace(4)* %i2, align 4
  %arrayidx3 = getelementptr inbounds [16 x i32], [16 x i32] addrspace(4)* %s1, i32 0, i32 %6
  %7 = load i32, i32 addrspace(4)* %arrayidx3, align 4
  %8 = load %struct.well512_state addrspace(4)*, %struct.well512_state addrspace(4)** %state.addr, align 4
  %s4 = getelementptr inbounds %struct.well512_state, %struct.well512_state addrspace(4)* %8, i32 0, i32 0
  %9 = load %struct.well512_state addrspace(4)*, %struct.well512_state addrspace(4)** %state.addr, align 4
  %i5 = getelementptr inbounds %struct.well512_state, %struct.well512_state addrspace(4)* %9, i32 0, i32 1
  %10 = load i32, i32 addrspace(4)* %i5, align 4
  %arrayidx6 = getelementptr inbounds [16 x i32], [16 x i32] addrspace(4)* %s4, i32 0, i32 %10
  %11 = load i32, i32 addrspace(4)* %arrayidx6, align 4
  %shl = shl i32 %11, 16
  %xor = xor i32 %7, %shl
  %12 = load %struct.well512_state addrspace(4)*, %struct.well512_state addrspace(4)** %state.addr, align 4
  %s7 = getelementptr inbounds %struct.well512_state, %struct.well512_state addrspace(4)* %12, i32 0, i32 0
  %13 = load %struct.well512_state addrspace(4)*, %struct.well512_state addrspace(4)** %state.addr, align 4
  %i8 = getelementptr inbounds %struct.well512_state, %struct.well512_state addrspace(4)* %13, i32 0, i32 1
  %14 = load i32, i32 addrspace(4)* %i8, align 4
  %add9 = add i32 %14, 13
  %and10 = and i32 %add9, 15
  %arrayidx11 = getelementptr inbounds [16 x i32], [16 x i32] addrspace(4)* %s7, i32 0, i32 %and10
  %15 = load i32, i32 addrspace(4)* %arrayidx11, align 4
  %16 = load %struct.well512_state addrspace(4)*, %struct.well512_state addrspace(4)** %state.addr, align 4
  %s12 = getelementptr inbounds %struct.well512_state, %struct.well512_state addrspace(4)* %16, i32 0, i32 0
  %17 = load %struct.well512_state addrspace(4)*, %struct.well512_state addrspace(4)** %state.addr, align 4
  %i13 = getelementptr inbounds %struct.well512_state, %struct.well512_state addrspace(4)* %17, i32 0, i32 1
  %18 = load i32, i32 addrspace(4)* %i13, align 4
  %add14 = add i32 %18, 13
  %and15 = and i32 %add14, 15
  %arrayidx16 = getelementptr inbounds [16 x i32], [16 x i32] addrspace(4)* %s12, i32 0, i32 %and15
  %19 = load i32, i32 addrspace(4)* %arrayidx16, align 4
  %shl17 = shl i32 %19, 15
  %xor18 = xor i32 %15, %shl17
  %xor19 = xor i32 %xor, %xor18
  store i32 %xor19, i32* %z1, align 4
  %20 = load %struct.well512_state addrspace(4)*, %struct.well512_state addrspace(4)** %state.addr, align 4
  %s20 = getelementptr inbounds %struct.well512_state, %struct.well512_state addrspace(4)* %20, i32 0, i32 0
  %21 = load %struct.well512_state addrspace(4)*, %struct.well512_state addrspace(4)** %state.addr, align 4
  %i21 = getelementptr inbounds %struct.well512_state, %struct.well512_state addrspace(4)* %21, i32 0, i32 1
  %22 = load i32, i32 addrspace(4)* %i21, align 4
  %add22 = add i32 %22, 9
  %and23 = and i32 %add22, 15
  %arrayidx24 = getelementptr inbounds [16 x i32], [16 x i32] addrspace(4)* %s20, i32 0, i32 %and23
  %23 = load i32, i32 addrspace(4)* %arrayidx24, align 4
  %24 = load %struct.well512_state addrspace(4)*, %struct.well512_state addrspace(4)** %state.addr, align 4
  %s25 = getelementptr inbounds %struct.well512_state, %struct.well512_state addrspace(4)* %24, i32 0, i32 0
  %25 = load %struct.well512_state addrspace(4)*, %struct.well512_state addrspace(4)** %state.addr, align 4
  %i26 = getelementptr inbounds %struct.well512_state, %struct.well512_state addrspace(4)* %25, i32 0, i32 1
  %26 = load i32, i32 addrspace(4)* %i26, align 4
  %add27 = add i32 %26, 9
  %and28 = and i32 %add27, 15
  %arrayidx29 = getelementptr inbounds [16 x i32], [16 x i32] addrspace(4)* %s25, i32 0, i32 %and28
  %27 = load i32, i32 addrspace(4)* %arrayidx29, align 4
  %shr = lshr i32 %27, 11
  %xor30 = xor i32 %23, %shr
  store i32 %xor30, i32* %z2, align 4
  %28 = load i32, i32* %z1, align 4
  %29 = load i32, i32* %z2, align 4
  %xor31 = xor i32 %28, %29
  %30 = load %struct.well512_state addrspace(4)*, %struct.well512_state addrspace(4)** %state.addr, align 4
  %s32 = getelementptr inbounds %struct.well512_state, %struct.well512_state addrspace(4)* %30, i32 0, i32 0
  %31 = load %struct.well512_state addrspace(4)*, %struct.well512_state addrspace(4)** %state.addr, align 4
  %i33 = getelementptr inbounds %struct.well512_state, %struct.well512_state addrspace(4)* %31, i32 0, i32 1
  %32 = load i32, i32 addrspace(4)* %i33, align 4
  %arrayidx34 = getelementptr inbounds [16 x i32], [16 x i32] addrspace(4)* %s32, i32 0, i32 %32
  store i32 %xor31, i32 addrspace(4)* %arrayidx34, align 4
  %33 = load i32, i32* %z0, align 4
  %34 = load i32, i32* %z0, align 4
  %shl35 = shl i32 %34, 2
  %xor36 = xor i32 %33, %shl35
  %35 = load i32, i32* %z1, align 4
  %36 = load i32, i32* %z1, align 4
  %shl37 = shl i32 %36, 18
  %xor38 = xor i32 %35, %shl37
  %xor39 = xor i32 %xor36, %xor38
  %37 = load i32, i32* %z2, align 4
  %shl40 = shl i32 %37, 28
  %xor41 = xor i32 %xor39, %shl40
  %38 = load %struct.well512_state addrspace(4)*, %struct.well512_state addrspace(4)** %state.addr, align 4
  %s42 = getelementptr inbounds %struct.well512_state, %struct.well512_state addrspace(4)* %38, i32 0, i32 0
  %39 = load %struct.well512_state addrspace(4)*, %struct.well512_state addrspace(4)** %state.addr, align 4
  %i43 = getelementptr inbounds %struct.well512_state, %struct.well512_state addrspace(4)* %39, i32 0, i32 1
  %40 = load i32, i32 addrspace(4)* %i43, align 4
  %arrayidx44 = getelementptr inbounds [16 x i32], [16 x i32] addrspace(4)* %s42, i32 0, i32 %40
  %41 = load i32, i32 addrspace(4)* %arrayidx44, align 4
  %42 = load %struct.well512_state addrspace(4)*, %struct.well512_state addrspace(4)** %state.addr, align 4
  %s45 = getelementptr inbounds %struct.well512_state, %struct.well512_state addrspace(4)* %42, i32 0, i32 0
  %43 = load %struct.well512_state addrspace(4)*, %struct.well512_state addrspace(4)** %state.addr, align 4
  %i46 = getelementptr inbounds %struct.well512_state, %struct.well512_state addrspace(4)* %43, i32 0, i32 1
  %44 = load i32, i32 addrspace(4)* %i46, align 4
  %arrayidx47 = getelementptr inbounds [16 x i32], [16 x i32] addrspace(4)* %s45, i32 0, i32 %44
  %45 = load i32, i32 addrspace(4)* %arrayidx47, align 4
  %shl48 = shl i32 %45, 5
  %and49 = and i32 %shl48, -633066204
  %xor50 = xor i32 %41, %and49
  %xor51 = xor i32 %xor41, %xor50
  %46 = load %struct.well512_state addrspace(4)*, %struct.well512_state addrspace(4)** %state.addr, align 4
  %s52 = getelementptr inbounds %struct.well512_state, %struct.well512_state addrspace(4)* %46, i32 0, i32 0
  %47 = load %struct.well512_state addrspace(4)*, %struct.well512_state addrspace(4)** %state.addr, align 4
  %i53 = getelementptr inbounds %struct.well512_state, %struct.well512_state addrspace(4)* %47, i32 0, i32 1
  %48 = load i32, i32 addrspace(4)* %i53, align 4
  %add54 = add i32 %48, 15
  %and55 = and i32 %add54, 15
  %arrayidx56 = getelementptr inbounds [16 x i32], [16 x i32] addrspace(4)* %s52, i32 0, i32 %and55
  store i32 %xor51, i32 addrspace(4)* %arrayidx56, align 4
  %49 = load %struct.well512_state addrspace(4)*, %struct.well512_state addrspace(4)** %state.addr, align 4
  %i57 = getelementptr inbounds %struct.well512_state, %struct.well512_state addrspace(4)* %49, i32 0, i32 1
  %50 = load i32, i32 addrspace(4)* %i57, align 4
  %add58 = add i32 %50, 15
  %and59 = and i32 %add58, 15
  %51 = load %struct.well512_state addrspace(4)*, %struct.well512_state addrspace(4)** %state.addr, align 4
  %i60 = getelementptr inbounds %struct.well512_state, %struct.well512_state addrspace(4)* %51, i32 0, i32 1
  store i32 %and59, i32 addrspace(4)* %i60, align 4
  %52 = load %struct.well512_state addrspace(4)*, %struct.well512_state addrspace(4)** %state.addr, align 4
  %s61 = getelementptr inbounds %struct.well512_state, %struct.well512_state addrspace(4)* %52, i32 0, i32 0
  %53 = load %struct.well512_state addrspace(4)*, %struct.well512_state addrspace(4)** %state.addr, align 4
  %i62 = getelementptr inbounds %struct.well512_state, %struct.well512_state addrspace(4)* %53, i32 0, i32 1
  %54 = load i32, i32 addrspace(4)* %i62, align 4
  %arrayidx63 = getelementptr inbounds [16 x i32], [16 x i32] addrspace(4)* %s61, i32 0, i32 %54
  %55 = load i32, i32 addrspace(4)* %arrayidx63, align 4
  ret i32 %55
}

; Function Attrs: convergent mustprogress norecurse nounwind
define dso_local spir_func void @_Z12well512_seedPU3AS413well512_statem(%struct.well512_state addrspace(4)* %state, i64 %j) #0 {
entry:
  %state.addr = alloca %struct.well512_state addrspace(4)*, align 4
  %j.addr = alloca i64, align 8
  %i1 = alloca i32, align 4
  store %struct.well512_state addrspace(4)* %state, %struct.well512_state addrspace(4)** %state.addr, align 4
  store i64 %j, i64* %j.addr, align 8
  %0 = load %struct.well512_state addrspace(4)*, %struct.well512_state addrspace(4)** %state.addr, align 4
  %i = getelementptr inbounds %struct.well512_state, %struct.well512_state addrspace(4)* %0, i32 0, i32 1
  store i32 0, i32 addrspace(4)* %i, align 4
  store i32 0, i32* %i1, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i1, align 4
  %cmp = icmp slt i32 %1, 16
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i64, i64* %j.addr, align 8
  %mul = mul i64 6906969069, %2
  %add = add i64 %mul, 1234567
  store i64 %add, i64* %j.addr, align 8
  %3 = load i64, i64* %j.addr, align 8
  %conv = trunc i64 %3 to i32
  %4 = load %struct.well512_state addrspace(4)*, %struct.well512_state addrspace(4)** %state.addr, align 4
  %s = getelementptr inbounds %struct.well512_state, %struct.well512_state addrspace(4)* %4, i32 0, i32 0
  %5 = load i32, i32* %i1, align 4
  %arrayidx = getelementptr inbounds [16 x i32], [16 x i32] addrspace(4)* %s, i32 0, i32 %5
  store i32 %conv, i32 addrspace(4)* %arrayidx, align 4
  %6 = load i64, i64* %j.addr, align 8
  %shr = lshr i64 %6, 32
  %conv2 = trunc i64 %shr to i32
  %7 = load %struct.well512_state addrspace(4)*, %struct.well512_state addrspace(4)** %state.addr, align 4
  %s3 = getelementptr inbounds %struct.well512_state, %struct.well512_state addrspace(4)* %7, i32 0, i32 0
  %8 = load i32, i32* %i1, align 4
  %add4 = add nsw i32 %8, 1
  %arrayidx5 = getelementptr inbounds [16 x i32], [16 x i32] addrspace(4)* %s3, i32 0, i32 %add4
  store i32 %conv2, i32 addrspace(4)* %arrayidx5, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i1, align 4
  %add6 = add nsw i32 %9, 2
  store i32 %add6, i32* %i1, align 4
  br label %for.cond, !llvm.loop !16

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: convergent mustprogress norecurse nounwind
define dso_local spir_func void @_Z15countPopulationPU3AS4jS0_j(i32 addrspace(4)* %x_traj, i32 addrspace(4)* %v_next, i32 %t) #0 {
entry:
  %x_traj.addr = alloca i32 addrspace(4)*, align 4
  %v_next.addr = alloca i32 addrspace(4)*, align 4
  %t.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 addrspace(4)* %x_traj, i32 addrspace(4)** %x_traj.addr, align 4
  store i32 addrspace(4)* %v_next, i32 addrspace(4)** %v_next.addr, align 4
  store i32 %t, i32* %t.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 100
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32 addrspace(4)*, i32 addrspace(4)** %v_next.addr, align 4
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32 addrspace(4)* %1, i32 %2
  %3 = load i32, i32 addrspace(4)* %arrayidx, align 4
  %cmp1 = icmp eq i32 %3, 1
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %4 = load i32 addrspace(4)*, i32 addrspace(4)** %x_traj.addr, align 4
  %5 = load i32, i32* %t.addr, align 4
  %mul = mul i32 3, %5
  %arrayidx2 = getelementptr inbounds i32, i32 addrspace(4)* %4, i32 %mul
  %6 = load i32, i32 addrspace(4)* %arrayidx2, align 4
  %add = add i32 %6, 1
  store i32 %add, i32 addrspace(4)* %arrayidx2, align 4
  br label %if.end19

if.else:                                          ; preds = %for.body
  %7 = load i32 addrspace(4)*, i32 addrspace(4)** %v_next.addr, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx3 = getelementptr inbounds i32, i32 addrspace(4)* %7, i32 %8
  %9 = load i32, i32 addrspace(4)* %arrayidx3, align 4
  %cmp4 = icmp eq i32 %9, 2
  br i1 %cmp4, label %if.then5, label %if.else10

if.then5:                                         ; preds = %if.else
  %10 = load i32 addrspace(4)*, i32 addrspace(4)** %x_traj.addr, align 4
  %11 = load i32, i32* %t.addr, align 4
  %mul6 = mul i32 3, %11
  %add7 = add i32 %mul6, 1
  %arrayidx8 = getelementptr inbounds i32, i32 addrspace(4)* %10, i32 %add7
  %12 = load i32, i32 addrspace(4)* %arrayidx8, align 4
  %add9 = add i32 %12, 1
  store i32 %add9, i32 addrspace(4)* %arrayidx8, align 4
  br label %if.end18

if.else10:                                        ; preds = %if.else
  %13 = load i32 addrspace(4)*, i32 addrspace(4)** %v_next.addr, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds i32, i32 addrspace(4)* %13, i32 %14
  %15 = load i32, i32 addrspace(4)* %arrayidx11, align 4
  %cmp12 = icmp eq i32 %15, 3
  br i1 %cmp12, label %if.then13, label %if.end

if.then13:                                        ; preds = %if.else10
  %16 = load i32 addrspace(4)*, i32 addrspace(4)** %x_traj.addr, align 4
  %17 = load i32, i32* %t.addr, align 4
  %mul14 = mul i32 3, %17
  %add15 = add i32 %mul14, 2
  %arrayidx16 = getelementptr inbounds i32, i32 addrspace(4)* %16, i32 %add15
  %18 = load i32, i32 addrspace(4)* %arrayidx16, align 4
  %add17 = add i32 %18, 1
  store i32 %add17, i32 addrspace(4)* %arrayidx16, align 4
  br label %if.end

if.end:                                           ; preds = %if.then13, %if.else10
  br label %if.end18

if.end18:                                         ; preds = %if.end, %if.then5
  br label %if.end19

if.end19:                                         ; preds = %if.end18, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end19
  %19 = load i32, i32* %i, align 4
  %inc = add i32 %19, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond, !llvm.loop !17

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: convergent mustprogress norecurse nounwind
define dso_local spir_kernel void @SIR_Compute_Network(i32 addrspace(2)* align 4 %v0, i32 addrspace(2)* align 4 %source_nodes, i32 addrspace(2)* align 4 %target_nodes, float %bernoulli_p_I, float %bernoulli_p_R, i64 addrspace(2)* align 8 %seed, i32 addrspace(1)* align 4 %v_traj_g, i32 addrspace(1)* align 4 %x_traj_g) #4 !kernel_arg_addr_space !18 !kernel_arg_access_qual !19 !kernel_arg_type !20 !kernel_arg_base_type !20 !kernel_arg_type_qual !21 {
entry:
  %v0.addr = alloca i32 addrspace(2)*, align 4
  %source_nodes.addr = alloca i32 addrspace(2)*, align 4
  %target_nodes.addr = alloca i32 addrspace(2)*, align 4
  %bernoulli_p_I.addr = alloca float, align 4
  %bernoulli_p_R.addr = alloca float, align 4
  %seed.addr = alloca i64 addrspace(2)*, align 4
  %v_traj_g.addr = alloca i32 addrspace(1)*, align 4
  %x_traj_g.addr = alloca i32 addrspace(1)*, align 4
  %gID = alloca i32, align 4
  %rng = alloca %struct.PRNG_LCG6432, align 8
  %x_traj = alloca [300 x i32], align 4
  %v_traj = alloca [10100 x i32], align 4
  %t = alloca i32, align 4
  %v_current = alloca i32 addrspace(4)*, align 4
  %v_next = alloca i32 addrspace(4)*, align 4
  %i = alloca i32, align 4
  %i14 = alloca i32, align 4
  %source_current = alloca i32 addrspace(4)*, align 4
  %target_current = alloca i32 addrspace(4)*, align 4
  %source_next = alloca i32 addrspace(4)*, align 4
  %target_next = alloca i32 addrspace(4)*, align 4
  store i32 addrspace(2)* %v0, i32 addrspace(2)** %v0.addr, align 4
  store i32 addrspace(2)* %source_nodes, i32 addrspace(2)** %source_nodes.addr, align 4
  store i32 addrspace(2)* %target_nodes, i32 addrspace(2)** %target_nodes.addr, align 4
  store float %bernoulli_p_I, float* %bernoulli_p_I.addr, align 4
  store float %bernoulli_p_R, float* %bernoulli_p_R.addr, align 4
  store i64 addrspace(2)* %seed, i64 addrspace(2)** %seed.addr, align 4
  store i32 addrspace(1)* %v_traj_g, i32 addrspace(1)** %v_traj_g.addr, align 4
  store i32 addrspace(1)* %x_traj_g, i32 addrspace(1)** %x_traj_g.addr, align 4
  %call = call spir_func i32 @_Z13get_global_idj(i32 0) #7
  store i32 %call, i32* %gID, align 4
  %rng.ascast = addrspacecast %struct.PRNG_LCG6432* %rng to %struct.PRNG_LCG6432 addrspace(4)*
  %0 = load i64 addrspace(2)*, i64 addrspace(2)** %seed.addr, align 4
  %1 = load i32, i32* %gID, align 4
  %arrayidx = getelementptr inbounds i64, i64 addrspace(2)* %0, i32 %1
  call spir_func void @_ZNU3AS412PRNG_LCG6432C1ERU3AS2m(%struct.PRNG_LCG6432 addrspace(4)* nonnull align 8 dereferenceable(8) %rng.ascast, i64 addrspace(2)* align 8 dereferenceable(8) %arrayidx) #6
  %arraydecay = getelementptr inbounds [10100 x i32], [10100 x i32]* %v_traj, i32 0, i32 0
  %arraydecay.ascast = addrspacecast i32* %arraydecay to i32 addrspace(4)*
  %2 = load i32 addrspace(2)*, i32 addrspace(2)** %v0.addr, align 4
  call spir_func void @_Z11assignVec_gILj100EEvPU3AS4jPU3AS2j(i32 addrspace(4)* %arraydecay.ascast, i32 addrspace(2)* %2) #6
  %arraydecay1 = getelementptr inbounds [300 x i32], [300 x i32]* %x_traj, i32 0, i32 0
  %arraydecay1.ascast = addrspacecast i32* %arraydecay1 to i32 addrspace(4)*
  call spir_func void @_Z9assignVecILj300EEvPU3AS4jj(i32 addrspace(4)* %arraydecay1.ascast, i32 0) #6
  store i32 0, i32* %t, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc41, %entry
  %3 = load i32, i32* %t, align 4
  %cmp = icmp ult i32 %3, 100
  br i1 %cmp, label %for.body, label %for.end43

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %t, align 4
  %mul = mul i32 %4, 100
  %arrayidx2 = getelementptr inbounds [10100 x i32], [10100 x i32]* %v_traj, i32 0, i32 %mul
  %arrayidx2.ascast = addrspacecast i32* %arrayidx2 to i32 addrspace(4)*
  store i32 addrspace(4)* %arrayidx2.ascast, i32 addrspace(4)** %v_current, align 4
  %5 = load i32, i32* %t, align 4
  %add = add i32 %5, 1
  %mul3 = mul i32 %add, 100
  %arrayidx4 = getelementptr inbounds [10100 x i32], [10100 x i32]* %v_traj, i32 0, i32 %mul3
  %arrayidx4.ascast = addrspacecast i32* %arrayidx4 to i32 addrspace(4)*
  store i32 addrspace(4)* %arrayidx4.ascast, i32 addrspace(4)** %v_next, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc, %for.body
  %6 = load i32, i32* %i, align 4
  %cmp6 = icmp ult i32 %6, 100
  br i1 %cmp6, label %for.body7, label %for.end

for.body7:                                        ; preds = %for.cond5
  %7 = load i32 addrspace(4)*, i32 addrspace(4)** %v_current, align 4
  %8 = load i32, i32* %i, align 4
  %arrayidx8 = getelementptr inbounds i32, i32 addrspace(4)* %7, i32 %8
  %9 = load i32, i32 addrspace(4)* %arrayidx8, align 4
  %cmp9 = icmp eq i32 %9, 2
  br i1 %cmp9, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %for.body7
  %10 = load float, float* %bernoulli_p_R.addr, align 4
  %call10 = call spir_func zeroext i1 @_Z14BernoulliTrialI12PRNG_LCG6432EbRT_f(%struct.PRNG_LCG6432* nonnull align 8 dereferenceable(8) %rng, float %10) #6
  br i1 %call10, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %11 = load i32 addrspace(4)*, i32 addrspace(4)** %v_next, align 4
  %12 = load i32, i32* %i, align 4
  %arrayidx11 = getelementptr inbounds i32, i32 addrspace(4)* %11, i32 %12
  store i32 3, i32 addrspace(4)* %arrayidx11, align 4
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %for.body7
  %13 = load i32 addrspace(4)*, i32 addrspace(4)** %v_current, align 4
  %14 = load i32, i32* %i, align 4
  %arrayidx12 = getelementptr inbounds i32, i32 addrspace(4)* %13, i32 %14
  %15 = load i32, i32 addrspace(4)* %arrayidx12, align 4
  %16 = load i32 addrspace(4)*, i32 addrspace(4)** %v_next, align 4
  %17 = load i32, i32* %i, align 4
  %arrayidx13 = getelementptr inbounds i32, i32 addrspace(4)* %16, i32 %17
  store i32 %15, i32 addrspace(4)* %arrayidx13, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %18 = load i32, i32* %i, align 4
  %inc = add i32 %18, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond5, !llvm.loop !22

for.end:                                          ; preds = %for.cond5
  store i32 0, i32* %i14, align 4
  br label %for.cond15

for.cond15:                                       ; preds = %for.inc34, %for.end
  %19 = load i32, i32* %i14, align 4
  %cmp16 = icmp ult i32 %19, 1000
  br i1 %cmp16, label %for.body17, label %for.end36

for.body17:                                       ; preds = %for.cond15
  %20 = load i32 addrspace(4)*, i32 addrspace(4)** %v_current, align 4
  %21 = load i32 addrspace(2)*, i32 addrspace(2)** %source_nodes.addr, align 4
  %22 = load i32, i32* %i14, align 4
  %arrayidx18 = getelementptr inbounds i32, i32 addrspace(2)* %21, i32 %22
  %23 = load i32, i32 addrspace(2)* %arrayidx18, align 4
  %arrayidx19 = getelementptr inbounds i32, i32 addrspace(4)* %20, i32 %23
  store i32 addrspace(4)* %arrayidx19, i32 addrspace(4)** %source_current, align 4
  %24 = load i32 addrspace(4)*, i32 addrspace(4)** %v_current, align 4
  %25 = load i32 addrspace(2)*, i32 addrspace(2)** %target_nodes.addr, align 4
  %26 = load i32, i32* %i14, align 4
  %arrayidx20 = getelementptr inbounds i32, i32 addrspace(2)* %25, i32 %26
  %27 = load i32, i32 addrspace(2)* %arrayidx20, align 4
  %arrayidx21 = getelementptr inbounds i32, i32 addrspace(4)* %24, i32 %27
  store i32 addrspace(4)* %arrayidx21, i32 addrspace(4)** %target_current, align 4
  %28 = load i32 addrspace(4)*, i32 addrspace(4)** %v_next, align 4
  %29 = load i32 addrspace(2)*, i32 addrspace(2)** %source_nodes.addr, align 4
  %30 = load i32, i32* %i14, align 4
  %arrayidx22 = getelementptr inbounds i32, i32 addrspace(2)* %29, i32 %30
  %31 = load i32, i32 addrspace(2)* %arrayidx22, align 4
  %arrayidx23 = getelementptr inbounds i32, i32 addrspace(4)* %28, i32 %31
  store i32 addrspace(4)* %arrayidx23, i32 addrspace(4)** %source_next, align 4
  %32 = load i32 addrspace(4)*, i32 addrspace(4)** %v_next, align 4
  %33 = load i32 addrspace(2)*, i32 addrspace(2)** %target_nodes.addr, align 4
  %34 = load i32, i32* %i14, align 4
  %arrayidx24 = getelementptr inbounds i32, i32 addrspace(2)* %33, i32 %34
  %35 = load i32, i32 addrspace(2)* %arrayidx24, align 4
  %arrayidx25 = getelementptr inbounds i32, i32 addrspace(4)* %32, i32 %35
  store i32 addrspace(4)* %arrayidx25, i32 addrspace(4)** %target_next, align 4
  %36 = load i32 addrspace(4)*, i32 addrspace(4)** %source_current, align 4
  %37 = load i32, i32 addrspace(4)* %36, align 4
  %cmp26 = icmp eq i32 %37, 2
  br i1 %cmp26, label %land.lhs.true27, label %if.end33

land.lhs.true27:                                  ; preds = %for.body17
  %38 = load i32 addrspace(4)*, i32 addrspace(4)** %target_current, align 4
  %39 = load i32, i32 addrspace(4)* %38, align 4
  %cmp28 = icmp eq i32 %39, 1
  br i1 %cmp28, label %if.then29, label %if.end33

if.then29:                                        ; preds = %land.lhs.true27
  %40 = load float, float* %bernoulli_p_I.addr, align 4
  %call30 = call spir_func zeroext i1 @_Z14BernoulliTrialI12PRNG_LCG6432EbRT_f(%struct.PRNG_LCG6432* nonnull align 8 dereferenceable(8) %rng, float %40) #6
  br i1 %call30, label %if.then31, label %if.end32

if.then31:                                        ; preds = %if.then29
  %41 = load i32 addrspace(4)*, i32 addrspace(4)** %target_next, align 4
  store i32 2, i32 addrspace(4)* %41, align 4
  br label %if.end32

if.end32:                                         ; preds = %if.then31, %if.then29
  br label %if.end33

if.end33:                                         ; preds = %if.end32, %land.lhs.true27, %for.body17
  br label %for.inc34

for.inc34:                                        ; preds = %if.end33
  %42 = load i32, i32* %i14, align 4
  %inc35 = add i32 %42, 1
  store i32 %inc35, i32* %i14, align 4
  br label %for.cond15, !llvm.loop !23

for.end36:                                        ; preds = %for.cond15
  %arraydecay37 = getelementptr inbounds [300 x i32], [300 x i32]* %x_traj, i32 0, i32 0
  %arraydecay37.ascast = addrspacecast i32* %arraydecay37 to i32 addrspace(4)*
  %43 = load i32 addrspace(4)*, i32 addrspace(4)** %v_next, align 4
  %44 = load i32, i32* %t, align 4
  call spir_func void @_Z15countPopulationPU3AS4jS0_j(i32 addrspace(4)* %arraydecay37.ascast, i32 addrspace(4)* %43, i32 %44) #6
  %45 = load i32, i32* %gID, align 4
  %cmp38 = icmp eq i32 %45, 1
  br i1 %cmp38, label %if.then39, label %if.end40

if.then39:                                        ; preds = %for.end36
  br label %if.end40

if.end40:                                         ; preds = %if.then39, %for.end36
  br label %for.inc41

for.inc41:                                        ; preds = %if.end40
  %46 = load i32, i32* %t, align 4
  %inc42 = add i32 %46, 1
  store i32 %inc42, i32* %t, align 4
  br label %for.cond, !llvm.loop !24

for.end43:                                        ; preds = %for.cond
  %47 = load i32 addrspace(1)*, i32 addrspace(1)** %x_traj_g.addr, align 4
  %48 = load i32, i32* %gID, align 4
  %mul44 = mul i32 300, %48
  %arrayidx45 = getelementptr inbounds i32, i32 addrspace(1)* %47, i32 %mul44
  %arraydecay46 = getelementptr inbounds [300 x i32], [300 x i32]* %x_traj, i32 0, i32 0
  %arraydecay46.ascast = addrspacecast i32* %arraydecay46 to i32 addrspace(4)*
  call spir_func void @_Z11assignVec_gILj300EEvPU3AS1jPU3AS4j(i32 addrspace(1)* %arrayidx45, i32 addrspace(4)* %arraydecay46.ascast) #6
  %49 = load i32 addrspace(1)*, i32 addrspace(1)** %v_traj_g.addr, align 4
  %50 = load i32, i32* %gID, align 4
  %mul47 = mul i32 10000, %50
  %arrayidx48 = getelementptr inbounds i32, i32 addrspace(1)* %49, i32 %mul47
  %arrayidx49 = getelementptr inbounds [10100 x i32], [10100 x i32]* %v_traj, i32 0, i32 100
  %arrayidx49.ascast = addrspacecast i32* %arrayidx49 to i32 addrspace(4)*
  call spir_func void @_Z11assignVec_gILj10000EEvPU3AS1jPU3AS4j(i32 addrspace(1)* %arrayidx48, i32 addrspace(4)* %arrayidx49.ascast) #6
  ret void
}

; Function Attrs: convergent norecurse nounwind
define linkonce_odr spir_func void @_ZNU3AS412PRNG_LCG6432C1ERU3AS2m(%struct.PRNG_LCG6432 addrspace(4)* nonnull align 8 dereferenceable(8) %this, i64 addrspace(2)* align 8 dereferenceable(8) %seed) unnamed_addr #5 comdat align 2 {
entry:
  %this.addr = alloca %struct.PRNG_LCG6432 addrspace(4)*, align 4
  %seed.addr = alloca i64 addrspace(2)*, align 4
  store %struct.PRNG_LCG6432 addrspace(4)* %this, %struct.PRNG_LCG6432 addrspace(4)** %this.addr, align 4
  store i64 addrspace(2)* %seed, i64 addrspace(2)** %seed.addr, align 4
  %this1 = load %struct.PRNG_LCG6432 addrspace(4)*, %struct.PRNG_LCG6432 addrspace(4)** %this.addr, align 4
  %0 = load i64 addrspace(2)*, i64 addrspace(2)** %seed.addr, align 4
  call spir_func void @_ZNU3AS412PRNG_LCG6432C2ERU3AS2m(%struct.PRNG_LCG6432 addrspace(4)* nonnull align 8 dereferenceable(8) %this1, i64 addrspace(2)* align 8 dereferenceable(8) %0) #6
  ret void
}

; Function Attrs: convergent mustprogress norecurse nounwind
define linkonce_odr spir_func void @_Z11assignVec_gILj100EEvPU3AS4jPU3AS2j(i32 addrspace(4)* %a, i32 addrspace(2)* %b) #0 comdat {
entry:
  %a.addr = alloca i32 addrspace(4)*, align 4
  %b.addr = alloca i32 addrspace(2)*, align 4
  %i = alloca i32, align 4
  store i32 addrspace(4)* %a, i32 addrspace(4)** %a.addr, align 4
  store i32 addrspace(2)* %b, i32 addrspace(2)** %b.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 100
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32 addrspace(2)*, i32 addrspace(2)** %b.addr, align 4
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32 addrspace(2)* %1, i32 %2
  %3 = load i32, i32 addrspace(2)* %arrayidx, align 4
  %4 = load i32 addrspace(4)*, i32 addrspace(4)** %a.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds i32, i32 addrspace(4)* %4, i32 %5
  store i32 %3, i32 addrspace(4)* %arrayidx1, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond, !llvm.loop !25

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: convergent mustprogress norecurse nounwind
define linkonce_odr spir_func void @_Z9assignVecILj300EEvPU3AS4jj(i32 addrspace(4)* %a, i32 %b) #0 comdat {
entry:
  %a.addr = alloca i32 addrspace(4)*, align 4
  %b.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 addrspace(4)* %a, i32 addrspace(4)** %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 300
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %b.addr, align 4
  %2 = load i32 addrspace(4)*, i32 addrspace(4)** %a.addr, align 4
  %3 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32 addrspace(4)* %2, i32 %3
  store i32 %1, i32 addrspace(4)* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4
  %inc = add nsw i32 %4, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond, !llvm.loop !26

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: convergent mustprogress norecurse nounwind
define linkonce_odr spir_func zeroext i1 @_Z14BernoulliTrialI12PRNG_LCG6432EbRT_f(%struct.PRNG_LCG6432* nonnull align 8 dereferenceable(8) %rng, float %p) #0 comdat {
entry:
  %rng.addr = alloca %struct.PRNG_LCG6432*, align 4
  %p.addr = alloca float, align 4
  %r = alloca float, align 4
  store %struct.PRNG_LCG6432* %rng, %struct.PRNG_LCG6432** %rng.addr, align 4
  store float %p, float* %p.addr, align 4
  %0 = load %struct.PRNG_LCG6432*, %struct.PRNG_LCG6432** %rng.addr, align 4
  %call = call spir_func float @_Z13UniformSampleI12PRNG_LCG6432EfRT_(%struct.PRNG_LCG6432* nonnull align 8 dereferenceable(8) %0) #6
  store float %call, float* %r, align 4
  %1 = load float, float* %r, align 4
  %2 = load float, float* %p.addr, align 4
  %cmp = fcmp olt float %1, %2
  ret i1 %cmp
}

; Function Attrs: convergent mustprogress norecurse nounwind
define linkonce_odr spir_func void @_Z11assignVec_gILj300EEvPU3AS1jPU3AS4j(i32 addrspace(1)* %a, i32 addrspace(4)* %b) #0 comdat {
entry:
  %a.addr = alloca i32 addrspace(1)*, align 4
  %b.addr = alloca i32 addrspace(4)*, align 4
  %i = alloca i32, align 4
  store i32 addrspace(1)* %a, i32 addrspace(1)** %a.addr, align 4
  store i32 addrspace(4)* %b, i32 addrspace(4)** %b.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 300
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32 addrspace(4)*, i32 addrspace(4)** %b.addr, align 4
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32 addrspace(4)* %1, i32 %2
  %3 = load i32, i32 addrspace(4)* %arrayidx, align 4
  %4 = load i32 addrspace(1)*, i32 addrspace(1)** %a.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds i32, i32 addrspace(1)* %4, i32 %5
  store i32 %3, i32 addrspace(1)* %arrayidx1, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond, !llvm.loop !27

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: convergent mustprogress norecurse nounwind
define linkonce_odr spir_func void @_Z11assignVec_gILj10000EEvPU3AS1jPU3AS4j(i32 addrspace(1)* %a, i32 addrspace(4)* %b) #0 comdat {
entry:
  %a.addr = alloca i32 addrspace(1)*, align 4
  %b.addr = alloca i32 addrspace(4)*, align 4
  %i = alloca i32, align 4
  store i32 addrspace(1)* %a, i32 addrspace(1)** %a.addr, align 4
  store i32 addrspace(4)* %b, i32 addrspace(4)** %b.addr, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4
  %cmp = icmp ult i32 %0, 10000
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %1 = load i32 addrspace(4)*, i32 addrspace(4)** %b.addr, align 4
  %2 = load i32, i32* %i, align 4
  %arrayidx = getelementptr inbounds i32, i32 addrspace(4)* %1, i32 %2
  %3 = load i32, i32 addrspace(4)* %arrayidx, align 4
  %4 = load i32 addrspace(1)*, i32 addrspace(1)** %a.addr, align 4
  %5 = load i32, i32* %i, align 4
  %arrayidx1 = getelementptr inbounds i32, i32 addrspace(1)* %4, i32 %5
  store i32 %3, i32 addrspace(1)* %arrayidx1, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4
  %inc = add nsw i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond, !llvm.loop !28

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: convergent inlinehint mustprogress norecurse nounwind
define internal spir_func void @_ZL29tinymt32_period_certificationPU3AS412TINYMT32WP_T(%struct.TINYMT32WP_T addrspace(4)* %tiny) #3 {
entry:
  %tiny.addr = alloca %struct.TINYMT32WP_T addrspace(4)*, align 4
  store %struct.TINYMT32WP_T addrspace(4)* %tiny, %struct.TINYMT32WP_T addrspace(4)** %tiny.addr, align 4
  %0 = load %struct.TINYMT32WP_T addrspace(4)*, %struct.TINYMT32WP_T addrspace(4)** %tiny.addr, align 4
  %s0 = getelementptr inbounds %struct.TINYMT32WP_T, %struct.TINYMT32WP_T addrspace(4)* %0, i32 0, i32 0
  %1 = load i32, i32 addrspace(4)* %s0, align 4
  %2 = load i32, i32 addrspace(2)* @tinymt32_mask.const, align 4
  %and = and i32 %1, %2
  %cmp = icmp eq i32 %and, 0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.TINYMT32WP_T addrspace(4)*, %struct.TINYMT32WP_T addrspace(4)** %tiny.addr, align 4
  %s1 = getelementptr inbounds %struct.TINYMT32WP_T, %struct.TINYMT32WP_T addrspace(4)* %3, i32 0, i32 1
  %4 = load i32, i32 addrspace(4)* %s1, align 4
  %cmp1 = icmp eq i32 %4, 0
  br i1 %cmp1, label %land.lhs.true2, label %if.end

land.lhs.true2:                                   ; preds = %land.lhs.true
  %5 = load %struct.TINYMT32WP_T addrspace(4)*, %struct.TINYMT32WP_T addrspace(4)** %tiny.addr, align 4
  %s2 = getelementptr inbounds %struct.TINYMT32WP_T, %struct.TINYMT32WP_T addrspace(4)* %5, i32 0, i32 2
  %6 = load i32, i32 addrspace(4)* %s2, align 4
  %cmp3 = icmp eq i32 %6, 0
  br i1 %cmp3, label %land.lhs.true4, label %if.end

land.lhs.true4:                                   ; preds = %land.lhs.true2
  %7 = load %struct.TINYMT32WP_T addrspace(4)*, %struct.TINYMT32WP_T addrspace(4)** %tiny.addr, align 4
  %s3 = getelementptr inbounds %struct.TINYMT32WP_T, %struct.TINYMT32WP_T addrspace(4)* %7, i32 0, i32 3
  %8 = load i32, i32 addrspace(4)* %s3, align 4
  %cmp5 = icmp eq i32 %8, 0
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true4
  %9 = load %struct.TINYMT32WP_T addrspace(4)*, %struct.TINYMT32WP_T addrspace(4)** %tiny.addr, align 4
  %s06 = getelementptr inbounds %struct.TINYMT32WP_T, %struct.TINYMT32WP_T addrspace(4)* %9, i32 0, i32 0
  store i32 84, i32 addrspace(4)* %s06, align 4
  %10 = load %struct.TINYMT32WP_T addrspace(4)*, %struct.TINYMT32WP_T addrspace(4)** %tiny.addr, align 4
  %s17 = getelementptr inbounds %struct.TINYMT32WP_T, %struct.TINYMT32WP_T addrspace(4)* %10, i32 0, i32 1
  store i32 73, i32 addrspace(4)* %s17, align 4
  %11 = load %struct.TINYMT32WP_T addrspace(4)*, %struct.TINYMT32WP_T addrspace(4)** %tiny.addr, align 4
  %s28 = getelementptr inbounds %struct.TINYMT32WP_T, %struct.TINYMT32WP_T addrspace(4)* %11, i32 0, i32 2
  store i32 78, i32 addrspace(4)* %s28, align 4
  %12 = load %struct.TINYMT32WP_T addrspace(4)*, %struct.TINYMT32WP_T addrspace(4)** %tiny.addr, align 4
  %s39 = getelementptr inbounds %struct.TINYMT32WP_T, %struct.TINYMT32WP_T addrspace(4)* %12, i32 0, i32 3
  store i32 89, i32 addrspace(4)* %s39, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true4, %land.lhs.true2, %land.lhs.true, %entry
  ret void
}

; Function Attrs: convergent inlinehint mustprogress norecurse nounwind
define internal spir_func i32 @_ZL15tinymt32_uint32PU3AS412TINYMT32WP_T(%struct.TINYMT32WP_T addrspace(4)* %tiny) #3 {
entry:
  %tiny.addr = alloca %struct.TINYMT32WP_T addrspace(4)*, align 4
  store %struct.TINYMT32WP_T addrspace(4)* %tiny, %struct.TINYMT32WP_T addrspace(4)** %tiny.addr, align 4
  %0 = load %struct.TINYMT32WP_T addrspace(4)*, %struct.TINYMT32WP_T addrspace(4)** %tiny.addr, align 4
  call spir_func void @_ZL19tinymt32_next_statePU3AS412TINYMT32WP_T(%struct.TINYMT32WP_T addrspace(4)* %0) #6
  %1 = load %struct.TINYMT32WP_T addrspace(4)*, %struct.TINYMT32WP_T addrspace(4)** %tiny.addr, align 4
  %call = call spir_func i32 @_ZL15tinymt32_temperPU3AS412TINYMT32WP_T(%struct.TINYMT32WP_T addrspace(4)* %1) #6
  ret i32 %call
}

; Function Attrs: convergent inlinehint mustprogress norecurse nounwind
define internal spir_func void @_ZL19tinymt32_next_statePU3AS412TINYMT32WP_T(%struct.TINYMT32WP_T addrspace(4)* %tiny) #3 {
entry:
  %tiny.addr = alloca %struct.TINYMT32WP_T addrspace(4)*, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %t0 = alloca i32, align 4
  %t1 = alloca i32, align 4
  store %struct.TINYMT32WP_T addrspace(4)* %tiny, %struct.TINYMT32WP_T addrspace(4)** %tiny.addr, align 4
  %0 = load %struct.TINYMT32WP_T addrspace(4)*, %struct.TINYMT32WP_T addrspace(4)** %tiny.addr, align 4
  %s0 = getelementptr inbounds %struct.TINYMT32WP_T, %struct.TINYMT32WP_T addrspace(4)* %0, i32 0, i32 0
  %1 = load i32, i32 addrspace(4)* %s0, align 4
  %2 = load i32, i32 addrspace(2)* @tinymt32_mask.const, align 4
  %and = and i32 %1, %2
  %3 = load %struct.TINYMT32WP_T addrspace(4)*, %struct.TINYMT32WP_T addrspace(4)** %tiny.addr, align 4
  %s1 = getelementptr inbounds %struct.TINYMT32WP_T, %struct.TINYMT32WP_T addrspace(4)* %3, i32 0, i32 1
  %4 = load i32, i32 addrspace(4)* %s1, align 4
  %xor = xor i32 %and, %4
  %5 = load %struct.TINYMT32WP_T addrspace(4)*, %struct.TINYMT32WP_T addrspace(4)** %tiny.addr, align 4
  %s2 = getelementptr inbounds %struct.TINYMT32WP_T, %struct.TINYMT32WP_T addrspace(4)* %5, i32 0, i32 2
  %6 = load i32, i32 addrspace(4)* %s2, align 4
  %xor1 = xor i32 %xor, %6
  store i32 %xor1, i32* %x, align 4
  %7 = load %struct.TINYMT32WP_T addrspace(4)*, %struct.TINYMT32WP_T addrspace(4)** %tiny.addr, align 4
  %s3 = getelementptr inbounds %struct.TINYMT32WP_T, %struct.TINYMT32WP_T addrspace(4)* %7, i32 0, i32 3
  %8 = load i32, i32 addrspace(4)* %s3, align 4
  store i32 %8, i32* %y, align 4
  %9 = load i32, i32* %x, align 4
  %shl = shl i32 %9, 1
  %10 = load i32, i32* %x, align 4
  %xor2 = xor i32 %10, %shl
  store i32 %xor2, i32* %x, align 4
  %11 = load i32, i32* %y, align 4
  %shr = lshr i32 %11, 1
  %12 = load i32, i32* %x, align 4
  %xor3 = xor i32 %shr, %12
  %13 = load i32, i32* %y, align 4
  %xor4 = xor i32 %13, %xor3
  store i32 %xor4, i32* %y, align 4
  %14 = load %struct.TINYMT32WP_T addrspace(4)*, %struct.TINYMT32WP_T addrspace(4)** %tiny.addr, align 4
  %s15 = getelementptr inbounds %struct.TINYMT32WP_T, %struct.TINYMT32WP_T addrspace(4)* %14, i32 0, i32 1
  %15 = load i32, i32 addrspace(4)* %s15, align 4
  %16 = load %struct.TINYMT32WP_T addrspace(4)*, %struct.TINYMT32WP_T addrspace(4)** %tiny.addr, align 4
  %s06 = getelementptr inbounds %struct.TINYMT32WP_T, %struct.TINYMT32WP_T addrspace(4)* %16, i32 0, i32 0
  store i32 %15, i32 addrspace(4)* %s06, align 4
  %17 = load %struct.TINYMT32WP_T addrspace(4)*, %struct.TINYMT32WP_T addrspace(4)** %tiny.addr, align 4
  %s27 = getelementptr inbounds %struct.TINYMT32WP_T, %struct.TINYMT32WP_T addrspace(4)* %17, i32 0, i32 2
  %18 = load i32, i32 addrspace(4)* %s27, align 4
  %19 = load %struct.TINYMT32WP_T addrspace(4)*, %struct.TINYMT32WP_T addrspace(4)** %tiny.addr, align 4
  %s18 = getelementptr inbounds %struct.TINYMT32WP_T, %struct.TINYMT32WP_T addrspace(4)* %19, i32 0, i32 1
  store i32 %18, i32 addrspace(4)* %s18, align 4
  %20 = load i32, i32* %x, align 4
  %21 = load i32, i32* %y, align 4
  %shl9 = shl i32 %21, 10
  %xor10 = xor i32 %20, %shl9
  %22 = load %struct.TINYMT32WP_T addrspace(4)*, %struct.TINYMT32WP_T addrspace(4)** %tiny.addr, align 4
  %s211 = getelementptr inbounds %struct.TINYMT32WP_T, %struct.TINYMT32WP_T addrspace(4)* %22, i32 0, i32 2
  store i32 %xor10, i32 addrspace(4)* %s211, align 4
  %23 = load i32, i32* %y, align 4
  %24 = load %struct.TINYMT32WP_T addrspace(4)*, %struct.TINYMT32WP_T addrspace(4)** %tiny.addr, align 4
  %s312 = getelementptr inbounds %struct.TINYMT32WP_T, %struct.TINYMT32WP_T addrspace(4)* %24, i32 0, i32 3
  store i32 %23, i32 addrspace(4)* %s312, align 4
  %25 = load i32, i32* %y, align 4
  %and13 = and i32 %25, 1
  %tobool = icmp ne i32 %and13, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %26 = load %struct.TINYMT32WP_T addrspace(4)*, %struct.TINYMT32WP_T addrspace(4)** %tiny.addr, align 4
  %mat1 = getelementptr inbounds %struct.TINYMT32WP_T, %struct.TINYMT32WP_T addrspace(4)* %26, i32 0, i32 4
  %27 = load i32, i32 addrspace(4)* %mat1, align 4
  %28 = load %struct.TINYMT32WP_T addrspace(4)*, %struct.TINYMT32WP_T addrspace(4)** %tiny.addr, align 4
  %s114 = getelementptr inbounds %struct.TINYMT32WP_T, %struct.TINYMT32WP_T addrspace(4)* %28, i32 0, i32 1
  %29 = load i32, i32 addrspace(4)* %s114, align 4
  %xor15 = xor i32 %29, %27
  store i32 %xor15, i32 addrspace(4)* %s114, align 4
  %30 = load %struct.TINYMT32WP_T addrspace(4)*, %struct.TINYMT32WP_T addrspace(4)** %tiny.addr, align 4
  %mat2 = getelementptr inbounds %struct.TINYMT32WP_T, %struct.TINYMT32WP_T addrspace(4)* %30, i32 0, i32 5
  %31 = load i32, i32 addrspace(4)* %mat2, align 4
  %32 = load %struct.TINYMT32WP_T addrspace(4)*, %struct.TINYMT32WP_T addrspace(4)** %tiny.addr, align 4
  %s216 = getelementptr inbounds %struct.TINYMT32WP_T, %struct.TINYMT32WP_T addrspace(4)* %32, i32 0, i32 2
  %33 = load i32, i32 addrspace(4)* %s216, align 4
  %xor17 = xor i32 %33, %31
  store i32 %xor17, i32 addrspace(4)* %s216, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: convergent inlinehint mustprogress norecurse nounwind
define internal spir_func i32 @_ZL15tinymt32_temperPU3AS412TINYMT32WP_T(%struct.TINYMT32WP_T addrspace(4)* %tiny) #3 {
entry:
  %tiny.addr = alloca %struct.TINYMT32WP_T addrspace(4)*, align 4
  %t0 = alloca i32, align 4
  %t1 = alloca i32, align 4
  store %struct.TINYMT32WP_T addrspace(4)* %tiny, %struct.TINYMT32WP_T addrspace(4)** %tiny.addr, align 4
  %0 = load %struct.TINYMT32WP_T addrspace(4)*, %struct.TINYMT32WP_T addrspace(4)** %tiny.addr, align 4
  %s3 = getelementptr inbounds %struct.TINYMT32WP_T, %struct.TINYMT32WP_T addrspace(4)* %0, i32 0, i32 3
  %1 = load i32, i32 addrspace(4)* %s3, align 4
  store i32 %1, i32* %t0, align 4
  %2 = load %struct.TINYMT32WP_T addrspace(4)*, %struct.TINYMT32WP_T addrspace(4)** %tiny.addr, align 4
  %s0 = getelementptr inbounds %struct.TINYMT32WP_T, %struct.TINYMT32WP_T addrspace(4)* %2, i32 0, i32 0
  %3 = load i32, i32 addrspace(4)* %s0, align 4
  %4 = load %struct.TINYMT32WP_T addrspace(4)*, %struct.TINYMT32WP_T addrspace(4)** %tiny.addr, align 4
  %s2 = getelementptr inbounds %struct.TINYMT32WP_T, %struct.TINYMT32WP_T addrspace(4)* %4, i32 0, i32 2
  %5 = load i32, i32 addrspace(4)* %s2, align 4
  %shr = lshr i32 %5, 8
  %add = add i32 %3, %shr
  store i32 %add, i32* %t1, align 4
  %6 = load i32, i32* %t1, align 4
  %7 = load i32, i32* %t0, align 4
  %xor = xor i32 %7, %6
  store i32 %xor, i32* %t0, align 4
  %8 = load i32, i32* %t1, align 4
  %and = and i32 %8, 1
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %9 = load %struct.TINYMT32WP_T addrspace(4)*, %struct.TINYMT32WP_T addrspace(4)** %tiny.addr, align 4
  %tmat = getelementptr inbounds %struct.TINYMT32WP_T, %struct.TINYMT32WP_T addrspace(4)* %9, i32 0, i32 6
  %10 = load i32, i32 addrspace(4)* %tmat, align 4
  %11 = load i32, i32* %t0, align 4
  %xor1 = xor i32 %11, %10
  store i32 %xor1, i32* %t0, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %12 = load i32, i32* %t0, align 4
  ret i32 %12
}

; Function Attrs: convergent norecurse nounwind
define linkonce_odr spir_func void @_ZNU3AS412PRNG_LCG6432C2ERU3AS2m(%struct.PRNG_LCG6432 addrspace(4)* nonnull align 8 dereferenceable(8) %this, i64 addrspace(2)* align 8 dereferenceable(8) %seed) unnamed_addr #5 comdat align 2 {
entry:
  %this.addr = alloca %struct.PRNG_LCG6432 addrspace(4)*, align 4
  %seed.addr = alloca i64 addrspace(2)*, align 4
  store %struct.PRNG_LCG6432 addrspace(4)* %this, %struct.PRNG_LCG6432 addrspace(4)** %this.addr, align 4
  store i64 addrspace(2)* %seed, i64 addrspace(2)** %seed.addr, align 4
  %this1 = load %struct.PRNG_LCG6432 addrspace(4)*, %struct.PRNG_LCG6432 addrspace(4)** %this.addr, align 4
  %state = getelementptr inbounds %struct.PRNG_LCG6432, %struct.PRNG_LCG6432 addrspace(4)* %this1, i32 0, i32 0
  %0 = load i64 addrspace(2)*, i64 addrspace(2)** %seed.addr, align 4
  %1 = load i64, i64 addrspace(2)* %0, align 8
  call spir_func void @_Z12lcg6432_seedPU3AS4mm(i64 addrspace(4)* %state, i64 %1) #6
  ret void
}

; Function Attrs: convergent mustprogress norecurse nounwind
define linkonce_odr spir_func float @_Z13UniformSampleI12PRNG_LCG6432EfRT_(%struct.PRNG_LCG6432* nonnull align 8 dereferenceable(8) %rng) #0 comdat {
entry:
  %rng.addr = alloca %struct.PRNG_LCG6432*, align 4
  %uint_max = alloca float, align 4
  %res = alloca float, align 4
  store %struct.PRNG_LCG6432* %rng, %struct.PRNG_LCG6432** %rng.addr, align 4
  store float 0x41F0000000000000, float* %uint_max, align 4
  %0 = load %struct.PRNG_LCG6432*, %struct.PRNG_LCG6432** %rng.addr, align 4
  %1 = addrspacecast %struct.PRNG_LCG6432* %0 to %struct.PRNG_LCG6432 addrspace(4)*
  %call = call spir_func i32 @_ZNU3AS412PRNG_LCG643213generate_uintEv(%struct.PRNG_LCG6432 addrspace(4)* nonnull align 8 dereferenceable(8) %1) #6
  %conv = uitofp i32 %call to float
  %div = fdiv float %conv, 0x41F0000000000000, !fpmath !29
  store float %div, float* %res, align 4
  %2 = load float, float* %res, align 4
  ret float %2
}

; Function Attrs: convergent mustprogress norecurse nounwind
define linkonce_odr spir_func i32 @_ZNU3AS412PRNG_LCG643213generate_uintEv(%struct.PRNG_LCG6432 addrspace(4)* nonnull align 8 dereferenceable(8) %this) #0 comdat align 2 {
entry:
  %this.addr = alloca %struct.PRNG_LCG6432 addrspace(4)*, align 4
  store %struct.PRNG_LCG6432 addrspace(4)* %this, %struct.PRNG_LCG6432 addrspace(4)** %this.addr, align 4
  %this1 = load %struct.PRNG_LCG6432 addrspace(4)*, %struct.PRNG_LCG6432 addrspace(4)** %this.addr, align 4
  %state = getelementptr inbounds %struct.PRNG_LCG6432, %struct.PRNG_LCG6432 addrspace(4)* %this1, i32 0, i32 0
  %call = call spir_func i32 @_Z13_lcg6432_uintPU3AS4m(i64 addrspace(4)* %state) #6
  ret i32 %call
}

attributes #0 = { convergent mustprogress norecurse nounwind "frame-pointer"="none" "min-legal-vector-width"="0" "no-builtins" "no-trapping-math"="true" "stack-protector-buffer-size"="0" "stackrealign" }
attributes #1 = { argmemonly nofree nounwind willreturn }
attributes #2 = { convergent nounwind readnone willreturn "frame-pointer"="none" "no-builtins" "no-trapping-math"="true" "stack-protector-buffer-size"="0" "stackrealign" }
attributes #3 = { convergent inlinehint mustprogress norecurse nounwind "frame-pointer"="none" "min-legal-vector-width"="0" "no-builtins" "no-trapping-math"="true" "stack-protector-buffer-size"="0" "stackrealign" }
attributes #4 = { convergent mustprogress norecurse nounwind "frame-pointer"="none" "min-legal-vector-width"="0" "no-builtins" "no-trapping-math"="true" "stack-protector-buffer-size"="0" "stackrealign" "uniform-work-group-size"="true" }
attributes #5 = { convergent norecurse nounwind "frame-pointer"="none" "min-legal-vector-width"="0" "no-builtins" "no-trapping-math"="true" "stack-protector-buffer-size"="0" "stackrealign" }
attributes #6 = { convergent nobuiltin "no-builtins" }
attributes #7 = { convergent nobuiltin nounwind readnone willreturn "no-builtins" }

!llvm.module.flags = !{!0}
!opencl.ocl.version = !{!1}
!opencl.spir.version = !{!1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 2, i32 0}
!2 = !{!"clang version 15.0.0 (https://github.com/llvm/llvm-project 2ba5d820e2b0e5016ec706e324060a329f9a83a3)"}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.mustprogress"}
!5 = distinct !{!5, !4}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !4}
!8 = distinct !{!8, !4}
!9 = distinct !{!9, !4}
!10 = distinct !{!10, !4}
!11 = distinct !{!11, !4}
!12 = distinct !{!12, !4}
!13 = distinct !{!13, !4}
!14 = distinct !{!14, !4}
!15 = distinct !{!15, !4}
!16 = distinct !{!16, !4}
!17 = distinct !{!17, !4}
!18 = !{i32 2, i32 2, i32 2, i32 0, i32 0, i32 2, i32 1, i32 1}
!19 = !{!"none", !"none", !"none", !"none", !"none", !"none", !"none", !"none"}
!20 = !{!"uint*", !"uint*", !"uint*", !"float", !"float", !"ulong*", !"uint*", !"uint*"}
!21 = !{!"const", !"const", !"const", !"", !"", !"const", !"", !""}
!22 = distinct !{!22, !4}
!23 = distinct !{!23, !4}
!24 = distinct !{!24, !4}
!25 = distinct !{!25, !4}
!26 = distinct !{!26, !4}
!27 = distinct !{!27, !4}
!28 = distinct !{!28, !4}
!29 = !{float 2.500000e+00}


#ifndef CLG_DISTRIBUTIONS_CLCPP
#define CLG_DISTRIBUTIONS_CLCPP
//Requires randomcl include path

#include <isaac.cl>
#include <kiss99.cl>
#include <lcg6432.cl>
#include <lfib.cl>
#include <mrg31k3p.cl>
#include <mrg63k3a.cl>
#include <msws.cl>
#include <mt19937.cl>
#include <mwc64x.cl>
#include <pcg6432.cl>
#include <philox2x32_10.cl>
#include <ran2.cl>
#include <tinymt32.cl>
// #include <tinymt64.cl>
#include <tyche.cl>
#include <well512.cl>
// #include <xorshift6432star.cl>
// #define UINT32_MAX 4294967295u


struct PRNG_ISAAC
{
    isaac_state state;
    PRNG_ISAAC(constant ulong& seed)
    {
        isaac_seed(&state, seed);
    }

    float generate_float()
    {
        return isaac_float(state);
    }

    uint generate_uint()
    {
        return isaac_uint(state);
    }
};


struct PRNG_KISS99
{
    kiss99_state state;
    PRNG_KISS99(constant ulong& seed)
    {
        kiss99_seed(&state, seed);
    }

    float generate_float()
    {
        return kiss99_float(state);
    }

    uint generate_uint()
    {
        return kiss99_uint(state);
    }
};


struct PRNG_LCG6432
{
    lcg6432_state state;
    PRNG_LCG6432(constant ulong& seed)
    {
        lcg6432_seed(&state, seed);
    }

    float generate_float()
    {
        return lcg6432_float(state);
    }

    uint generate_uint()
    {
        return lcg6432_uint(state);
    }
};


struct PRNG_LFIB
{
    lfib_state state;
    PRNG_LFIB(constant ulong& seed)
    {
        lfib_seed(&state, seed);
    }

    float generate_float()
    {
        return lfib_float(state);
    }

    uint generate_uint()
    {
        return lfib_uint(state);
    }
};

struct PRNG_MRG31K3P
{
    mrg31k3p_state state;
    PRNG_MRG31K3P(constant ulong& seed)
    {
        mrg31k3p_seed(&state, seed);
    }

    float generate_float()
    {
        return mrg31k3p_float(state);
    }

    uint generate_uint()
    {
        return mrg31k3p_uint(state);
    }
};

struct PRNG_MRG63K3A
{
    mrg63k3a_state state;
    PRNG_MRG63K3A(constant ulong& seed)
    {
        mrg63k3a_seed(&state, seed);
    }

    float generate_float()
    {
        return mrg63k3a_float(state);
    }

    uint generate_uint()
    {
        return mrg63k3a_uint(state);
    }
};

struct PRNG_MSWS
{
    msws_state state;
    PRNG_MSWS(constant ulong& seed)
    {
        msws_seed(&state, seed);
    }

    float generate_float()
    {
        return msws_float(state);
    }

    uint generate_uint()
    {
        return msws_uint(state);
    }
};

struct PRNG_MT19937
{
    mt19937_state state;
    PRNG_MT19937(constant ulong& seed)
    {
        mt19937_seed(&state, seed);
    }

    float generate_float()
    {
        return mt19937_float(state);
    }

    uint generate_uint()
    {
        return mt19937_uint(state);
    }
};

struct PRNG_MWC64X
{
    mwc64x_state state;
    PRNG_MWC64X(constant ulong& seed)
    {
        mwc64x_seed(&state, seed);
    }

    float generate_float()
    {
        return mwc64x_float(state);
    }

    uint generate_uint()
    {
        return mwc64x_uint(state);
    }
};

struct PRNG_PCG6432
{
    pcg6432_state state;
    PRNG_PCG6432(constant ulong& seed)
    {
        pcg6432_seed(&state, seed);
    }

    float generate_float()
    {
        return pcg6432_float(state);
    }

    uint generate_uint()
    {
        return pcg6432_uint(state);
    }
};

struct PRNG_PHILOX2X32_10
{
    philox2x32_10_state state;
    PRNG_PHILOX2X32_10(constant ulong& seed)
    {
        philox2x32_10_seed(&state, seed);
    }

    float generate_float()
    {
        return philox2x32_10_float(state);
    }

    uint generate_uint()
    {
        return philox2x32_10_uint(state);
    }
};

struct PRNG_RAN2
{
    ran2_state state;
    PRNG_RAN2(constant ulong& seed)
    {
        ran2_seed(&state, seed);
    }

    float generate_float()
    {
        return ran2_float(state);
    }

    uint generate_uint()
    {
        return ran2_uint(state);
    }
};

struct PRNG_TINYMT32
{
    tinymt32_state state;
    PRNG_TINYMT32(constant ulong& seed)
    {
        tinymt32_seed(&state, seed);
    }

    float generate_float()
    {
        return tinymt32_float(state);
    }

    uint generate_uint()
    {
        return tinymt32_uint(state);
    }
};

// struct PRNG_TINYMT64
// {
//     tinymt64_state state;
//     PRNG_TINYMT64(constant ulong& seed)
//     {
//         tinymt64_seed(&state, seed);
//     }

//     float generate_float()
//     {
//         return tinymt64_float(state);
//     }

//     uint generate_uint()
//     {
//         return tinymt64_uint(state);
//     }
// };

struct PRNG_WELL512
{
    well512_state state;
    PRNG_WELL512(constant ulong& seed)
    {
        well512_seed(&state, seed);
    }

    float generate_float()
    {
        return well512_float(state);
    }

    uint generate_uint()
    {
        return well512_uint(state);
    }
};



template <typename PRNG_generator>
void UniformSample(PRNG_generator& rng, float min, float max, uint N, float* res)
{
    const float float_max = 3.402823466e+38f;

    for (int i = 0; i < N; i++)
    {
        
        res[i] = rng.generate_float() *(max-min)/float_max + min;
    }
}

template<typename PRNG_generator>
float UniformSample(PRNG_generator& rng)
{
    const float float_max = 3.402823466e+38f;
    float res = rng.generate_float()/float_max;
    return res;
}

template <typename PRNG_generator>
bool BernoulliTrial(PRNG_generator& rng, const float p)
{
    float r = UniformSample(rng);
    printf("Sample: %u\n", (uint)100*r);
    return r < p;
}

template <typename PRNG_generator>
uint BinomialSample(PRNG_generator& rng, const uint N, float p)
{
    float uSample = 1.f;
    uint count = 0;
    for (uint i = 0; i < N; i++)
    {
        UniformSample(rng, 0, 1, 1, &uSample);
        if (uSample < p)
        {
            count++;
        }
    }
    return count;
}
template <typename PRNG_generator>
float PoissonSample(PRNG_generator& rng, float lambda)
{
    float x = 0;
    float p = -lambda;
    float s = 1;
    float u;
    // printf("p: %e, lbd: %f", p, lambda);
    while(s > p)
    {
        UniformSample(rng, 0, 1, 1, &u);
        x++;
        s = s + log(u);
    }
    // printf("x: %f\n", x);
    return x-1;
}

#endif